<beans 
	xmlns="http://www.springframework.org/schema/beans" 
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:task="http://www.springframework.org/schema/task" 
	xmlns:jee="http://www.springframework.org/schema/jee" 
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:device="http://www.springframework.org/schema/mobile/device"
	xmlns:mvc="http://www.springframework.org/schema/mvc" 
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd   
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
	http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd 
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd   
	http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.0.xsd   
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	http://www.springframework.org/schema/mobile/device http://www.springframework.org/schema/mobile/device/spring-mobile-device-1.0.xsd
	http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd">
    <!--
		This will automatically locate any and all property files you have
		within your classpath, provided they fall under the META-INF/spring
		directory. The located property files are parsed and their values can
		then be used within application context files in the form of
		${propertyKey}.
	-->
    <context:property-placeholder location="classpath*:META-INF/spring/*.properties"/>
    <!--
		Turn on AspectJ @Configurable support. As a result, any time you
		instantiate an object, Spring will attempt to perform dependency
		injection on that object. This occurs for instantiation via the "new"
		keyword, as well as via reflection. This is possible because AspectJ
		is used to "weave" Roo-based applications at compile time. In effect
		this feature allows dependency injection of any object at all in your
		system, which is a very useful feature (without @Configurable you'd
		only be able to dependency inject objects acquired from Spring or
		subsequently presented to a specific Spring dependency injection
		method). Roo applications use this useful feature in a number of
		areas, such as @PersistenceContext injection into entities.
	-->
    <context:spring-configured/>
    <!--
		This declaration will cause Spring to locate every @Component,
		@Repository and @Service in your application. In practical terms this
		allows you to write a POJO and then simply annotate the new POJO as an
		@Service and Spring will automatically detect, instantiate and
		dependency inject your service at startup time. Importantly, you can
		then also have your new service injected into any other class that
		requires it simply by declaring a field for your service inside the
		relying class and Spring will inject it. Note that two exclude filters
		are declared. The first ensures that Spring doesn't spend time
		introspecting Roo-specific ITD aspects. The second ensures Roo doesn't
		instantiate your @Controller classes, as these should be instantiated
		by a web tier application context. Refer to web.xml for more details
		about the web tier application context setup services.
		
		Furthermore, this turns on @Autowired, @PostConstruct etc support. These 
		annotations allow you to use common Spring and Java Enterprise Edition 
		annotations in your classes without needing to do any special configuration. 
		The most commonly used annotation is @Autowired, which instructs Spring to
		dependency inject an object into your class.
	-->
    <context:component-scan base-package="com.scheduleem.shop">
        <context:exclude-filter expression=".*_Roo_.*" type="regex"/>
        <context:exclude-filter expression="org.springframework.stereotype.Controller" type="annotation"/>
    </context:component-scan>
    <context:component-scan base-package="com/scheduleem/shop/task"/>
	<task:scheduled-tasks>
		<task:scheduled ref="Processor" method="process" cron="0 0 0 * * ?" />
	</task:scheduled-tasks>
	<bean class="com.scheduleem.shop.task.ScheduledProcessor" id="Processor">
		<property name="appointmentNotificationHelper" ref="appointmentNotificationHelper"/>
		<property name="appointment" ref="appointment" />
		<property name="settings" ref="settings" />
		<property name="client" ref="client" />    
	</bean>
	
	<bean class="com.scheduleem.shop.domain.Appointment" id="appointment"/>
	<bean class="com.scheduleem.shop.domain.ShopSettings" id="settings"/>
	<bean class="com.scheduleem.shop.domain.Clients" id="client"/>
	
	<aop:config proxy-target-class="true"/>
    <bean class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close" id="dataSource">
        <property name="driverClassName" value="${database.driverClassName}"/>
        <property name="url" value="${database.url}"/>
        <property name="username" value="${database.username}"/>
        <property name="password" value="${database.password}"/>
    </bean>
    <bean class="org.springframework.orm.jpa.JpaTransactionManager" id="transactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>
    <tx:annotation-driven mode="aspectj" transaction-manager="transactionManager"/>
    <bean class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean" id="entityManagerFactory">
        <property name="dataSource" ref="dataSource"/>
    </bean>
<bean class="org.springframework.mail.javamail.JavaMailSenderImpl" id="mailSender">
		<property name="host" value="${email.host}"/>
		<property name="username" value="${email.username}"/>
		<property name="password" value="${email.password}"/>
		<property name="protocol" value="${email.protocol}"/>
		<property name="port" value="${email.port}"/>
    </bean>
<bean class="ca.digitalface.jasperoo.reports.CustomJasperReportsMultiFormatView" id="jasperReportsMultiFormatView" name="jasperReportsMultiFormatViewBean"/>
<bean class="org.springframework.web.servlet.view.ResourceBundleViewResolver" id="viewResolver">
        <property name="basename" value="views"/>
    </bean>
	<!--  ldap stuff -->
	<bean id="contextSource"
		class="org.springframework.ldap.core.support.LdapContextSource">
		<property name="base" value="dc=peerlessbeauty,dc=com" />
		<property name="url" value="ldap://127.0.0.1:1389" />
		<property name="userDn" value="cn=Manager,dc=peerlessbeauty,dc=com" />
		<property name="password" value="server1.peerlessbeauty.com" />
	</bean>
	<bean id="ldapTemplate" class="org.springframework.ldap.core.LdapTemplate">
		<constructor-arg ref="contextSource" />
	</bean>
    <bean id="personDao"  class="com.scheduleem.shop.domain.PersonDaoImpl">
    	<property name="ldapTemplate" ref="ldapTemplate" />
    	<property name="ldaptreepathminusroot"  value="ou=users"  />
    	<property name="ldapbase"  value="dc=peerlessbeauty,dc=com"  />
    </bean>    
	<!-- registration processing  -->
    <bean id="myschedulecontroller"  class="com.scheduleem.shop.web.MyScheduleController">
		<property name="generalNotificationHelper" ref="generalNotificationHelper"/>
		<property name="gcalNotificationHelper" ref="gcalNotificationHelper"/>
    </bean>
    <bean id="signup"  class="com.scheduleem.shop.web.SignupController">
		<property name="registrationNotificationHelper" ref="registrationNotificationHelper"/>
    </bean>
    <bean id="forgotpw"  class="com.scheduleem.shop.web.ForgotPwController">
		<property name="registrationNotificationHelper" ref="registrationNotificationHelper"/>
    </bean>    
    <bean id="usernamectrl"  class="com.scheduleem.shop.web.UsernameController">
		<property name="registrationNotificationHelper" ref="registrationNotificationHelper"/>
    </bean>    

    <bean id="register"  class="com.scheduleem.shop.web.PublicShopRegisterController">
		<property name="registrationNotificationHelper" ref="registrationNotificationHelper"/>
    </bean>
</beans>
