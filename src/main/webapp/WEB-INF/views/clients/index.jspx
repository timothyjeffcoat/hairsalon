<div xmlns:c="http://java.sun.com/jsp/jstl/core" xmlns:spring="http://www.springframework.org/tags" xmlns:util="urn:jsptagdir:/WEB-INF/tags/util" xmlns:jsp="http://java.sun.com/JSP/Page" version="2.0">

	<div id="wrapper" style="padding-top:40px;">
		<div id="page-wrapper">

 <style type="text/css">
             .dojoxGrid table { margin: 0; } html, body { width: 100%; height: 100%;
                                                          margin: 0; }
                                                   
 </style>
<script>
dojo.provide("dojox.io.xhrPlugins");
dojo.require("dojo.AdapterRegistry");
dojo.require("dojo._base.xhr");
dojo.require("dojo.request.xhr");
dojo.require("dojo.json");


dojo.require("dojo.parser");
dojo.require("dojo.string");
dojo.require("dojo.html");

dojo.require("dojo.data.ItemFileReadStore");
dojo.require("dojo.data.ItemFileWriteStore");
dojo.require("dojox.grid.DataGrid");
dojo.require("dojox.grid.EnhancedGrid");
dojo.require("dijit.Dialog");
dojo.require("dijit.form.Form");
dojo.require("dijit.form.Button");
dojo.require("dijit.form.FilteringSelect");
dojo.require("dijit.form.ValidationTextBox");
dojo.require("dijit.form.TextBox");
dojo.require("dijit.form.DateTextBox");
dojo.require("dijit.form.CheckBox");
dojo.require("dijit.form.SimpleTextarea");
dojo.require("dijit.layout.TabContainer"); 

dojo.require("dijit.layout.ContentPane");
dojo.require("dijit.layout.TabContainer");

dojo.require("dojox.rpc.Client");
dojo.require("dojox.grid.enhanced.plugins.IndirectSelection");

dojo.require("dojox.widget.Standby");
</script>
<script type="text/javascript">
	var standby;
</script>

	<c:choose>
		<c:when test="${not empty shopname}">
			<spring:url value="/public/shop/${shopurl}" var="home" />
		</c:when>
		<c:otherwise>
			<spring:url value="/" var="home" />
		</c:otherwise>
	</c:choose>

	<ol class="breadcrumb">
		<li><a href="${home}"><i class="icon-dashboard"></i>Home</a></li>
		<li class="active"><i class="icon-file-alt"></i>Clients</li>
	</ol>

		 <div id="myTabContainer" style="height: 1800px;">
			 <div id="detailsTab" style="width: 100%">
				 		<div class="row">
				 			<div class="col-lg-6" >
								
								<div class="panel panel-default">
									<div class="panel-heading">
										<h3 class="panel-title">Clients</h3>
									</div>
								  <div class="panel-body">
										<div id="firstTabClientListDiv" style="height: 90%; width:90%;">
										<c:set var="allow" value="${allowaddclient}"/>
								
										<div id="upgraderequired" style="display:none">
											<p>
												<span id="status.upgrade.required.errors" class="error">Your current status does not allow you to add more clients! Upgrade your status in the Settings section under Account.</span>
											</p>
										</div>
								
										<p>
										
											
										<span data-dojo-type="dijit.form.Button" id="addbutton" style="display:none">
											Add client
											<script type="dojo/method" data-dojo-event="onClick" data-dojo-args="evt">
											<![CDATA[
											try{
												var dlg = dijit.byId('addClientDialog');
												dlg.reset();
												dlg.show();
											}catch(e){
												window.console && console.log(e);
											}
											]]>
										</script>
										</span>
										
									
									
										<span data-dojo-type="dijit.form.Button">
											Remove client
											<script type="dojo/method" data-dojo-event="onClick" data-dojo-args="evt">
												removeClient();
											</script>
										</span>
										<div>
											<input dojoType="dijit.form.TextBox" id="filtergridfirsttext"  type="text" value="*"/>
											<span data-dojo-type="dijit.form.Button">
												Filter first name 
												<script type="dojo/method" data-dojo-event="onClick" data-dojo-args="evt">
												filterFirstNameClient();
											</script>
											</span>
																						
										</div>
										<div>
											<input dojoType="dijit.form.TextBox" id="filtergridtext"  type="text" value="*"/>
											<span data-dojo-type="dijit.form.Button">
												Filter last name
												<script type="dojo/method" data-dojo-event="onClick" data-dojo-args="evt">
													filterLastNameClient();
												</script>
											</span>
											<span data-dojo-type="dijit.form.Button">
												Show all
												<script type="dojo/method" data-dojo-event="onClick" data-dojo-args="evt">
													showAllClient();
												</script>
											</span>
										</div>
									</p>
								</div>
							</div>
							</div>
						</div>
						
						<div class="col-lg-6">
								<div id="client_view" dojoType="dijit.form.Form" jsId="client_view" >
									<div id="clientdetailsContainer" style="height: 100%; width:100%;">
										<div class="panel panel-default">
											<div class="panel-heading">
												<h3 class="panel-title">Client Details</h3>
											</div>
										
										  <div class="panel-body">
											<input dojoType="dijit.form.TextBox" id="selectedclientid" name="selectedclientid" type="hidden"/>
											<div>Appointment has been scheduled:</div>
											<div class="col-lg-12">
												<div class="checkbox">
													<label for="acceptsinitial" ><span >Send email</span>
													<input dojoType="dijit.form.CheckBox"  name="acceptsinitial" id="acceptsinitial" class="checkbox style-2 pull-right"  />
													</label>
												</div>
											</div>
											<div class="col-lg-12">
												<div class="checkbox">
													<label for="acceptsinitialsms" ><span >Send text</span>
													<input dojoType="dijit.form.CheckBox"  name="acceptsinitialsms" id="acceptsinitialsms" class="checkbox style-2 pull-right"  />
													</label>
												</div>
											</div>
											<div>Reminder or confirmation:</div>
											<div class="col-lg-12">
												<div class="checkbox">
													<label for="acceptsnotifications" ><span>Send email</span>
														<input dojoType="dijit.form.CheckBox" name="acceptsnotifications" id="acceptsnotifications"  class="checkbox style-2 pull-right" />
													</label>
												</div>
											</div>
											<div class="col-lg-12">
												<div class="checkbox">
													<label for="acceptsnotificationssms" ><span>Send text</span>
														<input dojoType="dijit.form.CheckBox" name="acceptsnotificationssms" id="acceptsnotificationssms"  class="checkbox style-2 pull-right" />
													</label>
												</div>
											</div>
											<div>Thank you or Receipt:</div>
											<div class="col-lg-12">
												<div class="checkbox">
													<label for="acceptsreceipts" ><span>Send email</span>
														<input dojoType="dijit.form.CheckBox"  name="acceptsreceipts" id="acceptsreceipts"  class="checkbox style-2 pull-right" />
													</label>
												</div>
											</div>
											<div class="col-lg-12">
												<div class="checkbox">
													<label for="acceptsreceiptssms" ><span>Send text</span>
														<input dojoType="dijit.form.CheckBox"  name="acceptsreceiptssms" id="acceptsreceiptssms"  class="checkbox style-2 pull-right" />
													</label>
												</div>
											</div>
											<div class="col-lg-12">
												<div class="form-group">
													<label for="_firstname"><span>First name:</span></label>
													<input dojoType="dijit.form.ValidationTextBox" id="firstname" required="true" class="form-control"/>														
												</div>
											
												<div class="form-group">
													<label for="_lastname"><span>Last name:</span></label>
													<input dojoType="dijit.form.ValidationTextBox" id="lastname" required="true" class="form-control"/>														
												</div>
												
												<div class="form-group">
													<label for="_homephone"><span>Home phone:</span></label>
													<input dojoType="dijit.form.ValidationTextBox" id="homephone" required="false" class="form-control"/>														
												</div>
												
												<div class="form-group">
													<label for="_workphone"><span>Work phone:</span></label>
													<input dojoType="dijit.form.ValidationTextBox" id="workphone" required="false" class="form-control"/>														
												</div>
												
												<div class="form-group">
													<label for="_cellphone"><span>Cell phone:</span></label>
													<input dojoType="dijit.form.ValidationTextBox" id="cellphone" required="false" class="form-control"/>														
												</div>
												<div class="form-group">
													<label for="_email">E-mail:</label>
													<input dojoType="dijit.form.ValidationTextBox" id="email" required="false" class="form-control"/>														
												</div>
												<div class="form-group">
													<label for="_dob">DOB:</label>
													<input dojoType="dijit.form.DateTextBox" id="dob" required="false" class="form-control"/>														
												</div>
												<div class="form-group">
													<label for="_address1">Address1:</label>
													<input dojoType="dijit.form.ValidationTextBox" id="address1" required="false" class="form-control"/>														
												</div>
												
												<div class="form-group">
													<label for="_address2">Address2:</label>
													<input dojoType="dijit.form.ValidationTextBox" id="address2" required="false" class="form-control"/>														
												</div>
												
												<div class="form-group">
													<label for="_city">City:</label>
													<input dojoType="dijit.form.ValidationTextBox" id="city" required="false" class="form-control"/>														
												</div>
												
												<div class="form-group">
													<label for="_state">State:</label>
													<input dojoType="dijit.form.ValidationTextBox" id="state" required="false" class="form-control"/>														
												</div>
												
												<div class="form-group">
													<label for="_zip">Zip:</label>
													<input dojoType="dijit.form.ValidationTextBox" id="zip" required="false" class="form-control" />														
												</div>
											</div>

											<button id="saveclientbutton" dojoType="dijit.form.Button" type="button" onClick="updateClient();">
												Save
											</button>
											<button id="Viewappointmenthistory" dojoType="dijit.form.Button" type="button" onClick="loadApptHistory();">
											View appointment history
											</button>
										</div>
										</div>
										<div class="panel panel-default">
											<div class="panel-heading">
												<h3 class="panel-title">Appointment History</h3>
											</div>
  											<div class="panel-body">
												<div id="apptHistoryDiv" style="height: 100px;width: 100%;">AppointmentHistory</div>						
											</div>
										</div>
									</div>
								</div>
							</div>	
						</div>
									

			</div>
	<script>
	 Spring.addDecoration(new Spring.ElementDecoration(
			 {elementId : 'detailsTab',
			 widgetType : 'dijit.layout.ContentPane',
			 widgetAttrs : {title: 'Client details / Appt Log ', selected: true}
			 }));
	
	</script>
	
			 <!-- another tab... -->
			 <div id="emailTab">
				<div id="sendmail" dojoType="dijit.form.Form">
					<table>
						<tr>
							<td>
								<util:panel id="ecpanel" title="Email Client" openPane="true">
									<div>
										<label for="_to">To:</label>
									</div>
									<br/>
									<div>
						                  <select dojoType="dijit.form.FilteringSelect" name="toclient" id="toclient" autocomplete="true" value="sel">
						                      <option value="">
						                      </option>
						                    <c:forEach items="${selectclients}" var="item">
						                      <option value="${item.email}">
						                        ${item}
						                      </option>
						                    </c:forEach>
						                  </select>
									</div>
									<br/>
									<div>
										<label for="_subject">Subject:</label>
									</div>
									<br/>
									<div>
										<input dojoType="dijit.form.ValidationTextBox" id="subject" required="true" />														
									</div>
									<br/>
									<div>
										<label for="_msg">Message:</label>
									</div>
									<br/>
									<div>
										<input dojoType="dijit.form.SimpleTextarea" type="text" name="msg" id="msg"/>
									</div>
									<br/>
									<button dojoType="dijit.form.Button" type="button" onClick="send();">
										Send Message
									</button>
									
								</util:panel>
							</td>
						</tr>
					</table>
				</div>
			 </div>
			 <script>
			 Spring.addDecoration(new Spring.ElementDecoration(
					 {elementId : 'emailTab',
					 widgetType : 'dijit.layout.ContentPane',
					 widgetAttrs : {title: 'Email clients', selected: true}
					 }));
			 
			 </script>
				<div dojoType="dijit.Dialog" id="addClientDialog" title="Add client" execute="addClient(arguments[0]);" style="display: none;">
					<div>
						<label for="_firstname_dlg">First name:</label>
					</div>
					<br/>
					<div>
						<div dojoType="dijit.form.ValidationTextBox" id="firstname_dlg" required="true" >
							<script type="dojo/connect" event="onKeyPress" args="event">
							<![CDATA[
								var firstname = dijit.byId('firstname_dlg').attr("value");
								dijit.byId('firstname_dlg').set("value", toTitleCase(firstname));
							]]> 
							</script>
						</div>					
					</div>
					
					<div>
						<label for="_lastname_dlg">Last name:</label>
					</div>
					<br/>
					<div>
						<div dojoType="dijit.form.ValidationTextBox" id="lastname_dlg" required="true" >
							<script type="dojo/connect" event="onKeyPress" args="event">
							<![CDATA[
								var lastname = dijit.byId('lastname_dlg').attr("value");
								dijit.byId('lastname_dlg').set("value", toTitleCase(lastname));
							]]> 
							</script>
						</div>					
					</div>
					<div>
						<label for="_home_phonenumber_dlg">Cell Ph.:</label>
					</div>
					<br/>
					<div>
						<div dojoType="dijit.form.ValidationTextBox" id="home_phonenumber_dlg" required="false" />
					</div>
					<br/>
					<button dojoType="dijit.form.Button" type="button" onClick="if(dijit.byId('addClientDialog').validate()){saveAddDialog();dijit.byId('addClientDialog').hide();}">
						Save
					</button>
				</div>		
				<div dojoType="dijit.Dialog" id="addClientsDialog" title="Add client(s)" execute="updateAppointment(arguments[0]);" style="display: none">
					<p>
						<label for="dialogclients">Clients:</label>				
					</p>
					<p>
					<div style="height: 250px;">
						<div id="clientGrid" style="width: auto; height: 100%;">_</div>
					</div>
					</p>
					<button dojoType="dijit.form.Button" type="button" onClick="saveClients();dijit.byId('addClientsDialog').hide();">
						Save
					</button>
				</div>		
			 <!-- another tab... -->
			 
	
			 <!-- now, find the tab container, and the title pane, (which is the ID with a prefix of '_title'. Add the tab container to the tab pane at the top of it.. Note that the button is at the bottom of the TitlePane. -->
			 <script type="text/javascript">
			 <![CDATA[
						 function send(){

							 	var to = dijit.byId('toclient');
								window.console && console.log(to.value);
							 	var sub = dijit.byId('subject');
								window.console && console.log(sub.value);
							 	var msg = dijit.byId('msg');
								window.console && console.log(msg.value);
								$.getJSON("clients/sendmail?t="+to.value+"&s="+sub.value+"&m="+msg.value,
										function(data){
											window.console && console.log("the data: "+data);
											var tdata = JSON.stringify(data);
											window.console && console.log("tdata: "+tdata);
								});					 
							 
								dojo.forEach(
									dijit.byId('sendmail').getDescendants(), function(widget) {
									widget.attr('value', null);
									}
								);
						}
			          
				 dojo.addOnLoad(function(){
									
				 	var tabs = dijit.byId("myTabContainer");
				 	tabs.startup();
				 	tabs.resize();
					loadFirstTab();
					dojo.connect(dijit.byId("myTabContainer"), "selectChild", function(page){ 
						if(page.id=='groupsTab'){
							if(clients_already_loaded == 'false'){
								clients_already_loaded = 'true';
								loadClientGroup();
							}
						} 
					});
					dojo.parser.parse(); 
					disableClientForm();
					var showwidgets = ${allowaddclient};
					if(showwidgets){
						dijit.byId('addbutton').set("style", "display:inline"); 
						document.getElementById('upgraderequired').style.display = 'none';
					}else{
						dijit.byId('addbutton').set("style", "display:none"); 
						document.getElementById('upgraderequired').style.display = 'inline';
					}
					setInterval(function() {
						isAlive();
					}, 660000); //11 minutes				      
					init();
				 });
				function init() {
				      standby = new dojox.widget.Standby({target: "myTabContainer"});
				      document.body.appendChild(standby.domNode);
				}
				 
				 ]]>
			 </script>
	<script type="text/javascript">
	<![CDATA[
	    var clients_already_loaded = 'false';
		 function isAlive() {
				dojo.xhrPost(
						{
							url: "myschedule/isalive",
							content: {
							  },
							handleAs: "json",
							load: function(data) {
								window.console && console.log("SUCCESS FROM CHECKING alive");
								window.console && console.log("IS THERE AN APPOINTMENT CONFLICT? "+data);
								if(data == "true"){
									window.console && console.log("still alive");
								}
							},
							error: function(error) {
								window.console && console.log("NOT alive");
								window.location.reload();
							}
						}	            		
				
				);		
			 }			
	    
		function toTitleCase(str)
		{
			return str.replace(/\w\S*/g, function(txt){return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();});
		}	
		function clearDialog(){
			dijit.byId('firstname_dlg').set("value", ""); 
			dijit.byId('lastname_dlg').set("value", ""); 
			dijit.byId('dob_dlg').set("value", ""); 
			dijit.byId('address1_dlg').set("value", ""); 
			dijit.byId('address2_dlg').set("value", ""); 
			dijit.byId('city_dlg').set("value", ""); 
			dijit.byId('state_dlg').set("value", ""); 
			dijit.byId('zip_dlg').set("value", ""); 
			dijit.byId('homephone_dlg').set("value", ""); 
			dijit.byId('workphone_dlg').set("value", ""); 
			dijit.byId('cellphone_dlg').set("value", ""); 
			dijit.byId('email_dlg').set("value", ""); 
	
		}
		function clearClientForm(){
			dijit.byId('firstname').set("value", ""); 
			dijit.byId('lastname').set("value", ""); 
			dijit.byId('dob').set("value", ""); 
			dijit.byId('address1').set("value", ""); 
			dijit.byId('address2').set("value", ""); 
			dijit.byId('city').set("value", ""); 
			dijit.byId('state').set("value", ""); 
			dijit.byId('zip').set("value", ""); 
			dijit.byId('homephone').set("value", ""); 
			dijit.byId('workphone').set("value", ""); 
			dijit.byId('cellphone').set("value", ""); 
			dijit.byId('email').set("value", ""); 
			dijit.byId("selectedclientid").set("value", ""); 
			disableClientForm();
		}
		function disableClientForm(){
			dijit.byId('firstname').set("disabled", "disable"); 
			dijit.byId('lastname').set("disabled", "disable"); 
			dijit.byId('dob').set("disabled", "disable"); 
			dijit.byId('address1').set("disabled", "disable"); 
			dijit.byId('address2').set("disabled", "disable"); 
			dijit.byId('city').set("disabled", "disable"); 
			dijit.byId('state').set("disabled", "disable"); 
			dijit.byId('zip').set("disabled", "disable"); 
			dijit.byId('homephone').set("disabled", "disable"); 
			dijit.byId('workphone').set("disabled", "disable"); 
			dijit.byId('cellphone').set("disabled", "disable"); 
			dijit.byId('email').set("disabled", "disable"); 
			dijit.byId("selectedclientid").set("disabled", "disable");
			dijit.byId("Viewappointmenthistory").set("disabled", "disable");
			dijit.byId("saveclientbutton").set("disabled", "disable");
		}
		function enableClientForm(){
			dijit.byId('firstname').set("disabled", false); 
			dijit.byId('lastname').set("disabled", false); 
			dijit.byId('dob').set("disabled", false); 
			dijit.byId('address1').set("disabled", false); 
			dijit.byId('address2').set("disabled", false); 
			dijit.byId('city').set("disabled", false); 
			dijit.byId('state').set("disabled", false); 
			dijit.byId('zip').set("disabled", false); 
			dijit.byId('homephone').set("disabled", false); 
			dijit.byId('workphone').set("disabled", false); 
			dijit.byId('cellphone').set("disabled", false); 
			dijit.byId('email').set("disabled", false); 
			dijit.byId("selectedclientid").set("disabled", false);
			dijit.byId("Viewappointmenthistory").set("disabled", false);
			dijit.byId("saveclientbutton").set("disabled", false);
		}
		
		function TraxHistory(response){
			window.console && console.log("Entered TraxHistory");
			var isJSON;
			var data;
			try {
				window.console && console.log(response);
				data = JSON.parse(response);
				window.console && console.log(data);
				isJSON = true;
			}
			catch (e) {
				isJSON = false;
			}
	
			if (isJSON) {
				// data is already parsed, so just use it
				// handle response codes
				// do something with returned data
				
				if(data.constructor == Array){
					var cntr = 0;
					var myClients=new Array(); // regular array (add an optional integer
					for(var key in data) {
						clientdata = new Object();
						clientdata.id = data[key].id;
						try{
							window.console && console.log("appointment date: "+data[key].appointmentDate);
							var apptdate = new Date(data[key].appointmentDate);
							window.console && console.log("apptdate: "+apptdate.getUTCDate());
							var yearapptdate = apptdate.getUTCFullYear();
							var monthapptdate = apptdate.getUTCMonth()+1;
							var dayapptdate = apptdate.getUTCDate();
							if (monthapptdate<10)
							{
								monthapptdate = "0" + monthapptdate;
							}
							if (dayapptdate<10)
							{
									dayapptdate = "0" + dayapptdate;
							}
							var adate = yearapptdate + "-" + monthapptdate + "-" + dayapptdate;
							
							clientdata.appointmentDate = adate;
							window.console && console.log("adate: "+adate);
							window.console && console.log("clientdata.appointmentDate: "+clientdata.appointmentDate);
						}catch(err){
							window.console && console.log(err);
						}
						clientdata.status = data[key].status;
						clientdata.client_firstName = data[key].client.firstName;
						clientdata.client_lastName = data[key].client.lastName;
						clientdata.s_beginDateTime = data[key].s_beginDateTime;
						clientdata.s_endDateTime = data[key].s_endDateTime;
						clientdata.servicename1 = data[key].servicename1;
						clientdata.notes = unescape(data[key].notes);
						myClients[cntr]=clientdata;       						
						cntr = cntr + 1;
					}
					clientstore = new Object();
					clientstore.items = myClients;
					clientstore.identifier = 'id';
					clientstore.label = 'status';
					return clientstore;
					
				}else{
					window.console && console.log(data.id);
					window.console && console.log(data.value);
					clientdata = new Object();
					clientdata.id = data.id;
					clientdata.status = data.status;
					
					
					var myCars=new Array(); // regular array (add an optional integer
					myCars[0]=clientdata;       						
					
					clientstore = new Object();
					clientstore.items = myCars;
					clientstore.identifier = 'id';
					clientstore.label = 'status';
					return clientstore;
					
					
				}
			}
		 }    
		function saveAddDialog(){
			var firstname = dijit.byId('firstname_dlg').attr("value");
			firstname = toTitleCase(firstname);
			if(firstname == ''){
				alert('Fill in your first name');
				return;
			}
			var lastname = dijit.byId('lastname_dlg').attr("value");
			if(lastname == ''){
				alert('Fill in your first name');
				return;
			}
			var phonenumber = dijit.byId('home_phonenumber_dlg').attr("value");
			
			lastname = toTitleCase(lastname);
			var dob = "null";
			var address1 = "";
			var address2 = "";
			var city = "";
			var state = "";
			var zip = "";
			var homephone = "";
			var workphone = "";
			var cellphone = "";
			if(phonenumber != null){
				cellphone = phonenumber;
			}
			var email = "";
			try{standby.show();}catch(err){window.console && console.log(""+err.message);}
			dojo.xhrGet({
			  url: "clients/addclient?f="+firstname+"&l="+lastname+"&dob="+dob+"&a1="+address1+"&a2="+address2+"&c="+city+"&s="+state+"&z="+zip+"&wp="+workphone+"&hp="+homephone+"&cp="+cellphone+"&e="+email,
			  handleAs: "json",
			  timeout: 5000,
			  preventCache: true,
			  load: function(response, ioArgs) {
				// response is JSON result
				window.console && console.log(response);
				if(response == "SUCCESS"){
					loadFirstTab();
					dijit.byId('addbutton').set("style", "display:inline"); 
				}else if(response == "FAILURE"){
					var widg = document.getElementById('upgraderequired');
					widg.style.display = 'inline';
					dijit.byId('addbutton').set("style", "display:none"); 
				}else{
					alert("First name and last name already exists.");
				}
				clearDialog();
				standby.hide();
				return response;
			  },
			  error: function(response, ioArgs) {
				window.console && console.log("HTTP status code: " + ioArgs.xhr.status);
				window.location.reload();
				standby.hide();
				return response;
			  }
			});	 
		}
		function updateClient(){
			var acceptsnotifications = dijit.byId('acceptsnotifications').attr("value");
			if(acceptsnotifications=='on'){
				acceptsnotifications = true;
			}
			var acceptsreceipts = dijit.byId('acceptsreceipts').attr("value");
			if(acceptsreceipts == 'on'){
				acceptsreceipts = true;
			}
			var acceptsinitial = dijit.byId('acceptsinitial').attr("value");
			if(acceptsinitial == 'on'){
				acceptsinitial = true;
			}
			

			
			var acceptsnotificationssms = dijit.byId('acceptsnotificationssms').attr("value");
			if(acceptsnotificationssms=='on'){
				acceptsnotificationssms = true;
			}
			var acceptsreceiptssms = dijit.byId('acceptsreceiptssms').attr("value");
			if(acceptsreceiptssms == 'on'){
				acceptsreceiptssms = true;
			}
			var acceptsinitialsms = dijit.byId('acceptsinitialsms').attr("value");
			if(acceptsinitialsms == 'on'){
				acceptsinitialsms = true;
			}
			
			var firstname = dijit.byId('firstname').attr("value");
			var lastname = dijit.byId('lastname').attr("value");
			var dob = dijit.byId('dob').attr("value");
			try{
				dob = dojo.date.locale.format(dob, {datePattern: "yyyy-MM-dd", selector: "date"});
			}catch(err){
				window.console && console.log("Error trying to format dob: "+err);
			}
			var address1 = dijit.byId('address1').attr("value"); 
			var address2 = dijit.byId('address2').attr("value"); 
			var city = dijit.byId('city').attr("value"); 
			var state = dijit.byId('state').attr("value"); 
			var zip = dijit.byId('zip').attr("value"); 
			var homephone = dijit.byId('homephone').attr("value"); 
			var workphone = dijit.byId('workphone').attr("value"); 
			var cellphone = dijit.byId('cellphone').attr("value"); 
			var email = dijit.byId('email').attr("value");
			var clientid = dijit.byId("selectedclientid").attr("value");
			try{standby.show();}catch(err){window.console && console.log(""+err.message);}
			dojo.xhrGet({
			  url: "clients/updateclient?i="+clientid+"&f="+firstname+"&l="+lastname+"&dob="+dob+"&a1="+address1+"&a2="+address2+"&c="+city+"&s="+state+"&z="+zip+"&wp="+workphone+"&hp="+homephone+"&cp="+cellphone+"&e="+email+"&n="+acceptsnotifications+"&r="+acceptsreceipts+"&init="+acceptsinitial+"&ns="+acceptsnotificationssms+"&rs="+acceptsreceiptssms+"&inits="+acceptsinitialsms,
			  handleAs: "json",
			  timeout: 5000,
			  preventCache: true,
			  load: function(response, ioArgs) {
				// response is JSON result
				window.console && console.log(response);
				loadFirstTab();
				standby.hide();
				return response;
			  },
			  error: function(response, ioArgs) {
				window.console && console.log("HTTP status code: " + ioArgs.xhr.status);
				window.location.reload();
				standby.hide();
				return response;
			  }
			});	 
		}
		function showAllClient(){
			var clientgrid = dijit.byId("clientlist");
			clientgrid.filter({		                        
				lastName: "*"
	        });
		}
		function filterLastNameClient(){
			var clientgrid = dijit.byId("clientlist");
			var filterclientgrid = dijit.byId("filtergridtext").attr("value");;
			window.console && console.log("filterclientgrid: "+filterclientgrid);
			clientgrid.queryOptions = {ignoreCase: true};
			clientgrid.filter({		                        
				lastName: filterclientgrid+"*"
	        });
		}
		function filterFirstNameClient(){
			var clientgrid = dijit.byId("clientlist");
			var filterclientgrid = dijit.byId("filtergridfirsttext").attr("value");;
			window.console && console.log("filterclientgrid: "+filterclientgrid);
			clientgrid.queryOptions = {ignoreCase: true};
			clientgrid.filter({		                        
				firstName: filterclientgrid+"*"
	        });
		}
		function removeClient(){
			var clientid = dijit.byId("selectedclientid").attr("value");
			window.console && console.log("trying to remove client with id: "+clientid);
			try{standby.show();}catch(err){window.console && console.log(""+err.message);}
			var def = dojo.xhrGet({
				  url: "clients/deleteclient?id="+clientid,
				  handleAs: "json",
				  timeout: 5000,
				  preventCache: true,
				  load: function(response, ioArgs) {
					// response is JSON result
					if(response == 'FAILURE'){
						alert('Failure to remove. Client is associated with existing past present or future appointments. First delete all appointments then remove client.');					
					}else{
						clearClientForm();
						loadFirstTab();
					}
					return response;
				  },
				  error: function(response, ioArgs) {
					window.console && console.log("HTTP status code: " + ioArgs.xhr.status);
					window.location.reload();
					standby.hide();
					return response;
				  }
				});	 
				
				var nextdeferred = def.then(function(res){
									dojo.xhrGet({
										  url: "clients/allowadd",
										  handleAs: "json",
										  timeout: 5000,
										  preventCache: true,
										  load: function(response, ioArgs) {
											// response is JSON result
											window.console && console.log(response);
											if(response==true){
												dijit.byId('addbutton').set("style", "display:inline"); 
												document.getElementById('upgraderequired').style.display = 'none';
											}else{
												dijit.byId('addbutton').set("style", "display:none"); 
												document.getElementById('upgraderequired').style.display = 'inline';
											}
											standby.hide();
											return response;
										  },
										  error: function(response, ioArgs) {
											window.console && console.log("HTTP status code: " + ioArgs.xhr.status);
											window.location.reload();
											standby.hide();
											return response;
										  }
										});	 
						return res;
						
					},function(err){
						// This will be called when the deferred
						// is rejected
						standby.hide();
						window.console && console.log("ERROR " + err);
				}
				);
				
		}
		function dateFromUTC( dateAsString, ymdDelimiter )
		{
		  var pattern = new RegExp( "(\\d{4})" + ymdDelimiter + "(\\d{2})" + ymdDelimiter + "(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})" );
		  var parts = dateAsString.match( pattern );
	
		  return new Date( Date.UTC(
			  parseInt( parts[1] )
			, parseInt( parts[2], 10 ) - 1
			, parseInt( parts[3], 10 )
			, parseInt( parts[4], 10 )
			, parseInt( parts[5], 10 )
			, parseInt( parts[6], 10 )
			, 0
		  ));
		}	
		function TraxDetails(response){
			var isJSON;
			var data;
			try {
				window.console && console.log(response);
				data = JSON.parse(response);
				window.console && console.log(data);
				isJSON = true;
			}
			catch (e) {
				isJSON = false;
			}
	
			if (isJSON) {
				// data is already parsed, so just use it
				// handle response codes
				// do something with returned data
				
				if(data.constructor == Array){
					
					var cntr = 0;
					var myClients=new Array(); // regular array (add an optional integer
					dijit.byId('client_view').reset();
					for(var key in data) {
						clientdata = new Object();
						clientdata.id = data[key].id;
						window.console && console.log("client id: "+clientdata.id);
						clientdata.firstName = data[key].firstName;
						var fname = dijit.byId('firstname');
						fname.set("value", toTitleCase(clientdata.firstName));
						clientdata.lastName = data[key].lastName;
						var lname = dijit.byId('lastname');
						lname.set("value", toTitleCase(clientdata.lastName));
						window.console && console.log("dob value: "+data[key].birthDay);
						if(data[key].birthDay != null){
							var dob_dt = dateFromUTC(data[key].birthDay ,"-");
							dijit.byId('dob').set("value", dob_dt);
							window.console && console.log("the dob is: "+dob_dt);
						}else{
							
						}
						dijit.byId('acceptsnotifications').set("value", data[key].accepts_notifications_emails);
						dijit.byId('acceptsreceipts').set("value", data[key].accepts_receipts_emails);
						dijit.byId('acceptsinitial').set("value", data[key].accepts_inital_emails);

						dijit.byId('acceptsnotificationssms').set("value", data[key].accepts_notifications_sms);
						dijit.byId('acceptsreceiptssms').set("value", data[key].accepts_receipts_sms);
						dijit.byId('acceptsinitialsms').set("value", data[key].accepts_inital_sms);
						
						dijit.byId('address1').set("value", data[key].address1); 
						dijit.byId('address2').set("value", data[key].address2); 
						dijit.byId('city').set("value", data[key].citycode); 
						dijit.byId('state').set("value", data[key].statecode); 
						dijit.byId('zip').set("value", data[key].zipcode); 
						dijit.byId('homephone').set("value", data[key].home_phone); 
						dijit.byId('workphone').set("value", data[key].work_phone); 
						dijit.byId('cellphone').set("value", data[key].cell_phone); 
						dijit.byId('email').set("value", data[key].email); 
						dijit.byId("selectedclientid").set("value", clientdata.id);
						
					}
					clientstore = new Object();
					try{
						var newStore = new dojo.data.ItemFileReadStore({data: {  identifier: "",  items: []}});
						historygrid = dijit.byId("historygrid");
						historygrid.setStore(newStore);
						historygrid._refresh();
					}catch(err){}
					
					return clientstore;
					
				}
			}
		 }    	
		function TraxC(response){
			var isJSON;
			var data;
			try {
				window.console && console.log(response);
				data = JSON.parse(response);
				window.console && console.log(data);
				isJSON = true;
			}
			catch (e) {
				isJSON = false;
			}
	
			if (isJSON) {
				// data is already parsed, so just use it
				// handle response codes
				// do something with returned data
				
				if(data.constructor == Array){
					
					var cntr = 0;
					var myClients=new Array(); // regular array (add an optional integer
					for(var key in data) {
						clientdata = new Object();
						clientdata.id = data[key].id;
						clientdata.firstName = data[key].firstName;
						clientdata.lastName = data[key].lastName;
						
						myClients[cntr]=clientdata;       						
						cntr = cntr + 1;
					}
					clientstore = new Object();
					clientstore.items = myClients;
					clientstore.identifier = 'id';
					clientstore.label = 'group_name';
					return clientstore;
					
				}else{
					window.console && console.log(data.id);
					window.console && console.log(data.value);
					clientdata = new Object();
					clientdata.id = data.id;
					clientdata.firstName = data.firstName;
					clientdata.lastName = data.lastName;
					
					
					var myCars=new Array(); // regular array (add an optional integer
					myCars[0]=clientdata;       						
					
					clientstore = new Object();
					clientstore.items = myCars;
					clientstore.identifier = 'id';
					clientstore.label = 'description';
					return clientstore;
					
					
				}
			}
		 }    
		function Trax(response){
			var isJSON;
			var data;
			try {
				window.console && console.log(response);
				data = JSON.parse(response);
				window.console && console.log(data);
				isJSON = true;
			}
			catch (e) {
				isJSON = false;
			}
	
			if (isJSON) {
				// data is already parsed, so just use it
				// handle response codes
				// do something with returned data
				
				if(data.constructor == Array){
					
					var cntr = 0;
					var myClients=new Array(); // regular array (add an optional integer
					for(var key in data) {
						clientdata = new Object();
						clientdata.id = data[key].id;
						clientdata.group_name = data[key].group_name;
					
						myClients[cntr]=clientdata;       						
						cntr = cntr + 1;
					}
					clientstore = new Object();
					clientstore.items = myClients;
					clientstore.identifier = 'id';
					clientstore.label = 'group_name';
					return clientstore;
					
				}else{
					window.console && console.log(data.id);
					window.console && console.log(data.value);
					clientdata = new Object();
					clientdata.id = data.id;
					clientdata.description = data.group_name;
					
					
					var myCars=new Array(); // regular array (add an optional integer
					myCars[0]=clientdata;       						
					
					clientstore = new Object();
					clientstore.items = myCars;
					clientstore.identifier = 'id';
					clientstore.label = 'description';
					return clientstore;
					
					
				}
			}
		 }
		function setGroupDetails(response){
			var isJSON;
			var data;
			try {
				window.console && console.log(response);
				data = JSON.parse(response);
				window.console && console.log(data);
				isJSON = true;
			}
			catch (e) {
				isJSON = false;
			}
	
			if (isJSON) {
				// data is already parsed, so just use it
				// handle response codes
				// do something with returned data
				
				if(data.constructor == Array){
					
					var cntr = 0;
					var myClients=new Array(); // regular array (add an optional integer
					for(var key in data) {
						clientdata = new Object();
						clientdata.id = data[key].id;
						clientdata.createddate = data[key].createddate;
						clientdata.notes = data[key].group_notes;
						clientdata.group_name = data[key].group_name;
					
						myClients[cntr]=clientdata;       						
						cntr = cntr + 1;
					}
					return myClients;
					
				}else{
					window.console && console.log(data.id);
					window.console && console.log(data.value);
					clientdata = new Object();
					clientdata.id = data.id;
					clientdata.description = data.group_name;
					clientdata.id = data.id;
					clientdata.createddate = data.createddate;
					clientdata.notes = data.group_notes;
					clientdata.group_name = data.group_name;
					var myCars=new Array(); // regular array (add an optional integer
					myCars[0]=clientdata;       						
					return myCars;
				}
			}
		 }	
		 function addGroup(args){
			var name = dijit.byId("dialogname");
			var notes = dijit.byId("dialognotes");
			name = name.value;
			notes = notes.value;
			try{standby.show();}catch(err){window.console && console.log(""+err.message);}
			dojo.xhrGet({
			  url: "clients/addgrp?n="+name+"&nt="+notes,
			  handleAs: "json",
			  timeout: 5000,
			  preventCache: true,
			  load: function(response, ioArgs) {
				// response is JSON result
				window.console && console.log(response);
				loadClientGroup();
				standby.hide();
				return response;
			  },
	
			  error: function(response, ioArgs) {
				alert("HTTP status code: " + ioArgs.xhr.status);
				window.location.reload();
				standby.hide();
				return response;
			  }
			});	 
		 }
		 function loadClientsListDialog(groupid){
			 try{standby.show();}catch(err){window.console && console.log(""+err.message);}
			dojo.xhrGet({
				  url: "clients/fclist?cgid="+groupid.value,
				  handleAs: "json",
				  timeout: 5000,
				  preventCache: true,
				  load: function(response, ioArgs) {
					// response is JSON result
					window.console && console.log("the response: "+response);
					clients = new Object();
					clients.items = response;
					clients.identifier = 'id';
					clients.label = 'firstName';
					var pstore = new dojo.data.ItemFileWriteStore({
					  data: {items: response}
					 });
					
					window.console && console.log(response);
					/*set up layout*/
					var layout = [
						[
							{
								'name': 'Sel',
								'field': 'Sel',
								'width': '150px',
								editable: true,
								alwaysEditing: true,							
								'type': dojox.grid.cells.Bool,
								formatter: function(value) {
											window.console && console.log("the checkbox was clicked with value: "+value);
											return value;
										}							
							},
							{
								'name': 'id',
								'field': 'id',
								'width': '150px',
							},
							{
								'name': 'First Name',
								'field': 'firstName',
								'width': '200px'
							},
							{
								'name': 'Last Name',
								'field': 'lastName',
								'width': '200px'
							}
						]
					];
					var clientgrid;
					if (!dijit.byId("clientgrids")) {
						try{
							clientgrid = new dojox.grid.DataGrid({
								id: 'clientgrids',
								store: pstore,
								allowMultipleSelection: true,
								editable: true,
								structure: layout,
								autoWidth:true
							},
							document.createElement('div'));
							dojo.byId("clientGrid").appendChild(clientgrid.domNode);
							clientgrid.update();
							/*Call startup() to render the grid*/
							clientgrid.startup();
						}catch(e){
							var txt="There was an error on this page.\n\n";
							txt+="Error description: " + e.description + "\n\n";
							window.console && console.log("test");
						}
			
					}else{
						try{
							clientgrid = dijit.byId("clientgrids");
							clientgrid.store = pstore;
							clientgrid.structure = layout;
							clientgrid._refresh();
						}catch(e){
							var txt="There was an error on this page.\n\n";
							txt+="Error description: " + e.description + "\n\n";
							window.console && console.log(txt);
						}
					}		
				
	
					standby.hide();
					return response;
				  },
	
				  error: function(response, ioArgs) {
					window.console && console.log("HTTP status code: " + ioArgs.xhr.status);
					window.location.reload();
					standby.hide();
					return response;
				  }
				});				 
		 }
		 function loadclientlist(store){
				var layout = [
								[
									{
										'name': 'Sel',
										'field': 'Sel',
										'width': '150px',
										editable: true,
										alwaysEditing: true,							
										'type': dojox.grid.cells.Bool,
										formatter: function(value) {
													window.console && console.log("the checkbox was clicked with value: "+value);
													return value;
												}							
									},
									{
										'name': 'id',
										'field': 'id',
										'width': '0px'
									},
									{
										'name': 'First Name',
										'field': 'firstName',
										'width': '200px'
									},
									{
										'name': 'Last Name',
										'field': 'lastName',
										'width': '200px'
									}
								]
							];
			 
				/*create a new grid:*/
				if(!dijit.byId("clientgrid")){
					try{
						clientgrid = new dojox.grid.DataGrid({
							id: 'clientgrid',
							store: store,
							structure: layout,
							autoHeight:true,
							autoWidth:true
						},
						document.createElement('div'));
						/*append the new grid to the div*/
						dojo.byId("detailclientGrid").appendChild(clientgrid.domNode);
						clientgrid.layout.setColumnVisibility(1, false);							
						/*Call startup() to render the grid*/
						clientgrid.resize();
						clientgrid.update();
						clientgrid.startup();
					}catch(err){
						window.console && console.log(err);
					}
					
				}else{
					try{
						var clientgrid = dijit.byId("clientgrid");
						clientgrid.store = store;
						clientgrid.structure = layout;
						clientgrid.layout.setColumnVisibility(1, false);							
						clientgrid._refresh();
					}catch(err){
						window.console && console.log(err);
					}
					
				}
			 
		 }
		 function loadApptHistory(){
			 var clientid = dijit.byId("selectedclientid").attr("value");
			 	standby.hide();
				dojo.xhrGet({
					  url: "clients/appthistory?id="+clientid,
					  handleAs: "json",
					  timeout: 5000,
					  preventCache: true,
					  load: function(response, ioArgs) {
						// response is JSON result
						window.console && console.log("the response: "+JSON.stringify(response));
						var tdata = TraxHistory(JSON.stringify(response));
						var pstore = new dojo.data.ItemFileWriteStore({
									   'data':tdata
								  });
						
						window.console && console.log(tdata);
						/*set up layout*/
						var layout = [
							[
								{
									'name': 'id',
									'field': 'id',
									'width': '0px'
								},
								{
									'name': 'Status',
									'field': 'status',
									'width': '10%'
								},
								{
									'name': 'Date',
									'field': 'appointmentDate',
									'width': '15%'
								},
								{
									'name': 'Begin',
									'field': 's_beginDateTime',
									'width': '10%'
								},
								{
									'name': 'End',
									'field': 's_endDateTime',
									'width': '10%'
								},
								{
									'name': 'Service',
									'field': 'servicename1',
									'width': '15%'
								},
								{
									'name': 'notes',
									'field': 'notes',
									'width': '40%'
								}
						]];							
						if (!dijit.byId("historygrid")) {
							historygrid = new dojox.grid.EnhancedGrid({
												id: 'historygrid',
												store: pstore,
												editable: true,
												structure: layout
											},
												document.createElement('div')
											);
							dojo.byId("apptHistoryDiv").appendChild(historygrid.domNode);
							historygrid.update();
							/*Call startup() to render the grid*/
							historygrid.startup();
				
						}else{
							historygrid = dijit.byId("historygrid");
							historygrid.store = pstore;
							historygrid._refresh();
						}	
						standby.hide();
						return tdata;
					  },
	
					  error: function(response, ioArgs) {
						window.console && console.log("HTTP status code: " + ioArgs.xhr.status);
						window.location.reload();
						standby.hide();
						return response;
					  }
					});					 
		 }
		 function loadClientGroup(){
			try{standby.show();}catch(err){window.console && console.log(""+err.message);}
			dojo.xhrGet({
			  url: "clients/cg",
			  handleAs: "json",
			  timeout: 5000,
			  preventCache: true,
			  load: function(response, ioArgs) {
				// response is JSON result
				window.console && console.log("the response: "+response);
				var tdata = Trax(JSON.stringify(response));
				var pstore = new dojo.data.ItemFileWriteStore({
							   'data':tdata
						  });
				
				window.console && console.log(tdata);
				/*set up layout*/
				var layout = [
					[
				{
					'name': 'Name',
					'field': 'group_name',
					'width': '200px'
				},
				{
					'name': ' ',
					'field': 'id',
					'width': '150px',
					editable: true,
					type: dojox.grid.cells._Widget,
					widgetClass: dijit.form.Button,
					formatter: function(value) {
						var control = new dijit.form.Button({
							label: 'manage',
							onClick: function(){
								// first get details for the selected client group
								dojo.xhrGet({
								  url: "clients/cgrp?id="+value,
								  handleAs: "json",
								  timeout: 5000,
								  preventCache: true,
								  load: function(response, ioArgs) {
									// response is JSON result
									window.console && console.log(response);
									window.console && console.log(response[0].id);
									var namewidget = dijit.byId("name");
									var noteswidget = dijit.byId("notes");
									var createdwidget = dijit.byId("created");
									var idwidget = dijit.byId("groupdetailid");
									idwidget.setValue(response[0].id);
									window.console && console.log(response[0].group_name);
									namewidget.setValue(response[0].group_name);
									window.console && console.log(response[0].group_notes);
									noteswidget.setValue(response[0].group_notes);
									var dt = new Date(response[0].createddate);
									window.console && console.log(dt);
									createdwidget.setValue(dt);
									standby.hide();
									return response;
								  },
		
								  error: function(response, ioArgs) {
									window.console && console.log("HTTP status code: " + ioArgs.xhr.status);
									window.location.reload();
									standby.hide();
									return response;
								  }
								});	 
								loadGridClientList(value);
								
							}
						});			
						window.console && console.log(value);
						standby.hide();
						return control;	
						}		
				}
				]];							
				if (!dijit.byId("grid")) {
					grid = new dojox.grid.EnhancedGrid({
						id: 'grid',
						store: pstore,
						editable: true,
						structure: layout,
						autoWidth:true,
						selectionMode: "single",
						plugins:{
									indirectSelection: {
										name: "Selection",
										width: "70px",
										styles: "text-align: center;"
									}					
								}
						
					},
					document.createElement('div'));
					dojo.byId("gridDiv").appendChild(grid.domNode);
					grid.update();
					/*Call startup() to render the grid*/
					grid.startup();
		
				}else{
					grid = dijit.byId("grid");
					grid.store = pstore;
					grid._refresh();
				}		
			
	
				standby.hide();
				return tdata;
			  },
	
			  error: function(response, ioArgs) {
				window.console && console.log("HTTP status code: " + ioArgs.xhr.status);
				window.location.reload();
				standby.hide();
				return response;
			  }
			});			 
		 }
		 // begin: load first tab 
		 function loadFirstTab(){
			var clientlist;
			try{standby.show();}catch(err){window.console && console.log(""+err.message);}
			dojo.xhrGet({
			  url: "clients/list",
			  handleAs: "json",
			  timeout: 5000,
			  preventCache: true,
			  load: function(response, ioArgs) {
				// response is JSON result
				window.console && console.log("the response: "+response);
				var tdata = TraxC(JSON.stringify(response));
				var pstore = new dojo.data.ItemFileWriteStore({
							   'data':tdata
						  });
				
				window.console && console.log(tdata);
				/*set up layout*/
				var layout = [
					[
						{
							'name': 'id',
							'field': 'id',
							'width': '0px'
						},
						{
							'name': 'First Name',
							'field': 'firstName',
							'width': '200px'
						},
						{
							'name': 'Last Name ',
							'field': 'lastName',
							'width': '150px'
						}
				]];							
				if (!dijit.byId("clientlist")) {
					clientlist = new dojox.grid.EnhancedGrid({
						id: 'clientlist',
						store: pstore,
						editable: false,
						structure: layout,
						clientSort:"true",
						autoWidth: "true",
						autoHeight: "true",
						selectionMode: "single",
						autoWidth:true,
						plugins:{
									indirectSelection: {
										name: "Selection",
										width: "70px",
										styles: "text-align: center;"
									}					
								}
					},
					document.createElement('div'));
					dojo.byId("firstTabClientListDiv").appendChild(clientlist.domNode);
					clientlist.update();
					/*Call startup() to render the grid*/
					clientlist.layout.setColumnVisibility(1, false);							
					clientlist.startup();
		
				}else{
					clientlist = dijit.byId("clientlist");
					clientlist.store = pstore;
					clientlist.layout.setColumnVisibility(1, false);							
					clientlist._refresh();
				}		
				dijit.byId("clientlist").setSortIndex(2, true);
				dijit.byId("clientlist").sort();
				dojo.connect(clientlist, "onRowClick", function(e){
	                    window.console && console.log("onRowClickConnect "+e.rowIndex);
						var item = clientlist.getItem(e.rowIndex); //The 3rd row 
						if(item){ //in case the row is not loaded 
							var clientid = clientlist.getCell(1).get(e.rowIndex, item);
							window.console && console.log("the customer id: "+clientid);
							dojo.xhrGet({
							  url: "clients/viewclient?id="+clientid,
							  handleAs: "json",
							  timeout: 5000,
							  preventCache: true,
							  load: function(response, ioArgs) {
								enableClientForm();
								var data = TraxDetails(JSON.stringify(response))
								return response;
							  },
	
							  error: function(response, ioArgs) {
								window.console && console.log("HTTP status code: " + ioArgs.xhr.status);
								window.location.reload();
								return response;
							  }
							});	 							
						}						
	                }
				);
				standby.hide();
				return tdata;
			  },
	
			  error: function(response, ioArgs) {
				window.console && console.log("HTTP status code: " + ioArgs.xhr.status);
				window.location.reload();
				standby.hide();
				return response;
			  }
			});			 
		 }	 
		 // end: load first tab
		 function loadGridClientList(value){
			// get the client list for the selected client group
			try{standby.show();}catch(err){window.console && console.log(""+err.message);}
			dojo.xhrGet({
			  url: "clients/clist?id="+value,
			  handleAs: "json",
			  timeout: 5000,
			  preventCache: true,
			  load: function(response, ioArgs) {
				// response is JSON result
				window.console && console.log("response from trying to get the client list: "+response);
				var nuclientswidget = dijit.byId("numclients");
				if(response == ""){
					nuclientswidget.setValue("0");
				}else{
					nuclientswidget.setValue(response.length);
					clients = new Object();
					clients.items = response;
					clients.identifier = 'id';
					clients.label = 'name';
					var pstore = new dojo.data.ItemFileWriteStore({
					  data: {items: response}
					 });
					loadclientlist(pstore);
				}
				standby.hide();
				return response;
			  },
	
			  error: function(response, ioArgs) {
				window.console && console.log("HTTP status code: " + ioArgs.xhr.status);
				window.location.reload();
				standby.hide();
				return response;
			  }
			});	 	 
		 }
		 function removeGroup(){
			/* Get all selected items from the Grid: */
			var grid = grid = dijit.byId("grid");
			var items = grid.selection.getSelected();
			if (items.length) {
				var store = grid.store;
				/* Iterate through the list of selected items.
				  The current item is available in the variable
				  "selectedItem" within the following function: */
				dojo.forEach(items, function(selectedItem) {
					if (selectedItem !== null) {
						/* Delete the item from the data store: */
						store.deleteItem(selectedItem);
						window.console && console.log("selected item is: "+selectedItem.id);
						deleteStoreItem(selectedItem.id);
						loadClientGroup();
					}
					/* end if */
				});
				/* end forEach */
			}
			/* end if */
		 }
		 function deleteStoreItem(id){
			 try{standby.show();}catch(err){window.console && console.log(""+err.message);}
			dojo.xhrGet({
			  url: "clients/delgrp?id="+id,
			  handleAs: "json",
			  timeout: 5000,
			  preventCache: true,
			  load: function(response, ioArgs) {
				// response is JSON result
				window.console && console.log(response);
				standby.hide();
				return response;
			  },
	
			  error: function(response, ioArgs) {
				window.console && console.log("HTTP status code: " + ioArgs.xhr.status);
				window.location.reload();
				standby.hide();
				return response;
			  }
			});	 
		 }
		 function saveClients(){
			var grid = dijit.byId("clientgrids");
			var cnt = grid.rowCount;
			window.console && console.log("row count" +cnt);
			var gid = dijit.byId("groupdetailid");
			for (var i=0;i<cnt;i++)
			{
				var item = grid.getItem(i);
				
				window.console && console.log("groupid: "+gid.value);
				var selected = false;
				if(item){ //in case the row is not loaded 
					selected = grid.getCell(0).get(i, item);
					window.console && console.log("selected: "+grid.getCell(0).get(i, item)); //The 1st column, the i+1 row 
				}			
				if(selected == true){
					var cid = item.id;
					try{standby.show();}catch(err){window.console && console.log(""+err.message);}
					dojo.xhrGet({
						  url: "clients/addc?cid="+cid+"&gid="+gid.value,
						  handleAs: "json",
						  timeout: 5000,
						  preventCache: true,
						  load: function(response, ioArgs) {
							// response is JSON result
							window.console && console.log(response);
							loadGridClientList(gid.value);
							standby.hide();
							return response;
						  },
	
						  error: function(response, ioArgs) {
							window.console && console.log("HTTP status code: " + ioArgs.xhr.status);
							loadGridClientList(gid.value);
							window.location.reload();
							standby.hide();
							return response;
						  }
						});	 
				}
			}	
			
		 }
		 function removeClients(){
				var grid = dijit.byId("clientgrid");
				var cnt = grid.rowCount;
				window.console && console.log("row count" +cnt);
				var gid = dijit.byId("groupdetailid");
				window.console && console.log("groupid: "+gid.value);
				for (var i=0;i<cnt;i++)
				{
					var item = grid.getItem(i);
					var selected = false;
					if(item){ //in case the row is not loaded 
						selected = grid.getCell(0).get(i, item);
						window.console && console.log("selected: "+grid.getCell(0).get(i, item)); //The 1st column, the i+1 row 
					}			
					if(selected == true){
						var cid = item.id;
						try{standby.show();}catch(err){window.console && console.log(""+err.message);}
						dojo.xhrGet({
							  url: "clients/removec?cid="+cid+"&gid="+gid.value,
							  handleAs: "json",
							  timeout: 5000,
							  preventCache: true,
							  load: function(response, ioArgs) {
								// response is JSON result
								clearClientForm();
								window.console && console.log(response);
								loadGridClientList(gid.value);
								standby.hide();
								return response;
							  },
	
							  error: function(response, ioArgs) {
								window.console && console.log("HTTP status code: " + ioArgs.xhr.status);
								loadGridClientList(gid.value);
								window.location.reload();
								standby.hide();
								return response;
							  }
							});	 
					}
				}	
				
			 }
		 ]]>
	</script>			 		 
		 </div>
		 <script>
		 Spring.addDecoration(new Spring.ElementDecoration(
				 {elementId : 'myTabContainer',
				 widgetType : 'dijit.layout.TabContainer'}
				 ));
		 
		 </script>
		 
		</div>
	</div>	
</div>
