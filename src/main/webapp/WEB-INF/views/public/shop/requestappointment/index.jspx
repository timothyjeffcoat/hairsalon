<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<div xmlns:fmt="http://java.sun.com/jsp/jstl/fmt" xmlns:c="http://java.sun.com/jsp/jstl/core" xmlns:field="urn:jsptagdir:/WEB-INF/tags/form/fields" xmlns:form="http://www.springframework.org/tags/form" xmlns:spring="http://www.springframework.org/tags" xmlns:util="urn:jsptagdir:/WEB-INF/tags/util" xmlns:jsp="http://java.sun.com/JSP/Page" version="2.0" xmlns:formd="http://www.springframework.org/tags/form">
  <jsp:directive.page contentType="text/html;charset=UTF-8"/>
  <jsp:output omit-xml-declaration="yes"/>
  <spring:message code="label_publicshoprequestappointment_index" htmlEscape="false" var="title"/>
<script type="text/javascript">
	dojo.require("dojo.request.xhr");
	dojo.require("dojo.json");

	dojo.require("dojo.parser");
	dojo.require("dojo.string");
	dojo.require("dojo.html");

	dojo.require("dojo.data.ItemFileReadStore");
	dojo.require("dojo.data.ItemFileWriteStore");
	dojo.require("dojox.grid.DataGrid");
	dojo.require("dojox.grid.EnhancedGrid");
	dojo.require("dijit.form.Form");
	dojo.require("dijit.form.Button");
	dojo.require("dijit.form.FilteringSelect");
	dojo.require("dijit.form.ValidationTextBox");
	dojo.require("dijit.form.TextBox");
	dojo.require("dijit.form.DateTextBox");
	dojo.require("dijit.form.CheckBox");
	dojo.require("dijit.form.SimpleTextarea");

	dojo.require("dijit.layout.ContentPane");
	dojo.require("dijit.layout.TabContainer");

	dojo.require("dojox.rpc.Client");
	dojo.require("dojox.grid.enhanced.plugins.IndirectSelection");
	
	dojo.require("dojox/widget/Standby");
	</script>  
  <util:panel id="title" title="Request an appointment">
    <spring:message code="application_name" htmlEscape="false" var="app_name"/>
    <h3>
      
    </h3>
	<div dojoType="dijit.form.Form" id="apptform" title="Request Appointment" >
		<input id="hSelectDate" name="hSelectDate" type="hidden" />
		<label for="_selectdate_id">Select Date:</label>
		<input id="c_selectdate" name="c_selectdate" value="${selectdate}" />
			<script type="text/javascript">
				function zeroFill(number, width) {
					width -= number.toString().length;
					if (width > 0) {
						return new Array(width + (/\./.test(number) ? 2 : 1))
								.join('0')
								+ number;
					}
					return number;
				}
				Spring.addDecoration(new Spring.ElementDecoration(
								{
									elementId : "c_selectdate",
									widgetType : "dijit.Calendar",
									widgetAttrs : {
										value : new Date(),
										required : true,
										onValueSelected : function(newValue) {
											var animArgs = {
												node : "createTab",
												duration : 350, // ms to run animation  
												delay : 5
											// ms to stall before playing  
											};
											if (typeof standby != 'undefined') {
												standby.show();
											}
											try {
												console.log("before entering displayEditTodaysAgenda newValue " + newValue);
												
											} catch (err) {
												standby.hide();
											}
										}
									}
								}));
				Spring.addDecoration(new Spring.AjaxEventDecoration({
					elementId : "c_selectdate",
					formId : "dateForm",
					event : "onchange",
					params : {
						_eventId : "updateEntries"
					}
				}));
			</script>		
			<br/>
		<label for="_apptservice_id">Services</label>
		<p/>
		<form:select dojoType="dijit.form.FilteringSelect" path="services" id="sid" items="${services}" />
		<p/>
		<label for="_selecttime_id">Select begin time:</label>
		<select dojoType="dijit.form.FilteringSelect" id="desiredhour" name="desiredhour" style="width: 60px;" autocomplete="true">
				<option value="1">1</option>
				<option value="2">2</option>
				<option value="3">3</option>
				<option value="4">4</option>
				<option value="5">5</option>
				<option value="6">6</option>
				<option value="7">7</option>
				<option value="8">8</option>
				<option value="9">9</option>
				<option value="10">10</option>
				<option value="11">11</option>
				<option value="12">12</option>
		</select> <select dojoType="dijit.form.FilteringSelect" name="desiredminute" id="desiredminute" style="width: 60px;" autocomplete="true">
				<option value="00">00</option>
				<option value="15">15</option>
				<option value="30">30</option>
				<option value="45">45</option>
		</select> <select dojoType="dijit.form.FilteringSelect" id="desiredampm" name="desiredampm" style="width: 60px;" autocomplete="true">
				<option value="am">am</option>
				<option value="pm">pm</option>
		</select>
		<br/>
		<br/>
		<button data-dojo-type="dijit.form.Button"
			data-dojo-props="label:'Request Appointment',onClick:function(){requestAppointment(arguments[0]);}">
		</button>

		</div>    
  </util:panel>
  <script type="text/javascript">
  	dojo.addOnLoad(function(){
  		dojo.parser.parse();
  	});
	function requestAppointment(dialogFields){
		console.log("REQUESTING APPOINTMENT FROM FORM");
		standby = new dojox.widget.Standby({
		  target: "apptform"
		});
		document.body.appendChild(standby.domNode);
		
		var rawdate = dijit.byId("c_selectdate").attr("value")
		console.log("c_selectdate: "+rawdate);
		var postdate = dojo.date.locale.format(rawdate, {datePattern: "yyyy-MM-dd", selector: "date"})
		console.log("postdate: "+postdate);
		
		var rawcid = "928";
		console.log("fapptclient: "+rawcid);
		
		var rawnotes = "";
		console.log("notes: "+rawnotes);
		
		var rawsvcid = dijit.byId("sid").attr("value");
		console.log("services: "+rawsvcid);
		
		var rawhour = dijit.byId("desiredhour").attr("value");
		console.log("hour: "+ rawhour);
		
		var rawminute = dijit.byId("desiredminute").attr("value");
		console.log("minute: "+rawminute);
		
		var rawampm = dijit.byId("desiredampm").attr("value");
		console.log("ampm: "+rawampm);
		
		var rawehour = "1";
		console.log("ehour: "+ rawehour);
		
		var raweminute = "1";
		console.log("eminute: "+raweminute);
		
		var raweampm = "am";
		console.log("eampm: "+raweampm);
		
		var deferred2 = dojo.xhrPost(
				{
					url: "requestappointment/checkdatetime",
					content: {
						hSelectDate: postdate,
						hour: rawhour,
						minute: rawminute,
						ampm: rawampm,
						ehour: rawehour,
						eminute: raweminute,
						eampm: raweampm,
						sid: rawsvcid
					  },
					handleAs: "json",
					load: function(data) {
						console.log("SUCCESS FROM CHECKING APPOINTMENT");
						console.log("IS THERE AN APPOINTMENT CONFLICT? "+data);
						standby.hide();
						if(data == "true"){
							console.log("THERE IS AN APPOINTMENT CONFLICT. DO YOU WISH TO BOOK APPOINTMENT ANYWAYS?");
						}
					},
					error: function(error) {
						console.log("ERROR FROM CHECKING APPOINTMENT");
						console.log(error);
						standby.hide();
					}
				}	            		
		
		);		
		var nextdeferred = deferred2.then(function(res){
				var scheduleanyways = "true";
				var deferredyn = new dojo.Deferred();
				if(res == "true"){
					alert("Requested appointment time is not available. Please try another time.");
					return "false";
				}else{
					res = "true";
				}
				return res;
				
			},function(err){
				// This will be called when the deferred
				// is rejected
				console.log("ERROR " + err);
		}
		);
		nextdeferred.then(function(res){
			if(res == "true"){
				scheduleanyways(postdate,rawcid,rawsvcid,rawhour,rawminute,rawampm,rawnotes,rawehour,raweminute,raweampm);
			}else{
				console.log("no scheduling");
			}
		},function(err){
			// This will be called when the deferred
			// is rejected
			console.log("ERROR " + err);
		}
		);
		
		// clear inputs from form
		
		// display todays agenda
		
	}  	
	function scheduleanyways(postdate,rawcid,rawsvcid,rawhour,rawminute,rawampm,rawnotes,rawehour,raweminute,raweampm){
		standby.show();
		//Call the asynchronous xhrPost
		var deferred = dojo.xhrPost(
				{
					url: "requestappointment/createappt",
					content: {
						hSelectDate: postdate,
						clientid: rawcid,
						svcid: rawsvcid,
						hour: rawhour,
						minute: rawminute,
						ampm: rawampm,
						notes: rawnotes,
						ehour: rawehour,
						eminute: raweminute,
						eampm: raweampm
					  },
					handleAs: "text",
					load: function(data) {
						console.log("SUCCESS FROM CREATE APPOINTMENT");
						alert('Your appointment request has been submitted.');
						console.log(data);
						try{
							dijit.byId("desiredhour").set("value","1");
						}catch(err){
							console.log("could not reset inputs: "+err);
						}
						try{
							dijit.byId("desiredminute").set("value","00");
						}catch(err){
							console.log("could not reset inputs: "+err);
						}
						try{
							dijit.byId("desiredampm").set("value","am");
						}catch(err){
							console.log("could not reset inputs: "+err);
						}
						try{
							console.log("postdate "+postdate);
							
						}catch(err){
							console.log("save form appointment could not display todays agenda error message :\n "+err);
							standby.hide();
						}
						
						standby.hide();
					},
					error: function(error) {
						console.log("ERROR FROM CREATE APPOINTMENT");
						console.log(error);
					}
				}	            		
		
		);			
	}	
  </script>
</div>
