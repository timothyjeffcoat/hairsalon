<div xmlns:fn="http://java.sun.com/jsp/jstl/functions" xmlns:fmt="http://java.sun.com/jsp/jstl/fmt" xmlns:c="http://java.sun.com/jsp/jstl/core" xmlns:field="urn:jsptagdir:/WEB-INF/tags/form/fields" xmlns:form="urn:jsptagdir:/WEB-INF/tags/form" xmlns:spring="http://www.springframework.org/tags" xmlns:util="urn:jsptagdir:/WEB-INF/tags/util" xmlns:jsp="http://java.sun.com/JSP/Page" version="2.0" xmlns:formd="http://www.springframework.org/tags/form">	
	<div id="wrapper" style="padding-top:40px;">
		<div id="page-wrapper">

	<c:choose>
		<c:when test="${not empty shopname}">
			<spring:url value="/public/shop/${shopurl}" var="home" />
		</c:when>
		<c:otherwise>
			<spring:url value="/" var="home" />
		</c:otherwise>
	</c:choose>

	<ol class="breadcrumb">
		<li><a href="${home}"><i class="icon-dashboard"></i>Home</a></li>
		<li ><i class="icon-file-alt"></i>Schedule</li>
	</ol>

<util:jquery-scripts />

	
	<script type="text/javascript">
	dojo.require("dojo.request.xhr");
	dojo.require("dojo.json");

	dojo.require("dojo.parser");
	dojo.require("dojo.string");
	dojo.require("dojo.html");

	dojo.require("dojo.data.ItemFileReadStore");
	dojo.require("dojo.data.ItemFileWriteStore");
	dojo.require("dojox.grid.DataGrid");
	dojo.require("dojox.grid.EnhancedGrid");
	dojo.require("dijit.form.Form");
	dojo.require("dijit.form.Button");
	dojo.require("dijit.form.FilteringSelect");
	dojo.require("dijit.form.ValidationTextBox");
	dojo.require("dijit.form.TextBox");
	dojo.require("dijit.form.DateTextBox");
	dojo.require("dijit.form.CheckBox");
	dojo.require("dijit.form.SimpleTextarea");

	dojo.require("dijit.layout.ContentPane");
	dojo.require("dijit.layout.TabContainer");

	dojo.require("dojox.rpc.Client");
	dojo.require("dojox.grid.enhanced.plugins.IndirectSelection");
	
	dojo.require("dojox/widget/Standby");

	var editservicecounter = 0;
	var jCalTargetValue = "";
	var currentselecteddate = "";
	var global_selected_staff = "";
	function appointmentobject(staffid,appointmentstatus,appointmentid,appointmentdate,serviceid,servicename,price,clientid,firstname,lastname,notes,fnctbeginhr,fnctbeginmin,fnctbeginampm,fnctendhr,fnctendmin,fnctendampm,service1type,recur_parent,request_indicator)
	 {
		this.staffid = staffid;
		this.appointmentstatus= appointmentstatus;
		this.appointmentdate = appointmentdate;
		this.appointmentid = appointmentid;
		this.serviceid = serviceid;
		this.servicename = servicename;
		this.service1type = service1type;
		this.price = price;
		this.clientid = clientid;
		this.firstname=firstname;
		this.lastname=lastname;
		this.notes = notes;
		this.beginhr = fnctbeginhr;
		this.beginmin = fnctbeginmin;
		this.beginampm = fnctbeginampm;
		this.endhr = fnctendhr;
		this.endmin = fnctendmin;
		this.endampm = fnctendampm;
		this.recur_parent = recur_parent;
		this.request_indicator = request_indicator;
	 }	
	function clientobject(clientid,fullname){
		this.clientid = clientid;
		this.fullname = fullname;
	}
	function serviceobject(serviceid,description,amountoftime){
		this.serviceid = serviceid;
		this.description = description;
		this.amountoftime = amountoftime;
	}
	function categoryserviceobject(categoryid,serviceid,description,amountoftime){
		this.categoryid = categoryid;
		this.serviceid = serviceid;
		this.description = description;
		this.amountoftime = amountoftime;
	}
	function servicepriceobject(serviceid,cost){
		this.serviceid = serviceid;
		this.cost = cost;
	}
	function customservicepriceobject(appointmentid, serviceid,cost){
		this.appointmentid = appointmentid;
		this.serviceid = serviceid;
		this.cost = cost;
	}
	
	var appointmentsArray = [];
	var clientsArray = [];
	var servicesArray = [];
	var categoryservicesArray = [];
	var servicespricesArray = [];
	var customServicesPricesArray = [];
	
	<c:forEach var="client" items="${clients}">
		var placeholder = "${client}";
		if(placeholder != "="){
			var clientcoln = placeholder.indexOf('=');
			var clientid = placeholder.substring(0,clientcoln);
			var clientname = placeholder.substring(clientcoln+1,placeholder.length);
			var newclient = new clientobject(clientid,clientname);
			clientsArray.push(newclient);
		}
	</c:forEach>
	
	<c:forEach var="serviceprice" items="${servicesprices}">
		var placeholder = "${serviceprice}";
		if(placeholder != "="){
			var servicecoln = placeholder.indexOf('=');
			var serviceid = placeholder.substring(0,servicecoln);
			var serviceprice = placeholder.substring(servicecoln+1,placeholder.length);
			var serviceprice = new servicepriceobject(serviceid,serviceprice);
			servicespricesArray.push(serviceprice);
		}
	</c:forEach>
	
	<c:forEach var="service" items="${services}">
		var placeholder = "${service}";
		if(placeholder != "="){
			var servicecoln = placeholder.indexOf('=');
			var serviceid = placeholder.substring(0,servicecoln);
			var servicedescription = placeholder.substring(servicecoln+1,placeholder.length);
			var servicecoln2 = servicedescription.indexOf('(');
			var servicecoln3 = servicedescription.indexOf(')');
			var servicetime = servicedescription.substring(servicecoln2+1,servicecoln3);
			servicedescription = servicedescription.substring(0,servicecoln2);
			var service = new serviceobject(serviceid,servicedescription,servicetime);
			servicesArray.push(service);
		}
	</c:forEach>
	<c:forEach var="catservice" items="${categoryservices}">
		var serviceid = "${catservice.svcid}";
		var servicedescription = "${catservice.servicedescription}";
		var servicetime = "${catservice.svcamounttime}";
		var catid = "${catservice.catid}";
		
		var service = new categoryserviceobject(catid, serviceid,servicedescription,servicetime);
		categoryservicesArray.push(service);
	</c:forEach>

	<c:forEach var="appointment" items="${todaysagenda}">
		<fmt:formatDate var="formattedappt" value='${appointment.appointmentDate}' pattern="yyyy-MM-dd"/>
		<fmt:formatNumber var="formattedServiceCost" value='${appointment.service1cost}' currencySymbol='$' type='currency'/>
		var sbeginetimex = "${appointment.s_beginDateTime}";
		var coln = sbeginetimex.indexOf(':');
		var uniquebeginhour = sbeginetimex.substring(0,coln);
		
		var uniquebeginmin = sbeginetimex.substring(coln+1,coln+3);
		if(uniquebeginmin == 0){
			uniquebeginmin = '00';
		}
		
		var ap = sbeginetimex.substring(sbeginetimex.length,sbeginetimex.length-2);
		var uniquebeginampm = "";
		uniquebeginampm = ap.toLowerCase();

		// end time
		var sendetimex = "${appointment.s_endDateTime}";
		var endcoln = sendetimex.indexOf(':');
		var uniqueendhour = sendetimex.substring(0,endcoln);
		
		var uniqueendmin = sendetimex.substring(endcoln+1,endcoln+3);
		if(uniqueendmin == 0){
			uniqueendmin = '00';
		}
		
		var uniqueendap = sendetimex.substring(sendetimex.length,sendetimex.length-2);
		var uniqueendampm = "";
		uniqueendampm = uniqueendap.toLowerCase();
		var getappt = new appointmentobject("${appointment.staff.id}","${appointment.status}","${appointment.id}","${formattedappt}","${appointment.service1id}","${appointment.servicename1}","${appointment.service1cost}","${appointment.client.id}","${appointment.client.firstName}","${appointment.client.lastName}","${appointment.notes}",uniquebeginhour,uniquebeginmin,uniquebeginampm,uniqueendhour,uniqueendmin,uniqueendampm,"${appointment.recur_parent}","${appointment.requested_image_path}");
		appointmentsArray.push(getappt);	

	</c:forEach>
	
	function toTitleCase(str)
	{
		return str.replace(/\w\S*/g, function(txt){return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();});
	}	
	var StillNeedsValidating = true;
	var svcstandbydlg;
	var standby;
	var av1standby;
	var standbydlg;
	var week_already_loaded = 'false';
	var month_already_loaded = 'false';
	var usethisstore;
	var svcid = "";
	var svcname = "";
	var inputEvents = [];  //Global var

	function loadCreate(){
		var createwdgt = dijit.byId("createTab");
		if(createwdgt.get("display") == "none"){
			createwdgt.set("display","show");
		} else{
			createwdgt.set("display","block");
		}
		var rawdate = dijit.byId("c_editselectdate").attr("value");
		var postdate = dojo.date.locale.format(rawdate, {datePattern: "yyyy-MM-dd", selector: "date"})
		displayEditTodaysAgenda(postdate);
	}	
	
	function loadMonth(){
		var date = new Date();
		var d = date.getDate();
		var m = date.getMonth();
		var y = date.getFullYear();
		var exists = false;
		try{
			if ( $('#monthcalendar').children().length > 0 ){
				exists = true;
				$('#monthcalendar').fullCalendar('refetchEvents');
				$('#monthcalendar').fullCalendar( 'rerenderEvents' )
			}
		}catch(e){
			window.console &amp;&amp; console.log(e);
		}
		if(exists == false) {

			$('#monthcalendar').fullCalendar({
				defaultView: 'month',
				editable: true,
				events: function(start, end, callback) {
						start = $.fullCalendar.formatDate( start, "yyyy-MM-dd" );
						end = $.fullCalendar.formatDate( end, "yyyy-MM-dd" );
						standby.show();
						$.ajaxSetup({ cache: false });
						$.getJSON("myschedule/calendar?date="+start+"&amp;enddate="+end,
								function(data){
									
									//window.console &amp;&amp; console.log("the data: "+data);
									var events =  [];
									var tdata = JSON.stringify(data);
									var parsedobjectdata;
									var isJSON;
									try {
										//window.console &amp;&amp; console.log(tdata);
										parsedobjectdata = JSON.parse(tdata);
										//window.console &amp;&amp; console.log(parsedobjectdata);
										isJSON = true;
									}
									catch (e) {
										isJSON = false;
									}
									
									//window.console &amp;&amp; console.log(parsedobjectdata);
									if(parsedobjectdata.constructor == Array){
										var eventcolorbackground = 'yellow';
										var cntr = 0;
										for(var key in parsedobjectdata) {
											if(global_selected_staff != ''){
												if(parsedobjectdata[key].staff.id != global_selected_staff){
													continue;
												}
											}
											if(parsedobjectdata[key].status == 'CANCELED'){
												continue;
											}
											if(parsedobjectdata[key].status == 'DELETED'){
												continue;
											}
											if(parsedobjectdata[key].status == 'ACTIVE'){
												eventcolorbackground = 'active';
											}
											if(parsedobjectdata[key].status == 'NO_SHOW'){
												eventcolorbackground = 'no_show';
											}
											if(parsedobjectdata[key].status == 'CHECKED_OUT'){
												eventcolorbackground = 'checked_out';
											}
											
											var month = parsedobjectdata[key].month_ApptDate;
											var day = parsedobjectdata[key].day_ApptDate;
											var year = parsedobjectdata[key].year_ApptDate;
											var bhour = data[key].fc_beginHour;
											var bminute = data[key].fc_beginMinute;
											var ehour = data[key].fc_endHour;
											var eminute = data[key].fc_endMinute;
											
											var apptdate = new Date(year,month-1,day,bhour,bminute);
											var enddate = new Date(year,month-1,day,ehour,eminute);

											var titledesc = "";
											if(parsedobjectdata[key].client != null){
												titledesc = parsedobjectdata[key].client.firstName + " " + parsedobjectdata[key].client.lastName + " ";
												titledesc = titledesc + parsedobjectdata[key].servicename1 + " " + parsedobjectdata[key].service1cost;
											}else{
												titledesc = " TIME BLOCK "+ parsedobjectdata[key].personallabel;
												eventcolorbackground = "timeblock";
											}
											
											//window.console &amp;&amp; console.log(apptdate);
											events.push({
												title: titledesc,
												start: apptdate,
												end: enddate,
												className: eventcolorbackground,
												allDay: false
											});
										}
										
										callback(events);
										
									}						
									//window.console &amp;&amp; console.log("after jsonify "+tdata);
							standby.hide();		
						});					
						// when data is ready use callback(events);
						
				},
				dayRender: function( date, cell) {

					cell.addTouch();

					},
				 eventClick: function(calEvent, jsEvent, view) {
						if (event.url) {
							//window.open(event.url);
							alert('event click');
							return false;
						}
					}

			});			
}
	}
	function loadWeek(){
		var date = new Date();
		var d = date.getDate();
		var m = date.getMonth();
		var y = date.getFullYear();
		var variablemintime = 0;
		var variablemaxtime = 24;
		var exists = false;
		try{
			if ( $('#weekcalendar').children().length > 0 ){
				exists = true;
				$('#weekcalendar').fullCalendar('refetchEvents');
				$('#weekcalendar').fullCalendar( 'rerenderEvents' )
			}
		}catch(e){
			window.console &amp;&amp; console.log(e);
		}
		if(exists == false) {
				
				$('#weekcalendar').fullCalendar({
					header: {
						left: 'prev,next today',
						center: 'title',
						right: ''
					},
					defaultView: 'agendaWeek',
					editable: true,
					slotMinutes: 15,
					aspectRatio : 0.9,
					firstHour : 10 ,
					minTime : variablemintime,
					maxTime : variablemaxtime,
					selectable: true,
					selectHelper: true,
					dayRender: function( date, cell) {

						cell.addTouch();

						},
					 eventClick: function(event) {
							if (event.url) {
								//window.open(event.url);
								alert('event click');
								return false;
							}
						},		
					eventRender: function(event, element, view)
								  {
								  element.bind('click', function()
										 {
										 var day = ($.fullCalendar.formatDate( event.start, 'dd' ));
										 var month = ($.fullCalendar.formatDate( event.start, 'MM' ));
										 var year = ($.fullCalendar.formatDate( event.start, 'yyyy' ));
										  //alert(year+'-'+month+'-'+day);
										 });
								   },
					// Clicked on day
					dayClick: function(date, allDay, jsEvent, view) {
							//alert('entered day click');
							if (allDay) {
									//alert('Clicked on the entire day: ' + date);
							} else{
									//alert('Clicked on the slot: ' + date);
							}

					},
					// Selected a Time
					select: function( startDate, endDate, allDay, jsEvent, view ) {
						//alert(startDate);
					},			
					events: function(start, end, callback) {
							start = $.fullCalendar.formatDate( start, "yyyy-MM-dd" );
							end = $.fullCalendar.formatDate( end, "yyyy-MM-dd" );
							standby.show();
							$.ajaxSetup({ cache: false });
							$.getJSON("myschedule/calendar?date="+start+"&amp;enddate="+end,
									function(data){
										window.console &amp;&amp; console.log("the data: "+data);
										var events =   [];
										var tdata = JSON.stringify(data);
										var parsedobjectdata;
										var isJSON;
										try {
											window.console &amp;&amp; console.log(tdata);
											parsedobjectdata = JSON.parse(tdata);
											window.console &amp;&amp; console.log(parsedobjectdata);
											isJSON = true;
										}
										catch (e) {
											isJSON = false;
										}
										
										window.console &amp;&amp; console.log(parsedobjectdata);
										if(parsedobjectdata.constructor == Array){
											var eventcolorbackground = 'yellow';
											var cntr = 0;
											for(var key in parsedobjectdata) {
												if(global_selected_staff != ''){
													if(parsedobjectdata[key].staff.id != global_selected_staff){
														continue;
													}
												}
												if(parsedobjectdata[key].status == 'CANCELED'){
													continue;
												}
												if(parsedobjectdata[key].status == 'DELETED'){
													continue;
												}
												if(parsedobjectdata[key].status == 'ACTIVE'){
													eventcolorbackground = 'active';
												}
												if(parsedobjectdata[key].status == 'NO_SHOW'){
													eventcolorbackground = 'no_show';
												}
												if(parsedobjectdata[key].status == 'CHECKED_OUT'){
													eventcolorbackground = 'checked_out';
												}
												var month = parsedobjectdata[key].month_ApptDate;
												var day = parsedobjectdata[key].day_ApptDate;
												var year = parsedobjectdata[key].year_ApptDate;
												var bhour = data[key].fc_beginHour;
												var bminute = data[key].fc_beginMinute;
												var ehour = data[key].fc_endHour;
												var eminute = data[key].fc_endMinute;
												
												var apptdate = new Date(year,month-1,day,bhour,bminute);
												var enddate = new Date(year,month-1,day,ehour,eminute);
												var titledesc = "";
												if(parsedobjectdata[key].client != null){
													titledesc = parsedobjectdata[key].client.firstName + " " + parsedobjectdata[key].client.lastName + " ";
													titledesc = titledesc + parsedobjectdata[key].servicename1 + " " + parsedobjectdata[key].service1cost;
												}else{
													titledesc = " TIME BLOCK "+ parsedobjectdata[key].personallabel;
													eventcolorbackground = "timeblock";
												}
												
												window.console &amp;&amp; console.log(apptdate);
												events.push({
													title: titledesc,
													start: apptdate,
													end: enddate,
													editable: true,
													className: eventcolorbackground,
													allDay: false
												});
											}
											
											callback(events);
											
										}						
										window.console &amp;&amp; console.log("after jsonify "+tdata);
								standby.hide();
							});					
							// when data is ready use callback(events);
							
							
					},
				});			
		}	
	}
	function destroy(col){
		window.console &amp;&amp; console.log('agenda view display: '+$('#agendaview'+col).is(':visible'));
		if($('#agendaview'+col).is(':visible')){
			toggleVis(col,false);	
			//$('#divcollabel'+col).hide();
			//$('#agendaview'+col).fullCalendar( 'destroy' );
			//$('#agendaview'+col).hide();
		}else{
			toggleVis(col,true);
			//$('#divcollabel'+col).show();
			//$('#agendaview'+col).fullCalendar( 'render' );
			//$('#agendaview'+col).fullCalendar('refetchEvents');
			$('#agendaview'+col).fullCalendar( 'rerenderEvents' )
			
			//$('#agendaview'+col).show();
		}
	}
	function isNumber(n) {
		  return !isNaN(parseFloat(n)) &amp;&amp; isFinite(n);
	}	
	function loadAgenda1(optional_day){
		window.console &amp;&amp; console.log("optional_day: "+optional_day);
		var date = null;
		if(optional_day==undefined){
			window.console &amp;&amp; console.log("about to do a new date on jCalTarget");
			
			window.console &amp;&amp; console.log("jCalTarget"+jCalTargetValue);
			date = new Date(jCalTargetValue);
			
		}else{
			date = optional_day;
		}
		
		window.console &amp;&amp; console.log("loadAgenda1 date: "+date);
		var d = date.getDate();
		if(date != 'Invalid Date'){
			//d = d + 1;
		}
		var m = date.getMonth();
		var y = date.getFullYear();
		var variablemintime = 0;
		var variablemaxtime = 24;
		var exists = false;
		if(av1standby == null){
			av1standby = new dojox.widget.Standby({
				  target: "agendaview1"
				});
			document.body.appendChild(av1standby.domNode);
		}
		try{
			if ( $('#agendaview1').children().length > 0 ){
				exists = true;
				if(isNumber(y) &amp;&amp; isNumber(m) &amp;&amp; isNumber(d)){
					$('#agendaview1').fullCalendar( 'gotoDate', y , m, d );	
				}
				
				$('#agendaview1').fullCalendar('refetchEvents');
				$('#agendaview1').fullCalendar( 'rerenderEvents' );
				
			}
		}catch(e){
			window.console &amp;&amp; console.log(e);
		}
		if(exists == false) {
				
				$('#agendaview1').fullCalendar({
					header: {
						left: '',
						center: 'title',
						right: ''
					},
					resources: [
					        	<c:forEach var="staff" items="${staffs}" varStatus="status">
								{
									id: ${staff.key},
									name: '${staff.value}'
								}
								<c:if test="${not status.last}">
								,
								</c:if>
				        	</c:forEach>

							],
					defaultView: 'resourceDay',
					editable: true,
					allDaySlot: false,
					axisFormat: 'h(:mm)tt',
					timeFormat: 'h(:mm)tt',
					slotMinutes: 15,
					aspectRatio : 0.9,
					firstHour : 8 ,
					minTime : variablemintime,
					maxTime : variablemaxtime,
					selectable: true,
					selectHelper: true,
					dayRender: function( date, cell) {

						cell.addTouch();

						},
					eventRender: function(event, element, view)
								  {
									if(event.requested_image_path != null){
										if(event.requested_image_path == 'yellow'){	
											element.find('.fc-event-time').addClass("afc-event-requested-yellow");
										}
										if(event.requested_image_path == 'red'){	
											element.find('.fc-event-time').addClass("afc-event-requested-red");
										}
									}
						  			element.bind('mouseover', function()
									 {
						  				
									    var tooltip = '<div class="tooltipevetn" style="width:200px;height:100px;background:yellow;color:blue;position:absolute;z-index:10001;">name: ' + event.clientfirstname+' '+event.clientlastname + '<br/>service: '+event.servicename+'<br/>home phone: '+event.clientphonenumber+'<br/>work phone: '+event.clientworkphonenumber+'<br/>cell phone: '+event.clientcellphonenumber+'</div>';
									    $("body").append(tooltip);
									    $(this).mouseover(function(e) {
									        $(this).css('z-index', 10000);
									        $('.tooltipevetn').fadeIn('500');
									        $('.tooltipevetn').fadeTo('10', 1.9);
									    }).mousemove(function(e) {
									        $('.tooltipevetn').css('top', e.pageY + 10);
									        $('.tooltipevetn').css('left', e.pageX + 20);
									    });

									 });
						  			element.bind('mouseout', function()
											 {
								  				
											    $(this).css('z-index', 8);
											    $('.tooltipevetn').remove();


											 });
						
								  element.bind('click', function()
										 {
											var day = ($.fullCalendar.formatDate( event.start, 'dd' ));
											var month = ($.fullCalendar.formatDate( event.start, 'MM' ));
											var year = ($.fullCalendar.formatDate( event.start, 'yyyy' ));
											if(event.clientid == ''){
												displayPersonalDialogForFCCalendar(event,true);
											}else{
												dijit.byId("isThisEditAgendaViewFlag").set("value","true");
												setEditApptDialogWithFCEvent(event);
											}
										 });
								   },
					// Clicked on day
					//dayClick: function(date, allDay, jsEvent, view) {
						
							//alert('entered day click');
							//if (allDay) {
									//alert('Clicked on the entire day: ' + date);
							//} else{
									//alert('Clicked on the slot: ' + date);
									
							//}

					////},
					// Selected a Time
					select: function( startDate, endDate, allDay, jsEvent, view,resourceObj ) {
						//alert("Selected times: "+startDate + " to " +endDate + " staff: "+view.id);
						dijit.byId('avChooseTBorCADialog').reset();
						dijit.byId("choosewhattodo_startdatetime").set("value",startDate);
						dijit.byId("choosewhattodo_enddatetime").set("value",endDate);
						dijit.byId("choosewhattodo_staffid").set("value",view.id);
						dijit.byId('isThisADDAgendaViewFlag').set("value","true");
						setEditTab();
						dijit.byId("avChooseTBorCADialog").show();
						
					},			
					events: function(start, end, callback) {
							start = $.fullCalendar.formatDate( start, "yyyy-MM-dd" );
							end = $.fullCalendar.formatDate( end, "yyyy-MM-dd" );
							av1standby.show();
							$.ajaxSetup({ cache: false });
							

								$.getJSON("myschedule/calendar?date="+start+"&amp;enddate="+end,
										function(data){
											window.console &amp;&amp; console.log("the data: "+data);
											var events =   [];
											var tdata = JSON.stringify(data);
											var parsedobjectdata;
											var isJSON;
											try {
												window.console &amp;&amp; console.log(tdata);
												parsedobjectdata = JSON.parse(tdata);
												window.console &amp;&amp; console.log(parsedobjectdata);
												isJSON = true;
											}
											catch (e) {
												isJSON = false;
											}
											
											window.console &amp;&amp; console.log(parsedobjectdata);
											if(parsedobjectdata.constructor == Array){
												customServicesPricesArray = [];
												var eventcolorbackground = 'yellow';
												var cntr = 0;
												for(var key in parsedobjectdata) {
													if(global_selected_staff != ''){
														if(parsedobjectdata[key].staff.id != global_selected_staff){
															continue;
														}
													}
													if(parsedobjectdata[key].status == 'CANCELED'){
														continue;
													}
													if(parsedobjectdata[key].status == 'DELETED'){
														continue;
													}
													if(parsedobjectdata[key].status == 'ACTIVE'){
														eventcolorbackground = 'active';
													}
													if(parsedobjectdata[key].status == 'NO_SHOW'){
														eventcolorbackground = 'no_show';
													}
													if(parsedobjectdata[key].status == 'CHECKED_OUT'){
														eventcolorbackground = 'checked_out';
													}
													
													var month = parsedobjectdata[key].month_ApptDate;
													var day = parsedobjectdata[key].day_ApptDate;
													var year = parsedobjectdata[key].year_ApptDate;
													var bhour = data[key].fc_beginHour;
													var bminute = data[key].fc_beginMinute;
													var ehour = data[key].fc_endHour;
													var eminute = data[key].fc_endMinute;
													
													var apptdate = new Date(year,month-1,day,bhour,bminute);
													var enddate = new Date(year,month-1,day,ehour,eminute);
													var titledesc = "";
													var staffid = "";
													var clientid = "";
													var clientfirstname = "";
													var clientlastname = "";
													// BEGIN OF DOAJAX CODE
													var sbeginetimex = parsedobjectdata[key].s_beginDateTime;
													var sendetimex = parsedobjectdata[key].s_endDateTime;
													var iscancelled = false;
													if(parsedobjectdata[key].cancelled == null || parsedobjectdata[key].cancelled == 'false'){
														iscancelled = false;
													}else{
														iscancelled = parsedobjectdata[key].cancelled;
													}
													var yearapptdate = apptdate.getFullYear();
													var monthapptdate = apptdate.getMonth()+1;
													var dayapptdate = apptdate.getDate();
													// the realdate is used to set the calendar widget
													var realdate = new Date(apptdate.getUTCFullYear(),apptdate.getUTCMonth(),apptdate.getUTCDate());
													var endtime = new Date(parsedobjectdata[key].endDateTime.time);
													var endhour = endtime.getHours();
													var endmin = endtime.getMinutes();
													var eap = "am";
													if (endhour   > 11) { eap = "pm";        }
													if (endhour   > 12) { endhour = endhour - 12; }
													if (endhour   == 0) { endhour = 12;        }
													
													var begintime = new Date(parsedobjectdata[key].beginDateTime.time);
													var beginhour = begintime.getHours();
													var beginmin = begintime.getMinutes();
													var ap = "am";
													if (beginhour   > 11) { ap = "pm";        }
													if (beginhour   > 12) { beginhour = beginhour - 12; }
													if (beginhour   == 0) { beginhour = 12;        }
		
													var coln = sbeginetimex.indexOf(':');
													// beginhour used to set the value in the begin hour select box
													beginhour = sbeginetimex.substring(0,coln);
													beginmin = sbeginetimex.substring(coln+1,coln+3);
													if(beginmin == 0){
														beginmin = '00';
													}
													// the begin am pm value
													ap = sbeginetimex.substring(sbeginetimex.length,sbeginetimex.length-2);
		
													// end time
													var coln = sendetimex.indexOf(':');
													endhour = sendetimex.substring(0,coln);
													endmin = sendetimex.substring(coln+1,coln+3);
													if(endmin == 0){
														endmin = '00';
													}
													eap = sendetimex.substring(sendetimex.length,sendetimex.length-2);
													id = parsedobjectdata[key].id;
													var svccost = "";
													if(parsedobjectdata[key].service1cost == null){
														svccost = "0.00";
													}else{
														svccost = parsedobjectdata[key].service1cost;
														svc1id = parsedobjectdata[key].service1id;
														window.console &amp;&amp; console.log("loading events for fc calendar svccost: "+svccost);
														var custserviceprice = new customservicepriceobject(id,svc1id,svccost);
														customServicesPricesArray.push(custserviceprice);
														
													}
													
													
													if(parsedobjectdata[key].servicename1 == null){
													}else{
														svcname = parsedobjectdata[key].servicename1;
													}
													
													var svctype = "";
													if(parsedobjectdata[key].service1type == null){
													}else{
														svctype = parsedobjectdata[key].service1type;
													}
													
													
													if(parsedobjectdata[key].service1id == null){
													}else{
														svcid = parsedobjectdata[key].service1id;
													}
													
													var stateStore = null;
													id = id.substring(id.length-2,id.length);
													
													var id = "0";
													id = parsedobjectdata[key].id;
													
													var personallabel = '';
													if(parsedobjectdata[key].personallabel != null){
														personallabel = parsedobjectdata[key].personallabel;
													}
													
													var notes = "";
													if(parsedobjectdata[key].notes == null){
													}else{
														notes = decodeURI(decodeURIComponent(parsedobjectdata[key].notes));
														if(notes != null){
															notes =notes.split('+').join(' ');
														}
													}													
													// END OF DOAJAX
													var clientphonenumber = "";
													clientphonenumber = parsedobjectdata[key].clientphonenumber;
													if(clientphonenumber == 'undefined'){
														clientphonenumber = '';
													}
													var clientcellphonenumber = "";
													clientcellphonenumber = parsedobjectdata[key].clientcellphonenumber;
													if(clientcellphonenumber == 'undefined'){
														clientcellphonenumber = '';
													}
													var clientworkphonenumber = "";
													clientworkphonenumber = parsedobjectdata[key].clientworkphonenumber;
													if(clientworkphonenumber == 'undefined'){
														clientworkphonenumber = '';
													}
													
													if(parsedobjectdata[key].client != null){
														clientid = parsedobjectdata[key].client.id;
														
														clientfirstname = parsedobjectdata[key].client.firstName;
														clientlastname = parsedobjectdata[key].client.lastName;
														titledesc = parsedobjectdata[key].client.firstName + " " + parsedobjectdata[key].client.lastName + " ";
														titledesc = titledesc + parsedobjectdata[key].servicename1 + " " + parsedobjectdata[key].service1cost;
													}else{
														titledesc = " TIME BLOCK "+ parsedobjectdata[key].personallabel;
														eventcolorbackground = "timeblock";
													}
													if(parsedobjectdata[key].staff != null){
														staffid = parsedobjectdata[key].staff.id;
													}
													var recur_parent = parsedobjectdata[key].recur_parent;
													var requested_image_path = parsedobjectdata[key].requested_image_path;
													window.console &amp;&amp; console.log("staffid: "+staffid);
													window.console &amp;&amp; console.log(apptdate);
													events.push({
														requested_image_path: requested_image_path,
														clientphonenumber: clientphonenumber,
														clientcellphonenumber: clientcellphonenumber,
														clientworkphonenumber: clientworkphonenumber,
														resourceId: parsedobjectdata[key].staff.id,
														className: eventcolorbackground,
														textColor: 'white',
														title: titledesc,
														realdate:realdate,
														clientid:clientid,
														clientfirstname:clientfirstname,
														clientlastname:clientlastname,
														appointmentid:id,
														appointmentnotes: notes,
														appointmentstatus:''+parsedobjectdata[key].status,
														appointmentdate:apptdate,
														servicename:svcname,
														servicetype:svctype,
														serviceid:svcid,
														staffid:''+staffid,
														stafffirstname:'',
														stafflastname:'',
														personallabel: personallabel,
														personalreason: personalreason,
														beginhour:beginhour,
														beginmin:beginmin,
														beginampm:ap,
														endhour:endhour,
														endmin:endmin,
														endampm:eap,
														price:svccost,
														start: apptdate,
														end: enddate,
														editable: true,
														allDay: false,
														recur_parent:recur_parent 
													});
												}
												
												callback(events);
												
											}						
											window.console &amp;&amp; console.log("after jsonify "+tdata);
											av1standby.hide();
								});			
							
							// when data is ready use callback(events);
							var edittab = dijit.byId("editTab");
							//edittab.set("style","height: 750px");

							
					},
				});			
		}
	}
	</script>
    <jsp:directive.page contentType="text/html;charset=UTF-8"/>
    <jsp:output omit-xml-declaration="yes"/>
	<style>
		.afc-event-requested-yellow {
		  font-size:0.7em;
		  margin-top:-.1em;
		  padding:2px;
		  background: url('images/circular icons/star_yellow.png') no-repeat;
		  padding-left: 16px;
		}
		.afc-event-requested-red {
		  font-size:0.7em;
		  margin-top:-.1em;
		  padding:2px;
		  background: url('images/circular icons/star_red.png') no-repeat;
		  padding-left: 16px;
		}	
			
					.timeblock, 
					.fc-agend a .timeblock .fc-event-time,
					.timeblock a
					{
						background-color: orange; /* background color */
						border-color: Olive;     /* border color */
						color: White;           /* text color */
					}
					.timeblock div
					{
					   background-color: orange;
					   color:black;
					}				
					.timeblock, 
					.fc-agend a .timeblock .fc-event-time,
					.timeblock a
					{
						background-color: orange; /* background color */
						border-color: orange;     /* border color DarkMagenta */
						color: White;           /* text color */
					}
					.timeblock div
					{
					   background-color: orange;
					}
					/* active */			
					.active, 
					.fc-agend a .active .fc-event-time,
					.active a
					{
						background-color: green; /* background color */
						border-color: Olive;     /* border color */
						color: White;           /* text color */
					}
					.active div
					{
					   background-color: green;
					   color:#F0FFFF;
					}				
					.active, 
					.fc-agend a .active .fc-event-time,
					.active a
					{
						background-color: green; /* background color */
						border-color: green;     /* border color DarkMagenta */
						color: White;           /* text color */
					}
					.active div
					{
					   background-color: green;
					}
					/* no_show */			
					.no_show, 
					.fc-agend a .no_show .fc-event-time,
					.no_show a
					{
						background-color: yellow; /* background color */
						border-color: Olive;     /* border color */
						color: White;           /* text color */
					}
					.no_show div
					{
					   background-color: yellow;
					   color:black;
					}				
					.no_show, 
					.fc-agend a .no_show .fc-event-time,
					.no_show a
					{
						background-color: yellow; /* background color */
						border-color: yellow;     /* border color DarkMagenta */
						color: White;           /* text color */
					}
					.no_show div
					{
					   background-color: yellow;
					}
					/* checked_out */			
					.checked_out, 
					.fc-agend a .checked_out .fc-event-time,
					.checked_out a
					{
						background-color: red; /* background color */
						border-color: Olive;     /* border color */
						color: White;           /* text color */
					}
					.checked_out div
					{
					   background-color: red;
					   color:black;
					}				
					.checked_out, 
					.fc-agend a .checked_out .fc-event-time,
					.checked_out a
					{
						background-color: red; /* background color */
						border-color: red;     /* border color DarkMagenta */
						color: White;           /* text color */
					}
					.checked_out div
					{
					   background-color: red;
					}
					/* cancelled */			
					.cancelled, 
					.fc-agend a .cancelled .fc-event-time,
					.cancelled a
					{
						background-color: brown; /* background color */
						border-color: Olive;     /* border color */
						color: White;           /* text color */
					}
					.cancelled div
					{
					   background-color: brown;
					   color:#F0FFFF;
					}				
					.cancelled, 
					.fc-agend a .cancelled .fc-event-time,
					.cancelled a
					{
						background-color: brown; /* background color */
						border-color: brown;     /* border color DarkMagenta */
						color: White;           /* text color */
					}
					.cancelled div
					{
					   background-color: brown;
					}
		
	
		agenda.t { float: left; }
		table { border: 1px solid black; }
		#clearit { clear: left; }
		

		  agenda.tr { background-color: lightblue}
		  .initial{ background-color: orange; }
		  .normal{ background-color: yellowgreen; }
		  .highlight { background-color: yellow !important; cursor:pointer }

	</style>
	
	
		<c:if test="${fn:length(staffs) &gt; 1}">
		<div id="generalstaff">
			<label class="dijit dijitReset dijitInlineTable dijitLeft " for="staffgeneral">Filter staff: </label>
			<formd:select dojoType="dijit.form.FilteringSelect" path="staffs" id="staffgeneral" items="${staffs}"  value="${staffs}" fetchProperties="{sort:[{attribute:'description', ascending:true}]}" required="false"/>
		</div>
		<br/>		
		</c:if>
		<!-- create the tab container div -->
		 <div id="myTabContainer" style="height:2500px; width:99%;">
				 <!-- another tab... -->
			 <div id="editTab" style="display: none;height:2400px;">
<!-- 			 	
			    <c:forEach var="staff" items="${staffs}" varStatus="status">
	 				<input type="checkbox" name="col${status.count}" checked="checked" onclick="destroy(${status.count});" /> Hide/Show ${staff.value} 
			    </c:forEach>    
 -->			 
 				<div>
				<table id='months_view_table' name='months_view_table' valign="top">
					<tr >
						<td align="center" valign="middle">
							<div id="jCalTarget" name="jCalTarget">j</div>
						</td>
					</tr>
				</table>
 				</div>
 				<div>
				<table height="100%" width="100%" cellpadding="5" cellspacing="5"  id='agenda_view_table' name='agenda_view_table' valign="top">
					<tr>
						<td></td>						
					</tr>
					<tr>
						<td >
							<div id='agendaview1' name='agendaview1'/>
						</td>
					</tr>
				</table>
				</div>
				<div dojoType="dijit.Dialog" id="personalDialog" title="Time block" execute="savePersonal(arguments[0]);" style="width: 400px;display: none" >
					<input dojoType="dijit.form.TextBox" type="hidden" id="hPersonalSelectDate" name="hPersonalSelectDate"/>
					<input dojoType="dijit.form.TextBox" type="hidden" id="isThisAgendaViewFlag" name="isThisAgendaViewFlag"/>
					<input dojoType="dijit.form.TextBox" type="hidden" id="personaledit" name="personaledit" value="false"/>
					<input dojoType="dijit.form.TextBox" type="hidden" id="editpersonalapptid" name="editpersonalapptid" value="false"/>
					<p>
						<div>
							<label for="c_personalselectdate">Select Date:</label>
						</div>
						<div>	 
							<input id="c_personalselectdate" name="c_personalselectdate" value="${editselectdate}" />
						</div>
						<script type="text/javascript">
							Spring.addDecoration(new Spring.ElementDecoration({
								elementId : "c_personalselectdate",
								widgetType : "dijit.Calendar",
								widgetAttrs : {
									value : new Date(),
									required : true,
									onValueSelected: function(newValue) {
										document.getElementById("hPersonalSelectDate").value=dojo.date.locale.format(newValue, {datePattern: "yyyy-MM-dd", selector: "date"});
										
									}
								}
							}));
							Spring.addDecoration(new Spring.AjaxEventDecoration({
								elementId : "c_personalselectdate",
								formId : "dateForm",
								event : "onchange",
								params : {
									_eventId : "updateEntries"
								}
							}));
							
						</script>	
						<br/>

						<div id="staffstandby_personal">
							<label class="dijit dijitReset dijitInlineTable dijitLeft " for="fapptstaff_personal">Staff : </label>
							<formd:select dojoType="dijit.form.FilteringSelect" path="staffs" id="fapptstaff_personal" items="${staffs}"  value="${staffs}" fetchProperties="{sort:[{attribute:'description', ascending:true}]}"/>
						</div>
						<br/>
						<label for="personalhour">Select begin time:</label> 
					    
						<select dojoType="dijit.form.FilteringSelect" name="personalhour" id="personalhour" autocomplete="true" value="sel" required="true" invalidMessage="Please select an hour." style="width: 50px;" >
										<option value="1" >1</option>
										<option value="2" >2</option>
										<option value="3" >3</option>
										<option value="4" >4</option>
										<option value="5" >5</option>
										<option value="6" >6</option>
										<option value="7" >7</option>
										<option value="8" >8</option>
										<option value="9" >9</option>
										<option value="10" >10</option>
										<option value="11" >11</option>
										<option value="12" >12</option>
						</select>						
						<select dojoType="dijit.form.FilteringSelect" name="personalminute" id="personalminute" autocomplete="true" value="sel" required="true" invalidMessage="Please select an minute." style="width: 50px;">
										<option value="00" >00</option>
										<option value="15" >15</option>
										<option value="30" >30</option>
										<option value="45" >45</option>
						</select>												
						<select dojoType="dijit.form.FilteringSelect" name="personalampm" id="personalampm" autocomplete="true" value="sel" required="true" invalidMessage="Please select an am or pm." style="width: 50px;">
										<option value="am" >am</option>
										<option value="pm" >pm</option>
						</select>												
					</p>
					<p>
						<label for="personalendhour">Select end time:</label> 
					    
						<select dojoType="dijit.form.FilteringSelect" name="personalendhour" id="personalendhour" autocomplete="true" value="sel" required="true" invalidMessage="Please select an hour." style="width: 50px;"> 
										<option value="1" >1</option>
										<option value="2" >2</option>
										<option value="3" >3</option>
										<option value="4" >4</option>
										<option value="5" >5</option>
										<option value="6" >6</option>
										<option value="7" >7</option>
										<option value="8" >8</option>
										<option value="9" >9</option>
										<option value="10" >10</option>
										<option value="11" >11</option>
										<option value="12" >12</option>
						</select>						
						<select dojoType="dijit.form.FilteringSelect" name="personalendminute" id="personalendminute" autocomplete="true" value="sel" required="true" invalidMessage="Please select an minute." style="width: 50px;">
										<option value="00" >00</option>
										<option value="15" >15</option>
										<option value="30" >30</option>
										<option value="45" >45</option>
						</select>												
						<select dojoType="dijit.form.FilteringSelect" name="personalendampm" id="personalendampm" autocomplete="true" value="sel" required="true" invalidMessage="Please select am or pm." style="width: 50px;">
										<option value="am" >am</option>
										<option value="pm" >pm</option>
						</select>												
					</p>
					<p>
						<label for="personalreason">Reason:</label>				
					</p>
					<p>
						<input dojoType="dijit.form.TextBox" type="text" name="personalreason" id="personalreason" required="true"/>
					</p>
					
					<p>
						<label for="personalnotes">Notes:</label>				
					</p>
					<p>
						<input dojoType="dijit.form.SimpleTextarea" type="text" name="personalnotes" id="personalnotes"/>
					</p>
					<div id ="savepersonalbutton" >
						<button dojoType="dijit.form.Button" type="button" onClick="if(dijit.byId('personalDialog').validate()){;savePersonal();dijit.byId('personalDialog').hide();}" id="personalsavebutton">
							Save changes
						</button>
					</div>
					<div id="updatepersonalbutton" style="display: none">
						<button dojoType="dijit.form.Button" type="button" onClick="if(dijit.byId('personalDialog').validate()){;updatePersonal();dijit.byId('personalDialog').hide();}">
							Update
						</button>
						<button dojoType="dijit.form.Button"  type="button" onClick="dijit.byId('personalDialog').hide();deletePersonal();dijit.byId('personalDialog').reset();">
							Delete
						</button>
					</div>
			 </div>
			 
			 <div dojoType="dijit.Dialog" id="avChooseTBorCADialog" title="Choose what to do" style="display: none">
					<input dojoType="dijit.form.TextBox" type="hidden" id="choosewhattodo_startdatetime"/>
					<input dojoType="dijit.form.TextBox" type="hidden" id="choosewhattodo_enddatetime"/>
					<input dojoType="dijit.form.TextBox" type="hidden" id="choosewhattodo_staffid"/>	
						<button dojoType="dijit.form.Button" id="addtimeblockbutton" type="button" onClick="addTimeBlockDialog();dijit.byId('avChooseTBorCADialog').hide();">
							Add time block
						</button>
						<button dojoType="dijit.form.Button" id="createappointmentbutton" type="button" onClick="createAppointmentForAgendaView();dijit.byId('avChooseTBorCADialog').hide();">
							Create an appointment
						</button>
			 
			 </div>
				<div data-dojo-type="dijit/Dialog" id="editApptDialog" title="Full Edit Appointment" execute="updateAppointment(arguments[0],false);" style="display: none">
					<div id="myRecurTabContainer" style="height:800px; width:640px;">
				 
			 			<div id="editDialogTab1">
			 			<table>
			 				<tr>
			 					<td>
							<input dojoType="dijit.form.TextBox" type="hidden" id="isThisEditAgendaViewFlag" name="isThisEditAgendaViewFlag"/>
							<input dojoType="dijit.form.TextBox" type="hidden" id="isThisADDAgendaViewFlag" name="isThisADDAgendaViewFlag"/>
							<input dojoType="dijit.form.TextBox" type="hidden" id="editdialogsvcid"/>
							<input dojoType="dijit.form.TextBox" type="hidden" id="editdialogapptid"/>
							<input dojoType="dijit.form.TextBox" type="hidden" id="editdialogservice"/>
							<input dojoType="dijit.form.TextBox" type="hidden" id="edit_recur_parent"/>
							<input dojoType="dijit.form.TextBox" type="hidden" id="editdialogservicetype"/>
							<input dojoType="dijit.form.TextBox" type="hidden" id="hEditSelectDate" name="hEditSelectDate"/>
							<div id="dropdownButtonContainer">Request indicator: </div>
							<div>
								<label for="c_editselectdate">Select Date:</label>
							</div>
							<div>	 
								<input id="c_editselectdate" name="c_editselectdate" value="${editselectdate}" />
							</div>
							<script type="text/javascript">
								Spring.addDecoration(new Spring.ElementDecoration({
									elementId : "c_editselectdate",
									widgetType : "dijit.Calendar",
									widgetAttrs : {
										value : new Date(),
										required : true,
										onValueSelected: function(newValue) {
											
											document.getElementById("hEditSelectDate").value=dojo.date.locale.format(newValue, {datePattern: "yyyy-MM-dd", selector: "date"});
											
										}
									}
								}));
							</script>						
								<div id="staffstandby_personal_edit">
									<label class="dijit dijitReset dijitInlineTable dijitLeft " for="fapptstaff_edit">Staff : </label>
									<formd:select dojoType="dijit.form.FilteringSelect" path="staffs" id="fapptstaff_edit" items="${staffs}" value="${staffs}" fetchProperties="{sort:[{attribute:'description', ascending:true}]}"/>
								</div>
								<p/>
								<div>
									<label for="c_editclientname_id">Client name:</label>
								</div>
								<p>
									<div>
									
										<formd:select tabindex="1" dojoType="dijit.form.FilteringSelect" path="clients" id="c_editclientname_id" items="${clients}" value="${clients}" fetchProperties="{sort:[{attribute:'name', ascending:true}]}" disabled="true"/>
										<button data-dojo-type="dijit.form.Button" data-dojo-props="label:'add new client',onClick:function(){addnewclient(arguments[0]);}">
											add new client
										</button>																
																
									</div>
								</p>					
								
							<p>
								<label for="fedithour">Select begin time:</label> 
							    
								<select dojoType="dijit.form.FilteringSelect" name="fedithour" id="fedithour" autocomplete="true" value="sel" style="width: 50px;">
												<option value="1" >1</option>
												<option value="2" >2</option>
												<option value="3" >3</option>
												<option value="4" >4</option>
												<option value="5" >5</option>
												<option value="6" >6</option>
												<option value="7" >7</option>
												<option value="8" >8</option>
												<option value="9" >9</option>
												<option value="10" >10</option>
												<option value="11" >11</option>
												<option value="12" >12</option>
								</select>						
								<select dojoType="dijit.form.FilteringSelect" name="editminute" id="editminute" autocomplete="true" value="sel" style="width: 50px;">
												<option value="00" >00</option>
												<option value="15" >15</option>
												<option value="30" >30</option>
												<option value="45" >45</option>
								</select>												
								<select dojoType="dijit.form.FilteringSelect" name="editampm" id="editampm" autocomplete="true" value="sel" style="width: 50px;">
												<option value="am" >am</option>
												<option value="pm" >pm</option>
								</select>												
							</p>
							<p>
								<label for="fendedithour">Select end time (optional):</label> 
							    
								<select dojoType="dijit.form.FilteringSelect" name="fendedithour" id="fendedithour" autocomplete="true" value="sel" style="width: 50px;">
												<option value="select" >Select</option>
												<option value="1" >1</option>
												<option value="2" >2</option>
												<option value="3" >3</option>
												<option value="4" >4</option>
												<option value="5" >5</option>
												<option value="6" >6</option>
												<option value="7" >7</option>
												<option value="8" >8</option>
												<option value="9" >9</option>
												<option value="10" >10</option>
												<option value="11" >11</option>
												<option value="12" >12</option>
								</select>						
								<select dojoType="dijit.form.FilteringSelect" name="endeditminute" id="endeditminute" autocomplete="true" value="sel" style="width: 50px;">
												<option value="select" >Select</option>
												<option value="00" >00</option>
												<option value="15" >15</option>
												<option value="30" >30</option>
												<option value="45" >45</option>
								</select>												
								<select dojoType="dijit.form.FilteringSelect" name="endeditampm" id="endeditampm" autocomplete="true" value="sel" style="width: 50px;">
												<option value="select" >Select</option>
												<option value="am" >am</option>
												<option value="pm" >pm</option>
								</select>												
							</p>			 					
			 					</td>
			 					<td>
							
							<div id="editapptservicesdiv">
								<p>
								<label>Filter by Category</label>
								<formd:select dojoType="dijit.form.FilteringSelect" path="categories" id="editcategories" items="${categories}" fetchProperties="{sort:[{attribute:'description', ascending:true}]}"/>
								</p>
								<p>
								<label>Service</label>
								<formd:select tabindex="2" dojoType="dijit.form.FilteringSelect" path="services" id="editselect" items="${services}" fetchProperties="{sort:[{attribute:'description', ascending:true}]}"/>
								</p>
								<p>
									<label for="editdialogprice">Price:</label>				
								</p>
								<p>
									<input dojoType="dijit.form.CurrencyTextBox" type="text" name="editdialogprice" id="editdialogprice"/>
								</p>
								<p>
									<label for="editdialognotes">Notes:</label>				
								</p>
								<p>
									<input dojoType="dijit.form.SimpleTextarea" type="text" name="editdialognotes" id="editdialognotes"/>
								</p>
								<button tabindex="3" dojoType="dijit.form.Button" type="button" onClick="if(dijit.byId('editApptDialog').validate()){updateAppointment();}" id="editsavebutton"  style="color:Blue;">
									Save changes
								</button>
								<button dojoType="dijit.form.Button" id="editcobutton"  type="button" onClick="dijit.byId('editApptDialog').hide();saveAndCheckout();dijit.byId('editApptDialog').reset();dijit.byId('progButton').set('label','Select one');dijit.byId('progButton').set('value','');"  style="color:Green;">
									Check out
								</button>
								<p/>								
								<button dojoType="dijit.form.Button" id="editcancelbutton" type="button" onClick="cancelAppointment();"  style="color:Chocolate;">
									Cancel appointment
								</button>
								<button dojoType="dijit.form.Button"  id="editnsbutton" type="button" onClick="dijit.byId('editApptDialog').hide();noShowAppointment();dijit.byId('editApptDialog').reset();dijit.byId('progButton').set('label','Select one');dijit.byId('progButton').set('value','');"  style="color:Brown;">
									No Show
								</button>
							</div>			 					
			 					</td>
			 				</tr>
			 			</table>


						</div>
						 <!-- add the content pane decoration (all tabs must live in content panes) -->
						 <script type="text/javascript">
						 Spring.addDecoration(new Spring.ElementDecoration(
						 {elementId : 'editDialogTab1',
						 widgetType : 'dijit.layout.ContentPane',
						 widgetAttrs : {title: 'Basic', selected: true}
						 }));
						 </script> 
						
						<div id="editDialogTab2">
							<div id="editDialogTab2Message" style="display:none">
								Recurring is not available for edited appointments.
							</div>
							<div id="hideShowRecur" name="hideShowRecur" style="display:block">
								<fieldset style="width: 95%;" >
									<div>
										<table>
											<tr>
												<td width="5%"><input type="checkbox" id="enable_recur" name="enable_recur" data-dojo-type="dijit.form.CheckBox" data-dojo-props="checked: false"/> </td>
												<td>Enable recurring appointment</td>
											</tr>
										</table>
									</div>
									<div id="recur_div">
										<util:panel id="recur_pattern_panel" title="Recurrence pattern" openPane="true">
											<table>
												<tr>
													<td>
														<input type="radio" name="group1" id="daily" value="daily" data-dojo-type="dijit.form.RadioButton" data-dojo-props="disabled:true"/>Daily
													</td>
													<td span="2">
														<input type="radio" name="group1" id="every" value="every" data-dojo-type="dijit.form.RadioButton" data-dojo-props="disabled:true"/>Every
														<input dojoType="dijit.form.NumberSpinner" id="everytext" required="false" value="1" smallDelta="1" data-dojo-props="disabled:true"/>day(s)
													</td>
													<td>
														<input type="radio" name="group1" id="everyweekday" value="every" data-dojo-type="dijit.form.RadioButton" data-dojo-props="disabled:true"/>Every weekday
													</td>
												</tr>
											</table>
											<table>
												<tr>
													<td>
														<input type="radio" name="group1" id="weekly" value="weekly" data-dojo-type="dijit.form.RadioButton" data-dojo-props="disabled:true"/>Weekly
													</td>
													<td span="3">
														<input type="radio" name="group1" id="weeklyevery" value="weeklyevery" data-dojo-type="dijit.form.RadioButton" data-dojo-props="disabled:true"/>Every
														<input dojoType="dijit.form.NumberSpinner" id="weeklyeverytext" required="false" value="1" smallDelta="1" data-dojo-props="disabled:true"/>week(s) on
														<table>
														<tr>
															<td>
																Sunday<input type="checkbox" name="group3" id="everyweekdaysu" value="sunday" data-dojo-type="dijit.form.CheckBox" data-dojo-props="disabled:true,checked: false"/>
																Monday<input type="checkbox" name="group3" id="everyweekdaymo" value="monday" data-dojo-type="dijit.form.CheckBox" data-dojo-props="disabled:true,checked: false"/>
																Tuesday<input type="checkbox" name="group3" id="everyweekdaytu" value="tuesday" data-dojo-type="dijit.form.CheckBox" data-dojo-props="disabled:true,checked: false"/>
																Wednesday<input type="checkbox" name="group3" id="everyweekdaywe" value="wednesday" data-dojo-type="dijit.form.CheckBox" data-dojo-props="disabled:true,checked: false"/>
																Thursday<input type="checkbox" name="group3" id="everyweekdaythu" value="thursday" data-dojo-type="dijit.form.CheckBox" data-dojo-props="disabled:true,checked: false"/>
																Friday<input type="checkbox" name="group3" id="everyweekdayfri" value="friday" data-dojo-type="dijit.form.CheckBox" data-dojo-props="disabled:true,checked: false"/>
																Saturday<input type="checkbox" name="group3" id="everyweekdaysat" value="saturday" data-dojo-type="dijit.form.CheckBox" data-dojo-props="disabled:true,checked: false"/>
															</td>
														</tr>
														</table>
													</td>
												</tr>
											</table>
											<table>
												<tr>
													<td><input type="radio" name="group1" id="monthly" value="monthly" data-dojo-type="dijit.form.RadioButton" data-dojo-props="disabled:true" />Monthly</td>
													<td span="2">
														<table>
															<tr>
																<td>
																	<input type="radio" name="group1" id="everyday" value="everyday" data-dojo-type="dijit.form.RadioButton" data-dojo-props="disabled:true" />Day
																	<input dojoType="dijit.form.NumberSpinner" id="everymonthdaytext" required="false" value="1" smallDelta="1" data-dojo-props="disabled:true"/>of every 
																	<input dojoType="dijit.form.NumberSpinner" id="everymonthtext" required="false" value="1" smallDelta="1" data-dojo-props="disabled:true"/>month(s)
																</td>
															</tr>
															<tr>
																<td span="2">
																	<input type="radio" name="group1" id="everyregex" value="everyregex"  data-dojo-type="dijit.form.RadioButton" data-dojo-props="disabled:true"/>The
																	<select dojoType="dijit.form.FilteringSelect" name="everynthdaytext" id="everynthdaytext" autocomplete="true" value="sel" style="width: 100px;" disabled="disabled">
																					<option value="sel" selected="selected">Select</option>
																					<option value="1" >first</option>
																					<option value="2" >second</option>
																					<option value="3" >third</option>
																					<option value="4" >fourth</option>
																					<option value="5" >fifth</option>
																	</select>
																	<select dojoType="dijit.form.FilteringSelect" name="everynthmonthtext" id="everynthmonthtext" autocomplete="true" value="sel" style="width: 100px;" disabled="disabled">
																					<option value="sel" selected="selected">Select</option>
																					<option value="1" >Sunday</option>
																					<option value="2" >Monday</option>
																					<option value="3" >Tuesday</option>
																					<option value="4" >Wednesday</option>
																					<option value="5" >Thursday</option>
																					<option value="6" >Friday</option>
																					<option value="7" >Saturday</option>
																	</select>
																 	of every
																	<input dojoType="dijit.form.NumberSpinner" id="everyhowmanymonthtext" required="false" value="1" smallDelta="1" data-dojo-props="disabled:true"/>month(s)
																</td>
															</tr>
															
														</table>
													</td>
													
													<td></td>
												</tr>
												
											</table>
											
											
										</util:panel>	
																
										<util:panel id="recur_range_panel" title="Range of recurrence" openPane="true">
											<form id="myform">
												<table>
													<tr>
														<td>
															<table>
																<tr>
																<td>
																	<input type="radio" name="rangegroup" id="endafter" value="every" data-dojo-type="dijit.form.RadioButton" data-dojo-props="disabled:true"/> End after :
																	<input dojoType="dijit.form.NumberSpinner" id="endafterxoccur" required="false" value="1" smallDelta="1" data-dojo-props="disabled:true"/> ocurrences
																</td>
																</tr>
																<tr>
																<td>
																	<input type="radio" name="rangegroup" id="everydate" value="every" data-dojo-type="dijit.form.RadioButton" data-dojo-props="disabled:true" /> End by:
																	<input id="rangerecurEndDate" type="text" name="rangerecurEndDate" data-dojo-type="dijit.form.DateTextBox" data-dojo-props="disabled: true,required: false" /> 
																</td>
																</tr>
															</table>
														</td>
													</tr>
												</table> 
											</form>
										</util:panel>
									</div>							
								</fieldset>
							</div>
						</div>					
						 <script type="text/javascript">
						 Spring.addDecoration(new Spring.ElementDecoration(
						 {elementId : 'editDialogTab2',
						 widgetType : 'dijit.layout.ContentPane',
						 widgetAttrs : {title: 'Recurring', selected: true}
						 }));
						 </script> 
					</div>						
				</div>				 
							
			 </div>
	
			 <!-- add the content pane decoration (all tabs must live in content panes) -->
			 <script type="text/javascript">
			 Spring.addDecoration(new Spring.ElementDecoration(
			 {elementId : 'editTab',
			 widgetType : 'dijit.layout.ContentPane',
			 widgetAttrs : {title: 'Create / Edit Appointments', selected: true}
			 }));
			 </script> 
			 
			 <!-- add the content pane decoration (all tabs must live in content panes) -->
			 <script type="text/javascript">
			 /*
			 creates a json object from the data input
			 */
			function Trax(response){
				var isJSON;
				var data;
				try {
					//window.console &amp;&amp; console.log(response);
					data = JSON.parse(response);
					window.console &amp;&amp; console.log(data);
					isJSON = true;
				}
				catch (e) {
					isJSON = false;
				}

				if (isJSON) {
					// data is already parsed, so just use it
					// handle response codes
					// do something with returned data
					
					if(data.constructor == Array){
						
						var cntr = 0;
						var myCars=new Array(); // regular array (add an optional integer
						for(var key in data) {
							bigdata = new Object();
							bigdata.id = data[key].id;
							bigdata.description = data[key].description + " ("+data[key].amounttime+")";
						
							myCars[cntr]=bigdata;       						
							cntr = cntr + 1;
						}
						person = new Object();
						person.items = myCars;
						person.identifier = 'id';
						person.label = 'description';
						return person;
						
					}else{
						window.console &amp;&amp; console.log(data.id);
						window.console &amp;&amp; console.log(data.value);
						bigdata = new Object();
						bigdata.id = data.id;
						bigdata.description = data.description;
						
						
						var myCars=new Array(); // regular array (add an optional integer
						myCars[0]=bigdata;       						
						
						person = new Object();
						person.items = myCars;
						person.identifier = 'id';
						person.label = 'description';
						return person;
						
						
					}
				}
			 }
			function fillServices(id){
				
				window.console &amp;&amp; console.log("svcid "+id);
				
				  standbydlg = new dojox.widget.Standby({
					  target: "editApptDialog"
				  });
				document.body.appendChild(standbydlg.domNode);
				standbydlg.show();
				var deferred = dojo.xhrGet( {
					url : "myschedule/jsonapptsvc?apptid="+id,
					handleAs: "json",
					preventCache: true,
					load : function(data, newValue) {
							window.console &amp;&amp; console.log("the data: "+data);
							var svcid = data[0].id;
							var svcname = data[0].amounttime;
							stateStore = data;
							var tdata = Trax(JSON.stringify(stateStore));
							
							var pstore = new dojo.data.ItemFileReadStore({
										   'data':tdata
									  });
							window.console &amp;&amp; console.log(tdata);
							
							try {
								var widg1=dijit.byId('editApptDialog'); 
								var cwidget = dijit.byId("editselect");
								if(cwidget){
									cwidget.reset();
									dijit.byId('progButton').set('label','Select one');dijit.byId('progButton').set('value','');
									cwidget.store = pstore;
									cwidget.setValue(svcid);
								}else{
									var box = new dijit.form.FilteringSelect({
										id: "editselect",
										name: "service",
										value: svcid,
										displayedValue:svcname,
										autocomplete  : true,
										required      : true,
										 onChange      : function(action) {setEditEndTime(); },
										store: pstore,
										searchAttr: "description"
									}, "editselect");			
									box.setValue(svcid);
								}
								
								window.console &amp;&amp; console.log(widg1);
							 }catch(e){
									var box = new dijit.form.FilteringSelect({
										id: "editselect",
										name: "service",
										autocomplete  : true,
										value: svcid,
										displayedValue:svcname,
										required      : true,
										 onChange      : function(action) {setEditEndTime(); },
										store: pstore,
										searchAttr: "description"
									}, "editselect");			      
									box.setValue(svcid);   
							 }
							 standbydlg.hide();
							 return data;
						},
					error: function(error) {
								window.console &amp;&amp; console.log("An unexpected error occurred: " + error);
								standbydlg.hide();
								window.location.reload();
							}													
				});			
				return deferred;
			}
			function addTimeBlockDialog(){
				var cwtd_startdatetime = dijit.byId("choosewhattodo_startdatetime").attr("value");
				var cwtd_enddatetime = dijit.byId("choosewhattodo_enddatetime").attr("value");
				var cwtd_staffid = dijit.byId("choosewhattodo_staffid").attr("value");
				
				var id = cwtd_staffid;
				var newValue = new Date(cwtd_startdatetime);
				var timeblock_enddate = new Date(cwtd_enddatetime);
				var timeblockwidget = dijit.byId("c_personalselectdate");
				dijit.byId("isThisAgendaViewFlag").set("value","true");
				var dayte = "";
				try{
					dayte = dojo.date.locale.format(newValue, {datePattern: "yyyy-MM-dd", selector: "date"});
				}catch(err){
					dayte = newValue;
				}
				document.getElementById("hPersonalSelectDate").value=dayte;
				timeblockwidget.set("value",newValue);
					
				$('#updatepersonalbutton').hide();
				$('#savepersonalbutton').show();
				
				var iscancelled = false;

				var apptdate = newValue;
				var yearapptdate = apptdate.getFullYear();
				var monthapptdate = apptdate.getMonth()+1;
				var dayapptdate = apptdate.getDate();

				var endhour = timeblock_enddate.getHours();
				var endmin = timeblock_enddate.getMinutes();
				var eap = "am";
				if (endhour   > 11) { eap = "pm";        }
				if (endhour   > 12) { endhour = endhour - 12; }
				if (endhour   == 0) { endhour = 12;        }
				
				var beginhour = newValue.getHours();
				var beginmin = newValue.getMinutes();
				var ap = "am";
				if (beginhour   > 11) { ap = "pm";        }
				if (beginhour   > 12) { beginhour = endhour - 12; }
				if (beginhour   == 0) { beginhour = 12;        }

				var staffforappt = cwtd_staffid;
				var staffwidget = dijit.byId("fapptstaff_personal");
				if(staffwidget){
					staffwidget.set("value",staffforappt);
				}
		
				var fwidget = dijit.byId("personalhour");
				if(fwidget){
					fwidget.setValue(beginhour);
				}
				
				var editmin = dijit.byId("personalminute");
				if(beginmin == 0 || beginmin == '0'){
					beginmin = '00';
				}
				if(beginmin){
					editmin.setValue(new String(beginmin));
				}
				var editampm = dijit.byId("personalampm");
				if(editampm){
					editampm.setValue(ap.toLowerCase());
				}

				// end time
				var fewidget = dijit.byId("personalendhour");
				if(fewidget){
					fewidget.setValue(endhour);
				}
				
				var endeditmin = dijit.byId("personalendminute");
				if(endmin == 0 || endmin == '0'){
					endmin = '00';
				}
				if(endmin){
					endeditmin.setValue(new String(endmin));
				}
				var endeditampm = dijit.byId("personalendampm");
				if(endeditampm){
					endeditampm.setValue(eap.toLowerCase());
				}				
				
				dijit.byId('personaledit').set("value","false");
				dijit.byId('personalDialog').show();
				
			}						
			
			function createAppointmentForAgendaView(){
				dijit.byId("fedithour").setDisabled(false);
				dijit.byId("editminute").setDisabled(false);
				dijit.byId("editampm").setDisabled(false);
				dijit.byId("editdialogprice").setDisabled(false);
				dijit.byId("editdialognotes").setDisabled(false);
				dijit.byId("editsavebutton").setDisabled(false);
				dijit.byId("editcancelbutton").setDisabled(false);
				dijit.byId("editnsbutton").setDisabled(false);
				dijit.byId("editcobutton").setDisabled(false);
				
				var cwtd_startdatetime = dijit.byId("choosewhattodo_startdatetime").attr("value");
				var cwtd_enddatetime = dijit.byId("choosewhattodo_enddatetime").attr("value");
				var cwtd_staffid = dijit.byId("choosewhattodo_staffid").attr("value");
				dijit.byId("c_editclientname_id").setAttribute('disabled', false);
				dijit.byId('editApptDialog').reset();
				dijit.byId('progButton').set('label','Select one');dijit.byId('progButton').set('value','');
				dijit.byId("isThisEditAgendaViewFlag").set("value","true");
				dijit.byId('isThisADDAgendaViewFlag').set("value","true");
				setEditTab();
				var	svcname = "";
				var svctype = "";
				var svcid = "";
				
				var dsrvselect = '';
				var iscancelled = false;

				var apptdate = new Date(cwtd_startdatetime);
				var apptenddate = new Date(cwtd_enddatetime);
				var yearapptdate = apptdate.getFullYear();
				var monthapptdate = apptdate.getMonth()+1;
				var dayapptdate = apptdate.getDate();
	
				var calendar = dijit.byId("c_editselectdate");
				window.console &amp;&amp; console.log('calendar value: '+calendar.value);
				calendar.set('value',apptdate);
				
				var staffforappt = cwtd_staffid;
				
				var endhour = apptenddate.getHours();
				var endmin = zeroFill(apptenddate.getMinutes(),2);
				var eap = "am";
				if (endhour   > 11) { eap = "pm";        }
				if (endhour   > 12) { endhour = endhour - 12; }
				if (endhour   == 0) { endhour = 12;        }
				
				var beginhour = apptdate.getHours();
				var beginmin = apptdate.getMinutes();
				var ap = "am";
				if (beginhour   > 11) { ap = "pm";        }
				if (beginhour   > 12) { beginhour = beginhour - 12; }
				if (beginhour   == 0) { beginhour = 12;        }
	
				var staffwidget = dijit.byId("fapptstaff_edit");
				if(staffwidget){
					window.console &amp;&amp; console.log("STAFF FOR APPT IS: " +staffforappt);
					staffwidget.set("value",staffforappt);
				}
				
				var fwidget = dijit.byId("fedithour");
				if(fwidget){
					
					fwidget.set("value",beginhour);
				}
				
				var editmin = dijit.byId("editminute");
				if(beginmin == 0 || beginmin == '0'){
					beginmin = '00';
				}
				if(editmin){
					editmin.set("value",new String(beginmin));
				}
				var editampm = dijit.byId("editampm");
				if(editampm){
					editampm.set("value",ap.toLowerCase());
				}
				// end time
				var fewidget = dijit.byId("fendedithour");
				if(fewidget){
					window.console &amp;&amp; console.log("endhour: "+endhour);
					fewidget.set("value",endhour);
				}
				var endeditmin = dijit.byId("endeditminute");
				if(endmin == 0){
					endmin = '00';
				}
				if(endeditmin){
					window.console &amp;&amp; console.log("endmin: "+endmin);
					endeditmin.set("value",endmin);
				}
				var endeditampm = dijit.byId("endeditampm");
				if(endeditampm){
					window.console &amp;&amp; console.log("eap.toLowerCase(): "+eap.toLowerCase());
					endeditampm.set("value",eap.toLowerCase());
				}
				
			 	var edittabs = dijit.byId("myRecurTabContainer");
			 	edittabs.startup();
			 	edittabs.resize();
			 	
			 	
				var dlg = dijit.byId('editApptDialog');
				
				if( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ) {
					dlg._relativePosition = new Object();
				}				
				
				dlg.show();
				if( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ) {
					dlg._relativePosition = new Object();
				}				
				setEditTab();
			}
			function setEditTab(){
				var addAppt2 = dijit.byId('isThisADDAgendaViewFlag').get("value");
				if(addAppt2 == "true"){
					dojo.style("hideShowRecur", 'display', '');
					dojo.style("editDialogTab2Message", 'display', 'none');
				}else{
					dojo.style("hideShowRecur", 'display', 'none');
					dojo.style("editDialogTab2Message", 'display', '');
				}
			}
			function setEditApptDialogWithFCEvent(event){
				dijit.byId('editApptDialog').reset();
				dijit.byId('progButton').set('label','Select one');dijit.byId('progButton').set('value','');
				dijit.byId("isThisEditAgendaViewFlag").set("value","true");
				dijit.byId('isThisADDAgendaViewFlag').set("value","false");
				setEditTab();
				var status = event.appointmentstatus;
				var firstname =  "";
				var lastname = "";
				if(event.clientid != null){
					firstname = event.clientfirstname;
					lastname = event.clientlastname;
					dijit.byId("c_editclientname_id").set('value',event.clientid);
					dijit.byId("c_editclientname_id").setAttribute('disabled', true);
				}
				
				if( status == 'CHECKED_OUT'){
					dijit.byId("fedithour").setDisabled(true);
					dijit.byId("editminute").setDisabled(true);
					dijit.byId("editampm").setDisabled(true);
					dijit.byId("editdialogprice").setDisabled(true);
					dijit.byId("editdialognotes").setDisabled(true);
					dijit.byId("editsavebutton").setDisabled(true);
					dijit.byId("editcancelbutton").setDisabled(true);
					dijit.byId("editnsbutton").setDisabled(true);
					dijit.byId("editcobutton").setDisabled(true);
				}else{
					dijit.byId("fedithour").setDisabled(false);
					dijit.byId("editminute").setDisabled(false);
					dijit.byId("editampm").setDisabled(false);
					dijit.byId("editdialogprice").setDisabled(false);
					dijit.byId("editdialognotes").setDisabled(false);
					dijit.byId("editsavebutton").setDisabled(false);
					dijit.byId("editcancelbutton").setDisabled(false);
					dijit.byId("editnsbutton").setDisabled(false);
					dijit.byId("editcobutton").setDisabled(false);
					
				}
				if(event.requested_image_path != null){
					if(event.requested_image_path == 'yellow'){	
            			dijit.byId("progButton").set("label","Yellow star");
            			dijit.byId("progButton").set("value","yellow");
					}
					if(event.requested_image_path == 'red'){	
            			dijit.byId("progButton").set("label","Red star");
            			dijit.byId("progButton").set("value","red");
					}
				}
				if(event.servicename == null){
				}else{
					svcname = event.servicename;
				}
				
				var svctype = "";
				if(event.servicetype == null){
				}else{
					svctype = event.servicetype;
				}
				
				
				if(event.serviceid == null){
				}else{
					svcid = event.serviceid;
				}
				
				var dsrvselect = '';
				dsrvselect = 'editselect';
				var srvselect = dijit.byId(dsrvselect);
				if(srvselect){
					srvselect.set("value",svcid);
				}						
				var iscancelled = false;
				if(status != 'CANCELED'){
					iscancelled = false;
				}else{
					iscancelled = true;
				}
				var apptdate = event.appointmentdate;//new Date(event.appointmentdate);
				var yearapptdate = apptdate.getFullYear();
				var monthapptdate = apptdate.getMonth()+1;
				var dayapptdate = apptdate.getDate();
	
				var calendar = dijit.byId("c_editselectdate");
				window.console &amp;&amp; console.log('calendar value: '+calendar.value);
				var realdate = event.realdate;
				calendar.set('value',realdate);
				
				var staffforappt = event.staffid;
				
				var endhour = event.endhour;
				var endmin = zeroFill(event.endmin,2);
				var eap = event.endampm;
				
				var beginhour = event.beginhour;
				var beginmin = event.beginmin;
				var ap = event.beginampm;
	
				var staffwidget = dijit.byId("fapptstaff_edit");
				if(staffwidget){
					window.console &amp;&amp; console.log("STAFF FOR APPT IS: " +staffforappt);
					staffwidget.set("value",staffforappt);
				}
				
				var fwidget = dijit.byId("fedithour");
				if(fwidget){
					
					fwidget.set("value",beginhour);
				}
				
				var editmin = dijit.byId("editminute");
				if(beginmin == 0 || beginmin == '0'){
					beginmin = '00';
				}
				if(editmin){
					editmin.set("value",new String(beginmin));
				}
				var editampm = dijit.byId("editampm");
				if(editampm){
					editampm.set("value",event.beginampm.toLowerCase());
				}
	
				// end time
				var fewidget = dijit.byId("fendedithour");
				if(fewidget){
					
					fewidget.set("value",endhour);
				}
				
				var endeditmin = dijit.byId("endeditminute");
				if(endmin == 0){
					endmin = '00';
				}
				if(endeditmin){
					endeditmin.set("value",endmin);
				}
				var endeditampm = dijit.byId("endeditampm");
				if(endeditampm){
					endeditampm.set("value",event.endampm.toLowerCase());
				}
				
				var svccost = "";
				if(event.price == null){
					svccost = "0.00";
				}else{
					svccost = event.price;
				}
	
					
				var stateStore = null;
				
				var id = "0";
				id = event.appointmentid;
				
				var notes = "";
				if(event.appointmentnotes == null){
				}else{
					notes = event.appointmentnotes;
				}
				
				var dapptid = '';
				dapptid = 'editdialogapptid';
	
				var d = dijit.byId(dapptid);
				d.set("value",id);
				
				var erp = "0";
				erp = event.recur_parent;
				var e_r_p = dijit.byId('edit_recur_parent');
				e_r_p.set("value",erp);
				
				
				var dsrv = '';
				dsrv = 'editdialogservice';
	
				var srv = dijit.byId(dsrv);
				srv.set("value",svcname);
	
				var dsrvt = '';
				dsrvt = 'editdialogservicetype';
	
				var srvtype = dijit.byId(dsrvt);
				srvtype.set("value",svctype);
	
				var dsrvti = '';
				dsrvti = 'editdialogsvcid';
	
				var servid = dijit.byId(dsrvti);
				servid.set("value",svcid);
	
				var dpr = '';
				dpr = 'editdialogprice';
	
				var pr = dojo.byId(dpr);
				window.console &amp;&amp; console.log("setEditApptDialogWithFCEvent svccost: "+svccost);
				pr.value =formatCurrency(svccost);
				
				var dno = '';
				dno = 'editdialognotes';
	
				var dnotes = dojo.byId(dno);
				dnotes.value =notes;
				
				var dlg = dijit.byId('editApptDialog');
				dlg.show();
				
			}
			function noajax(aid){
				StillNeedsValidating=false;
				standby.hide();
				
				if(appointmentsArray.length > 0){
					dijit.byId('editApptDialog').reset();
					dijit.byId('progButton').set('label','Select one');dijit.byId('progButton').set('value','');
					dijit.byId("isThisEditAgendaViewFlag").set("value","false");
					dijit.byId('isThisADDAgendaViewFlag').set("value","false");
					setEditTab();
					for(var key in appointmentsArray) {
						var findappt = appointmentsArray[key];
						if(findappt.appointmentid == aid){
							var status = findappt.appointmentstatus;
							var firstname =  "";
							var lastname = "";
							if(findappt.clientid != null){
								firstname = findappt.firstname;
								lastname = findappt.lastname;
								dijit.byId("c_editclientname_id").set('value',findappt.clientid);
								dijit.byId("c_editclientname_id").setAttribute('disabled', true);
							}
							
							if( status == 'CHECKED_OUT'){
								dijit.byId("fedithour").setDisabled(true);
								dijit.byId("editminute").setDisabled(true);
								dijit.byId("editampm").setDisabled(true);
								dijit.byId("editdialogprice").setDisabled(true);
								dijit.byId("editdialognotes").setDisabled(true);
								dijit.byId("editsavebutton").setDisabled(true);
								dijit.byId("editcancelbutton").setDisabled(true);
								dijit.byId("editnsbutton").setDisabled(true);
								dijit.byId("editcobutton").setDisabled(true);
							}else{
								dijit.byId("fedithour").setDisabled(false);
								dijit.byId("editminute").setDisabled(false);
								dijit.byId("editampm").setDisabled(false);
								dijit.byId("editdialogprice").setDisabled(false);
								dijit.byId("editdialognotes").setDisabled(false);
								dijit.byId("editsavebutton").setDisabled(false);
								dijit.byId("editcancelbutton").setDisabled(false);
								dijit.byId("editnsbutton").setDisabled(false);
								dijit.byId("editcobutton").setDisabled(false);
								
							}
							if(findappt.servicename == null){
							}else{
								svcname = findappt.servicename;
							}
							
							var svctype = "";
							if(findappt.servicetype == null){
							}else{
								svctype = findappt.servicetype;
							}
							
							
							if(findappt.serviceid == null){
							}else{
								svcid = findappt.serviceid;
							}
							
							var dsrvselect = '';
							dsrvselect = 'editselect';
							var srvselect = dijit.byId(dsrvselect);
							if(srvselect){
								srvselect.set("value",svcid);
							}						
							var iscancelled = false;
							if(status != 'CANCELED'){
								iscancelled = false;
							}else{
								iscancelled = true;
							}
							var apptdate = new Date(findappt.appointmentdate);
							var yearapptdate = apptdate.getFullYear();
							var monthapptdate = apptdate.getMonth()+1;
							var dayapptdate = apptdate.getDate();
			
							var calendar = dijit.byId("c_editselectdate");
							window.console &amp;&amp; console.log('calendar value: '+calendar.value);
							var realdate = new Date(apptdate.getUTCFullYear(),apptdate.getUTCMonth(),apptdate.getUTCDate());
							calendar.set('value',realdate);
							
							var staffforappt = findappt.staffid;
							
							var endhour = findappt.endhr;
							var endmin = zeroFill(findappt.endmin,2);
							var eap = findappt.endampm;
							
							var beginhour = findappt.beginhr;
							var beginmin = findappt.beginmin;
							var ap = findappt.beginampm;
			
							var staffwidget = dijit.byId("fapptstaff_edit");
							if(staffwidget){
								window.console &amp;&amp; console.log("STAFF FOR APPT IS: " +staffforappt);
								staffwidget.set("value",staffforappt);
							}
							
							var fwidget = dijit.byId("fedithour");
							if(fwidget){
								
								fwidget.set("value",beginhour);
							}
							
							var editmin = dijit.byId("editminute");
							if(beginmin == 0 || beginmin == '0'){
								beginmin = '00';
							}
							if(editmin){
								editmin.set("value",new String(beginmin));
							}
							var editampm = dijit.byId("editampm");
							if(editampm){
								editampm.set("value",ap.toLowerCase());
							}
			
							// end time
							var fewidget = dijit.byId("fendedithour");
							if(fewidget){
								
								fewidget.set("value",endhour);
							}
							
							var endeditmin = dijit.byId("endeditminute");
							if(endmin == 0){
								endmin = '00';
							}
							if(endeditmin){
								endeditmin.set("value",endmin);
							}
							var endeditampm = dijit.byId("endeditampm");
							if(endeditampm){
								endeditampm.set("value",eap.toLowerCase());
							}
							
							var svccost = "";
							if(findappt.price == null){
								svccost = "0.00";
							}else{
								svccost = findappt.price;
							}

								
							var stateStore = null;
							
							var id = "0";
							id = findappt.appointmentid;
							
							var notes = "";
							if(findappt.notes == null){
							}else{
								notes = findappt.notes;
							}
							
							var dapptid = '';
							dapptid = 'editdialogapptid';
			
							var d = dijit.byId(dapptid);
							d.set("value",id);
							
							var erp = "0";
							erp = findappt.recur_parent;
							var e_r_p = dijit.byId('edit_recur_parent');
							e_r_p.set("value",erp);
							
							var dsrv = '';
							dsrv = 'editdialogservice';
			
							var srv = dijit.byId(dsrv);
							srv.set("value",svcname);
			
							var dsrvt = '';
							dsrvt = 'editdialogservicetype';
			
							var srvtype = dijit.byId(dsrvt);
							srvtype.set("value",svctype);
			
							var dsrvti = '';
							dsrvti = 'editdialogsvcid';
			
							var servid = dijit.byId(dsrvti);
							servid.set("value",svcid);
			
							var dpr = '';
							dpr = 'editdialogprice';
			
							var pr = dojo.byId(dpr);
							pr.value =formatCurrency(svccost);
							
							var dno = '';
							dno = 'editdialognotes';
			
							var dnotes = dojo.byId(dno);
							dnotes.value =notes;								
						}
					}
				}
			}
			function doAjax(id,whichdlg) {
				if(whichdlg=='editApptDialog'){
					var donotdoget = true;
					if(donotdoget){
						StillNeedsValidating=false;
						noajax(id);
						standby.hide();
					}else{
						fillServices(id);
						var deferred = dojo.xhrGet( {
							url : "myschedule/appt?apptid="+id,
							handleAs: "text",
							preventCache: true,
							load : function(response, newValue) {
								dijit.byId('editApptDialog').reset();
								dijit.byId('progButton').set('label','Select one');dijit.byId('progButton').set('value','');
								// handle response codes
								// do something with returned data
								//window.console &amp;&amp; console.log("the appointment object returned: "+response);
								 var isJSON;
								 var data;
									try {
										data = JSON.parse(response);
										isJSON = true;
									}
									catch (e) {
										isJSON = false;
									}
	
									if (isJSON) {
										// data is already parsed, so just use it
										// handle response codes
										// do something with returned data
										
										if(data.constructor == Array){
										
											for(var key in data) {
												var status = data[key].status;
												var firstname =  "";
												var lastname = "";
												if(data[key].client != null){
													firstname = data[key].client.firstName;
													lastname = data[key].client.lastName;
													dijit.byId("c_editclientname_id").set('value',data[key].client.id);
													dijit.byId("c_editclientname_id").setAttribute('disabled', true);
												}
												
												if( status == 'CHECKED_OUT'){
													dijit.byId("fedithour").setDisabled(true);
													dijit.byId("editminute").setDisabled(true);
													dijit.byId("editampm").setDisabled(true);
													dijit.byId("editdialogprice").setDisabled(true);
													dijit.byId("editdialognotes").setDisabled(true);
													dijit.byId("editsavebutton").setDisabled(true);
													dijit.byId("editcancelbutton").setDisabled(true);
													dijit.byId("editnsbutton").setDisabled(true);
													dijit.byId("editcobutton").setDisabled(true);
												}else{
													dijit.byId("fedithour").setDisabled(false);
													dijit.byId("editminute").setDisabled(false);
													dijit.byId("editampm").setDisabled(false);
													dijit.byId("editdialogprice").setDisabled(false);
													dijit.byId("editdialognotes").setDisabled(false);
													dijit.byId("editsavebutton").setDisabled(false);
													dijit.byId("editcancelbutton").setDisabled(false);
													dijit.byId("editnsbutton").setDisabled(false);
													dijit.byId("editcobutton").setDisabled(false);
													
												}
											
												var sbeginetimex = data[key].s_beginDateTime;
	
												var sendetimex = data[key].s_endDateTime;
	
												var iscancelled = false;
												if(data[key].cancelled == null || data[key].cancelled == 'false'){
													iscancelled = false;
												}else{
													iscancelled = data[key].cancelled;
												}
												var apptdate = new Date(data[key].appointmentDate);
												var yearapptdate = apptdate.getFullYear();
												var monthapptdate = apptdate.getMonth()+1;
												var dayapptdate = apptdate.getDate();
	
												var calendar = dijit.byId("c_editselectdate");
												window.console &amp;&amp; console.log('calendar value: '+calendar.value);
												var realdate = new Date(apptdate.getUTCFullYear(),apptdate.getUTCMonth(),apptdate.getUTCDate());
												calendar.set('value',realdate);
												
												var endtime = new Date(data[key].endDateTime.time);
												var endhour = endtime.getHours();
												var endmin = endtime.getMinutes();
												var eap = "am";
												if (endhour   > 11) { eap = "pm";        }
												if (endhour   > 12) { endhour = endhour - 12; }
												if (endhour   == 0) { endhour = 12;        }
												
												var begintime = new Date(data[key].beginDateTime.time);
												var beginhour = begintime.getHours();
												var beginmin = begintime.getMinutes();
												var ap = "am";
												if (beginhour   > 11) { ap = "pm";        }
												if (beginhour   > 12) { beginhour = beginhour - 12; }
												if (beginhour   == 0) { beginhour = 12;        }
	
												var fwidget = dijit.byId("fedithour");
												var coln = sbeginetimex.indexOf(':');
												beginhour = sbeginetimex.substring(0,coln);
												if(fwidget){
													
													fwidget.setValue(beginhour);
												}
												
												var editmin = dijit.byId("editminute");
												beginmin = sbeginetimex.substring(coln+1,coln+3);
												if(beginmin == 0){
													beginmin = '00';
												}
												if(editmin){
													editmin.setValue(new String(beginmin));
												}
												var editampm = dijit.byId("editampm");
												ap = sbeginetimex.substring(sbeginetimex.length,sbeginetimex.length-2);
												if(editampm){
													editampm.setValue(ap.toLowerCase());
												}
	
												// end time
												var fewidget = dijit.byId("fendedithour");
												var coln = sendetimex.indexOf(':');
												endhour = sendetimex.substring(0,coln);
												if(fewidget){
													
													fewidget.setValue(endhour);
												}
												
												var endeditmin = dijit.byId("endeditminute");
												endmin = sendetimex.substring(coln+1,coln+3);
												if(endmin == 0){
													endmin = '00';
												}
												if(endeditmin){
													endeditmin.setValue(new String(endmin));
												}
												var endeditampm = dijit.byId("endeditampm");
												eap = sendetimex.substring(sendetimex.length,sendetimex.length-2);
												if(endeditampm){
													endeditampm.setValue(eap.toLowerCase());
												}
												
												var svccost = "";
												if(data[key].service1cost == null){
													svccost = "0.00";
												}else{
													svccost = data[key].service1cost;
												}
												
												id = data[key].id;
												if(data[key].servicename1 == null){
												}else{
													svcname = data[key].servicename1;
												}
												
												var svctype = "";
												if(data[key].service1type == null){
												}else{
													svctype = data[key].service1type;
												}
												
												
												if(data[key].service1id == null){
												}else{
													svcid = data[key].service1id;
												}
												
												var dsrvselect = '';
												dsrvselect = 'editselect';
	
												var stateStore = null;
												id = id.substring(id.length-2,id.length);
												
												var id = "0";
												id = data[key].id;
												
												var notes = "";
												if(data[key].notes == null){
												}else{
													notes = unescape(data[key].notes);
												}
	
												
												
												var dapptid = '';
												dapptid = 'editdialogapptid';
	
												var d = dijit.byId(dapptid);
												d.set("value",id);
												
												var erp = "0";
												erp = data[key].recur_parent;
												var e_r_p = dijit.byId('edit_recur_parent');
												e_r_p.set("value",erp);
												
												var dsrv = '';
												dsrv = 'editdialogservice';
	
												var srv = dijit.byId(dsrv);
												srv.set("value",svcname);
	
												var dsrvt = '';
												dsrvt = 'editdialogservicetype';
	
												var srvtype = dijit.byId(dsrvt);
												srvtype.set("value",svctype);
	
												var dsrvti = '';
												dsrvti = 'editdialogsvcid';
	
												var servid = dijit.byId(dsrvti);
												servid.set("value",svcid);
	
												var dpr = '';
												dpr = 'editdialogprice';
	
												var pr = dojo.byId(dpr);
												pr.value =formatCurrency(svccost);
												
												var dno = '';
												dno = 'editdialognotes';
	
												var dnotes = dojo.byId(dno);
												dnotes.value =notes;
											}
											
										}else{
												sometext = data[0].description;
												window.console &amp;&amp; console.log(sometext);
										}
									}
									else {
										// try treating it as XML
									}		
								standbydlg.hide();													
								return response;
							},
							error: function(error) {
										window.console &amp;&amp; console.log("An unexpected error occurred: " + error);
										standbydlg.hide();
										window.location.reload();
									}													
						});		
					}
					
					//clearDialog();
					var dlg = dijit.byId(whichdlg);
					dlg.show();
				}else{
				// personal time
					displayPersonalDialog(id,true);

				}					
			}
			
			function formatCurrency(num) {
				num = isNaN(num) || num === '' || num === null ? 0.00 : num;
				return parseFloat(num).toFixed(2);
			}
			function remove(id)
			{
				window.console &amp;&amp; console.log("ENTERED remove() id: "+id);
				return (elem=document.getElementById(id)).parentNode.removeChild(elem);
			}
			function deletePersonal(){
				standby.show();
				var id = dijit.byId("editpersonalapptid").get("value");
				var isthisagendaviewflagval = "false"; 
				isthisagendaviewflagval = dijit.byId("isThisAgendaViewFlag").get("value");
				window.console &amp;&amp; console.log("delete editpersonalapptid id : "+id);
	            dojo.xhrGet(
	            		{
			                url: "myschedule/delete?apptid="+id,
			                preventCache: true,
			                handle: function(data) {
			                	window.console &amp;&amp; console.log("SUCCESS FROM DELETE PERSONAL");
								try{
									window.console &amp;&amp; console.log("before entering displayEditTodaysAgenda deleteappointment ");
									var rawdate = dijit.byId("c_editselectdate").attr("value");
									window.console &amp;&amp; console.log("c_editselectdate: "+rawdate);
									var postdate = dojo.date.locale.format(rawdate, {datePattern: "yyyy-MM-dd", selector: "date"})
									if(isthisagendaviewflagval == "false"){
										displayEditTodaysAgenda(postdate);
									}else{
										window.console &amp;&amp; console.log("UPDATE THE AGENDA VIEW FOR THE DELETED EVENT");
										loadAgenda1();
									}
									standby.hide();
								}catch(err){
									window.console &amp;&amp; console.log("deleteappointment could not display todays agenda error message :\n "+err);
									standby.hide();
								}
			                },
			                error: function(error) {
			                	window.console &amp;&amp; console.log("ERROR FROM DELETE PERSONAL");
			                    window.console &amp;&amp; console.log(error);
			                    window.location.reload();
			                }
			            }	            		
	            
	            );							
			}
			
			function deleteAppointment(dialogFields){
				standby.show();
				var id = dijit.byId("editdialogapptid").attr("value");
				var erp = dijit.byId("edit_recur_parent").attr("value");
				var deletefuture = "false";
				if(erp != ''){
					var x = confirm("Do you wish to delete future appointments too?");
					if (x){
						deletefuture = "true";
					}else{
						deletefuture = "false";
					}
				}
				var isThisEditAgendaViewFlag = "false";
				isThisEditAgendaViewFlag = dijit.byId("isThisEditAgendaViewFlag").attr("value");
				window.console &amp;&amp; console.log("delete editdialogapptid id : "+id);
	            dojo.xhrGet(
	            		{
			                url: "myschedule/delete?apptid="+id+"&amp;df="+deletefuture,
			                preventCache: true,
			                handle: function(data) {
			                	window.console &amp;&amp; console.log("SUCCESS FROM DELETE APPOINTMENT");
								try{
									window.console &amp;&amp; console.log("before entering displayEditTodaysAgenda deleteappointment ");
									var rawdate = dijit.byId("c_editselectdate").attr("value");
									window.console &amp;&amp; console.log("c_editselectdate: "+rawdate);
									var postdate = dojo.date.locale.format(rawdate, {datePattern: "yyyy-MM-dd", selector: "date"})
									if(isThisEditAgendaViewFlag == "false"){
										displayEditTodaysAgenda(postdate);	
									}else{
										loadAgenda1();
									}
									standby.hide();
								}catch(err){
									window.console &amp;&amp; console.log("deleteappointment could not display todays agenda error message :\n "+err);
									standby.hide();
								}
			                },
			                error: function(error) {
			                	window.console &amp;&amp; console.log("ERROR FROM DELETE APPOINTMENT");
			                    window.console &amp;&amp; console.log(error);
			                    window.location.reload();
			                }
			            }	            		
	            
	            );				
			}
			
			function cancelAppointment(){
				
				fancy_confirm(
						  "Please Confirm Canceling",
						  "Are you sure you want to cancel? ",
						  function() {
							var newDate = document.getElementById("hEditSelectDate").value;
							var isThisEditAgendaViewFlag = "false";
							isThisEditAgendaViewFlag = dijit.byId("isThisEditAgendaViewFlag").attr("value");
							standby.show();
							var id = dijit.byId("editdialogapptid").attr("value");
							window.console &amp;&amp; console.log("cancel editdialogapptid id : "+id);
				            //Call the asynchronous xhrPost
				            dojo.xhrGet(
				            		{
						                url: "myschedule/cancel?apptid="+id,
										handleAs: "text",
										preventCache: true,
						                load: function(data) {
						                	window.console &amp;&amp; console.log("SUCCESS FROM CANCEL APPOINTMENT");
											try{
												window.console &amp;&amp; console.log("before entering displayEditTodaysAgenda cancel appointment ");
												var rawdate = dijit.byId("c_editselectdate").attr("value")
												window.console &amp;&amp; console.log("c_editselectdate: "+rawdate);
												var postdate = dojo.date.locale.format(rawdate, {datePattern: "yyyy-MM-dd", selector: "date"})
												if(isThisEditAgendaViewFlag == "false"){
													displayEditTodaysAgenda(postdate);
												}else{
													loadAgenda1();
												}
											    dijit.byId('editApptDialog').hide();
											    dijit.byId('editApptDialog').reset();
												
												dijit.byId('progButton').set('label','Select one');
												dijit.byId('progButton').set('value','');
												standby.hide();
											}catch(err){
												window.console &amp;&amp; console.log("cancel appointment could not display todays agenda error message :\n "+err);
												standby.hide();
											}
						                },
						                error: function(error) {
						                	window.console &amp;&amp; console.log("ERROR FROM CANCEL APPOINTMENT");
						                    window.console &amp;&amp; console.log(error);
						                    window.location.reload();
						                }
						            }	            		
				            
				            );							    
						  },
						  function() {
						    alert( "hooray, this content item lives on" );
						  }
						);				
			
				
			}
			function noShowAppointment(dialogFields){
				standby.show();
				var id = dijit.byId("editdialogapptid").attr("value");
				var isThisEditAgendaViewFlag = "false";
				isThisEditAgendaViewFlag = dijit.byId("isThisEditAgendaViewFlag").attr("value");
				window.console &amp;&amp; console.log("noshow editdialogapptid id : "+id);
	            dojo.xhrGet(
	            		{
			                url: "myschedule/noshow?apptid="+id,
			                preventCache: true,
			                handle: function(data) {
			                	window.console &amp;&amp; console.log("SUCCESS FROM NOSHOW APPOINTMENT");
								try{
									window.console &amp;&amp; console.log("before entering displayEditTodaysAgenda noshow appointment ");
									var rawdate = dijit.byId("c_editselectdate").attr("value")
									window.console &amp;&amp; console.log("c_editselectdate: "+rawdate);
									var postdate = dojo.date.locale.format(rawdate, {datePattern: "yyyy-MM-dd", selector: "date"})
									if(isThisEditAgendaViewFlag == "false"){
										displayEditTodaysAgenda(postdate);	
									}else{
										loadAgenda1();
										
									}
									standby.hide();
								}catch(err){
									window.console &amp;&amp; console.log("noshow could not display todays agenda error message :\n "+err);
									standby.hide();
								}
			                },
			                error: function(error) {
			                	window.console &amp;&amp; console.log("ERROR FROM NOSHOW APPOINTMENT");
			                    window.console &amp;&amp; console.log(error);
			                    window.location.reload();
			                }
			            }	            		
	            
	            );					
			}
			function saveAndCheckout(){
				var rawdate = dijit.byId("c_editselectdate").attr("value")
				var nowdate = new Date();
				nowdate.setHours(0);
				nowdate.setSeconds(0);
				nowdate.setMinutes(0);
				nowdate.setMilliseconds(0);
				
				rawdate.setHours(0);
				rawdate.setSeconds(0);
				rawdate.setMinutes(0);
				rawdate.setMilliseconds(0);
				var dothis = false;
				if(rawdate.valueOf() != nowdate.valueOf()){
					var conf = confirm("The Checkout date is different from todays date. Are you sure you want to Check Out?");

				    if(conf == true){
				    	window.console &amp;&amp; console.log("dothis is true");
				    	dothis = true;
				    }else{
				    	window.console &amp;&amp; console.log("dothis is false");
				    }					
				}else{
					window.console &amp;&amp; console.log("dothis is true");
					dothis = true;
				}
				if(dothis){
					var nextdeferred = new dojo.Deferred();
					updateAppointment(nextdeferred,true);
					nextdeferred.then(function(res){
							checkOutAppointment(res);
							
						},function(err){
							// This will be called when the deferred
							// is rejected
							window.console &amp;&amp; console.log("ERROR " + err);
					}
					);
				}
			}
			function checkOutAppointment(res){
				standby.show();
				 
				var isJSON;
				 var id = res;
				 var isThisEditAgendaViewFlag = "false";
				 isThisEditAgendaViewFlag = dijit.byId("isThisEditAgendaViewFlag").attr("value");
				 //window.console &amp;&amp; console.log("the appointment object returned: "+res);
				 var data;
					try {
						data = JSON.parse(res);
						isJSON = true;
					}
					catch (e) {
						isJSON = false;
					}
					if (isJSON) {
						if(data.constructor == Array){
							for(var key in data) {
								id = data[key].id;

							}
						}
					}			
					window.console &amp;&amp; console.log("checkout editdialogapptid id : "+id);
					dojo.xhrGet(
							{
								url: "myschedule/checkout?apptid="+id,
								preventCache: true,
								handle: function(data) {
									window.console &amp;&amp; console.log("SUCCESS FROM NOSHOW APPOINTMENT");
									try{
										window.console &amp;&amp; console.log("before entering displayEditTodaysAgenda checkout appointment ");
										var rawdate = dijit.byId("c_editselectdate").attr("value")
										window.console &amp;&amp; console.log("c_editselectdate: "+rawdate);
										var postdate = dojo.date.locale.format(rawdate, {datePattern: "yyyy-MM-dd", selector: "date"})
										if(isThisEditAgendaViewFlag == "false"){
											displayEditTodaysAgenda(postdate);	
										}else{
											loadAgenda1();
										}
										standby.hide();
									}catch(err){
										window.console &amp;&amp; console.log("checkout could not display todays agenda error message :\n "+err);
										standby.hide();
									}
								},
								error: function(error) {
									window.console &amp;&amp; console.log("ERROR FROM NOSHOW APPOINTMENT");
									window.console &amp;&amp; console.log(error);
									window.location.reload();
								}
							}	            		
					
					);					
			}
	function displayEditTodaysAgenda(newValue){
		window.console &amp;&amp; console.log("ENTERED displayEditTodaysAgenda");
		var dayte = "";
		var agendadate = "";
		try{
			window.console &amp;&amp; console.log("newValue: "+newValue);
			dayte = dojo.date.locale.format(newValue, {datePattern: "yyyy-MM-dd", selector: "date"});
			agendadate = dojo.date.locale.format(newValue, {datePattern: "MM-dd-yyyy", selector: "date"});
		}catch(err){
			window.console &amp;&amp; console.log("could not format the newValue date: "+ err);
			dayte = newValue;
			agendadate = newValue;
		}
		document.getElementById("hSelectDate").value=dayte;
		window.console &amp;&amp; console.log("displayEditTodaysAgenda dayte: "+dayte);
		var deferred = dojo.xhrGet( {
							url : "myschedule/agenda?date="+document.getElementById("hSelectDate").value,
							preventCache: true,
							handle : function(response, newValue) {
								// handle response codes
								// do something with returned data
								window.console &amp;&amp; console.log("the appointment object returned: "+response);
								 var isJSON;
								 var data;
									try {
										data = JSON.parse(response);
										isJSON = true;
									}
									catch (e) {
										isJSON = false;
									}

									if (isJSON) {
										// data is already parsed, so just use it
										// handle response codes
										// do something with returned data
										
										var mytable = document.getElementById("agenda");
										window.console &amp;&amp; console.log("past get id of agenda");
										
										var oldagendaheader = document.getElementById("agendadate");
										oldagendaheader.innerHTML = "Agenda for "+agendadate;
										
										
										
										for(var i = document.getElementById("agenda").rows.length; i > 1;i--)
										 {
											document.getElementById("agenda").deleteRow(i -1);
										 }
										var mycurrent_row,mycurrent_cell;
										mytable = document.getElementById("agenda");
										if(data.constructor == Array){
											appointmentsArray = [];
											customServicesPricesArray = [];
											for(var key in data) {
												if(global_selected_staff != ''){
													if(data[key].staff.id != global_selected_staff){
														continue;
													}
												}
												try{
												var sbeginetimex = data[key].s_beginDateTime;
												var sendetimex = data[key].s_endDateTime;
												window.console &amp;&amp; console.log("in for loop");

												var myTime = new Date(data[key].beginDateTime.timeInMillis);
												var myEndTime = new Date(data[key].endDateTime.timeInMillis);
												var endhh = myEndTime.getHours();
												var endmm = myEndTime.getMinutes();
												
												
												var hh = myTime.getHours();
												var mm = myTime.getMinutes();
												var ss = myTime.getSeconds();
												var ms = myTime.getMilliseconds();																
												var ap = "am";
												var endap = "am";
												
												if (hh   > 11) { ap = "pm";        }
												if (hh   > 12) { hh = hh - 12; }
												if (hh   == 0) { hh = 12;        }
												
												if (endhh   > 11) { endap = "pm";        }
												if (endhh   > 12) { endhh = endhh - 12; }
												if (endhh   == 0) { endhh = 12;        }
												
												var timetext = "Begin: " + hh + ":" + mm + " " + ap;
												var endtimetext = "End: " + endhh + ":" + zeroFill(endmm,2) + " " + endap;
											
											
											
												mycurrent_row = document.createElement("tr");
												
												mycurrent_row.setAttribute("id","appointment"+data[key].id);
												mycurrent_row.setAttribute("onMouseOver","this.className='highlight'");
												mycurrent_row.setAttribute("onMouseOut","this.className='normal'");
												mycurrent_cell = document.createElement("td");
												var svc = data[key].servicename1 + " $" + formatCurrency(data[key].service1cost);
												if(data[key].client != null){
													mycurrent_row.setAttribute("status",data[key].status);
													mycurrent_row.setAttribute("onClick","doAjax("+data[key].id+",'editApptDialog');");
													sometext = "STATUS: "+data[key].status +" "+data[key].client.firstName + " " + data[key].client.lastName + " "+sbeginetimex + " " + sendetimex + " " + svc;
												}else{
													mycurrent_row.setAttribute("status","PERSONAL");
													mycurrent_row.setAttribute("onClick","doAjax("+data[key].id+",'personalDialog');");
													sometext = "STATUS: "+data[key].status +" TIME BLOCK  "+data[key].personallabel + " " +sbeginetimex + " " + sendetimex + " ";
												}
												var datatext = document.createTextNode(" " + sometext);																
												window.console &amp;&amp; console.log("before data.id");
												mycurrent_cell.setAttribute("id","appointment"+data[key].id);
												window.console &amp;&amp; console.log("after data.id");
												mycurrent_cell.appendChild(datatext);												
												mycurrent_row.appendChild(mycurrent_cell);
												var tbody = mytable.getElementsByTagName('tbody')[0];
												tbody.appendChild(mycurrent_row);
													mytable.appendChild(tbody);		
													var agendaobject = data[key];			
													var clientobject = agendaobject.client;
													if(clientobject){
														window.console &amp;&amp; console.log("before data.id 2 "+clientobject);
														var getappt = new appointmentobject(data[key].staff.id,""+agendaobject.status,""+agendaobject.id,agendaobject.appointmentDate,""+agendaobject.service1id,""+agendaobject.servicename1,""+agendaobject.service1cost,""+agendaobject.client.id,""+agendaobject.client.firstName,""+agendaobject.client.lastName,""+agendaobject.notes,""+hh,""+mm,""+ap,""+endhh,""+zeroFill(endmm,2),""+endap,data[key].recur_parent,data[key].requested_image_path);
														window.console &amp;&amp; console.log("after data.id 2");												
														appointmentsArray.push(getappt);	
														window.console &amp;&amp; console.log("after append child");
														var custserviceprice = new customservicepriceobject(agendaobject.id,agendaobject.service1id,agendaobject.service1cost);
														customServicesPricesArray.push(custserviceprice);
														
													}else{
														window.console &amp;&amp; console.log("before data.id 3 "+clientobject);
														var getappt = new appointmentobject(data[key].staff.id,""+agendaobject.status,""+agendaobject.id,agendaobject.appointmentDate,""+agendaobject.service1id,""+agendaobject.servicename1,""+agendaobject.service1cost,"","","",""+agendaobject.notes,""+hh,""+mm,""+ap,""+endhh,""+zeroFill(endmm,2),""+endap,data[key].recur_parent);
														window.console &amp;&amp; console.log("after data.id 3");												
														appointmentsArray.push(getappt);	
														window.console &amp;&amp; console.log("after append child");
														var custserviceprice = new customservicepriceobject(agendaobject.id,agendaobject.service1id,agendaobject.service1cost);
														customServicesPricesArray.push(custserviceprice);
														
													}
												}catch(err){
													window.console &amp;&amp; console.log(err);
												}
											}
											
										}else{
												sometext = data[0].description;
												alert(sometext);
										
										}
									}
									else {
										// try treating it as XML
									}		
								window.console &amp;&amp; console.log("about to hide the standby");
								standby.hide();
								return response;
							}
						});	
	}
			function fancy_confirm(title, message, onYes, onNo) {
				  dijit.byId('id_dialog_button_1').attr("style", "color:crimson;font-weight:bold");
				  dijit.byId('id_dialog_button_1').attr("label", "Yes, Cancel");
				  var p = dijit.byId('id_dialog');
				  p.attr( "title", title );
				  dojo.byId('id_dialog_text').innerHTML = message;
				  p.execute = dojo.hitch( p, function() {
					if( dojo.isObject( arguments ) ) {
					  onYes();
					} else {
					  onNo();
					}
				  });
				  p.show();
			}
			function saveAddDialog(){
				standby.show();
				var firstname = dijit.byId('firstname_dlg').attr("value");
				firstname = toTitleCase(firstname);
				var lastname = dijit.byId('lastname_dlg').attr("value");
				lastname = toTitleCase(lastname);
				var phonenumber = dijit.byId('home_phonenumber_dlg').attr("value");

				var dob = '';
				var address1 = ''; 
				var address2 = ''; 
				var city = ''; 
				var state = ''; 
				var zip = ''; 
				var homephone = "";
				if(phonenumber != null){
					homephone = phonenumber;
				}
 
				var workphone = ''; 
				var cellphone = ''; 
				var email = ''; 
				dojo.xhrGet({
				  url: "clients/addclient?f="+firstname+"&amp;l="+lastname+"&amp;dob="+dob+"&amp;a1="+address1+"&amp;a2="+address2+"&amp;c="+city+"&amp;s="+state+"&amp;z="+zip+"&amp;wp="+workphone+"&amp;hp="+homephone+"&amp;cp="+cellphone+"&amp;e="+email,
				  handleAs: "json",
				  timeout: 5000,
				  preventCache: true,
				  load: function(response, ioArgs) {
					if(response == "SUCCESS"){
						loadClientsList();
						var widg = document.getElementById('upgraderequired');
						if(widg){
							widg.style.display = 'none';
						}
					}else if(response == "FAILURE"){
						var widg = document.getElementById('upgraderequired');
						if(widg){
							widg.style.display = 'inline';
						}
					}else{
						alert("First name and last name already exists.");
					}
					standby.hide();
					return response;
				  },
				  error: function(response, ioArgs) {
					window.console &amp;&amp; console.log("HTTP status code: " + ioArgs.xhr.status);
					standby.hide();
					window.location.reload();
					return response;
				  }
				});	 
			}			
			function addnewclient(){
				try{
					var dlg = dijit.byId('addClientDialog');
					dlg.reset();
					dlg.show();
				}catch(e){
					window.console &amp;&amp; console.log(e);
				}
			}	
	 function isAlive() {
		dojo.xhrPost(
				{
					url: "myschedule/isalive",
					content: {
					  },
					handleAs: "json",
					load: function(data) {
						window.console &amp;&amp; console.log("SUCCESS FROM CHECKING alive");
						window.console &amp;&amp; console.log("IS THERE AN APPOINTMENT CONFLICT? "+data);
						if(data == "true"){
							window.console &amp;&amp; console.log("still alive");
						}
					},
					error: function(error) {
						window.console &amp;&amp; console.log("NOT alive");
						window.console &amp;&amp; console.log("error: "+error);
						window.location.reload();
					}
				}	            		
		
		);		
	 }
	function addAppointmentForFC(nextdeferredcheckout){
		window.console &amp;&amp; console.log("SAVING APPOINTMENT FROM FORM");
		standby = new dojox.widget.Standby({
		  target: "myTabContainer"
		});
		document.body.appendChild(standby.domNode);
		standby.show();
		
		// beginning of update appointment code : getting values from dialog
		var staff_edit_id = dijit.byId("fapptstaff_edit").attr("value");
		var client_add_id = dijit.byId("c_editclientname_id").attr("value");
		var edithourval = "";
		var editminval = "";
		var editampmval = "";
		var endedithourval = "";
		var endeditminval = "";
		var endeditampmval = "";
		var c_editselectdateval = "";
		var c_raw_editselectdateval = "";
		var svcid = "";
		var newsvcid = "";
		var svctype = "";
		var cancel = "false";
		var svcprice = "";
		var notes = "";
		var whichtable = "agenda";
		var whichtabledate = "agendadate";
		var whichselectdate = "hSelectDate";
		var whichdialog="editApptDialog";

		newsvcid = dijit.byId("editselect").attr("value");
		svcid = dijit.byId("editdialogsvcid").attr("value");
		if(newsvcid != svcid){
			svcid = newsvcid;
		}
		svctype = dijit.byId("editdialogservicetype").attr("value");
		svcprice = formatCurrency(dijit.byId("editdialogprice").attr("value"));
		notes = dijit.byId("editdialognotes").attr("value");
		edithourval = dijit.byId("fedithour").get("value");
		editminval = dijit.byId("editminute").get("value");
		editampmval = dijit.byId("editampm").get("value");
		endedithourval = dijit.byId("fendedithour").get("value");
		endeditminval = dijit.byId("endeditminute").get("value");
		endeditampmval = dijit.byId("endeditampm").get("value");
		c_editselectdateval = dijit.byId("c_editselectdate").attr("value");
		c_raw_editselectdateval = dijit.byId("c_editselectdate").attr("value");
		c_editselectdateval = dojo.date.locale.format(c_editselectdateval, {datePattern: "yyyy-MM-dd", selector: "date"});
		notes = escape(notes);		
		// end of update appointment code : getting values from dialog
		
		var rawdate = c_raw_editselectdateval;
		var postdate = dojo.date.locale.format(rawdate, {datePattern: "yyyy-MM-dd", selector: "date"})
		
		var rawstaffid = staff_edit_id;
		window.console &amp;&amp; console.log("fapptstaff: "+rawstaffid);
		if(!rawstaffid){
			alert("Please select a staff");
			dijit.byId("fapptstaff_edit").focus();
			standby.hide();
			return false;
		}
		var rawcid = client_add_id;
		if(!rawcid){
			alert("Please select a client");
			dijit.byId("c_editclientname_id").focus();
			standby.hide();
			return false;
		}
		var rawsvcid = svcid;
		if(!rawsvcid){
			alert("Please select a service");
			dijit.byId("editdialogsvcid").focus();
			standby.hide();
			return false;
		}
		var rawhour = edithourval;
		if(!rawhour){
			alert("Please select a begin hour");
			dijit.byId("fedithour").focus();
			standby.hide();
			return false;
		}
		
		var rawminute = editminval;
		if(!rawminute){
			alert("Please select a begin minute");
			dijit.byId("editminute").focus();
			standby.hide();
			return false;
		}
		
		var rawampm = editampmval;
		if(!rawampm){
			alert("Please select a begin am / pm");
			dijit.byId("editampm").focus();
			standby.hide();
			return false;
		}
		
		var rawnotes = notes;
		
		var rawehour = endedithourval;
		var raweminute = endeditminval;
		var raweampm = endeditampmval;

		var deferred2 = dojo.xhrPost(
				{
					url: "myschedule/checkdatetimestaff",
					content: {
						staff: rawstaffid,
						hSelectDate: postdate,
						hour: rawhour,
						minute: rawminute,
						ampm: rawampm,
						ehour: rawehour,
						eminute: raweminute,
						eampm: raweampm
					  },
					handleAs: "json",
					load: function(data) {
						standby.hide();
						if(data == "true"){
							window.console &amp;&amp; console.log("THERE IS AN APPOINTMENT CONFLICT. DO YOU WISH TO BOOK APPOINTMENT ANYWAY?");
						}
					},
					error: function(error) {
						window.console &amp;&amp; console.log("ERROR FROM CHECKING APPOINTMENT");
						window.console &amp;&amp; console.log(error);
						standby.hide();
						window.location.reload();
					}
				}	            		
		
		);		
		var nextdeferred = deferred2.then(function(res){
				var scheduleanyways = "true";
				var deferredyn = new dojo.Deferred();
				if(res == "true"){

					var x = confirm("Requested appointment overlaps an existing one.  Do you want to schedule appointment anyway?");
					if (x){
						return "true";
					}else{
						return "false";
					}
				}else{
					res = "true";
				}
				return res;
				
			},function(err){
				// This will be called when the deferred
				// is rejected
				window.console &amp;&amp; console.log("ERROR " + err);
		}
		);
		nextdeferred.then(function(res){
			if(res == "true"){
				scheduleanyways(nextdeferredcheckout,postdate,rawstaffid, rawcid,rawsvcid,rawhour,rawminute,rawampm,rawnotes,rawehour,raweminute,raweampm);
				
			}else{
				window.console &amp;&amp; console.log("no scheduling");
			}
		},function(err){
			// This will be called when the deferred
			// is rejected
			window.console &amp;&amp; console.log("ERROR " + err);
		}
		);
		
		// clear inputs from form
		//dijit.byId("apptform").reset();
		// display todays agenda
		
	}	 
	function saveFormAppointment(dialogFields){
		window.console &amp;&amp; console.log("SAVING APPOINTMENT FROM FORM");
		standby = new dojox.widget.Standby({
		  target: "myTabContainer"
		});
		document.body.appendChild(standby.domNode);
		standby.show();
		var rawdate = dijit.byId("c_editselectdate").attr("value")
		window.console &amp;&amp; console.log("c_editselectdate: "+rawdate);
		var postdate = dojo.date.locale.format(rawdate, {datePattern: "yyyy-MM-dd", selector: "date"})
		window.console &amp;&amp; console.log("postdate: "+postdate);
		
		var rawstaffid = dijit.byId("fapptstaff").attr("value");
		window.console &amp;&amp; console.log("fapptstaff: "+rawstaffid);
		if(!rawstaffid){
			alert("Please select a staff");
			dijit.byId("fapptstaff").focus();
			standby.hide();
			return false;
		}
		var rawcid = dijit.byId("fapptclient").attr("value");
		window.console &amp;&amp; console.log("fapptclient: "+rawcid);
		if(!rawcid){
			alert("Please select a client");
			dijit.byId("fapptclient").focus();
			standby.hide();
			return false;
		}
		var rawsvcid = dijit.byId("formapptservice").attr("value");
		window.console &amp;&amp; console.log("formapptservice: "+rawsvcid);
		if(!rawsvcid){
			alert("Please select a service");
			dijit.byId("formapptservice").focus();
			standby.hide();
			return false;
		}
		var rawhour = dijit.byId("desiredhour").attr("value");
		window.console &amp;&amp; console.log("hour: "+ rawhour);
		if(!rawhour){
			alert("Please select a begin hour");
			dijit.byId("desiredhour").focus();
			standby.hide();
			return false;
		}
		
		var rawminute = dijit.byId("desiredminute").attr("value");
		window.console &amp;&amp; console.log("minute: "+rawminute);
		if(!rawminute){
			alert("Please select a begin minute");
			dijit.byId("desiredminute").focus();
			standby.hide();
			return false;
		}
		
		var rawampm = dijit.byId("desiredampm").attr("value");
		window.console &amp;&amp; console.log("ampm: "+rawampm);
		if(!rawampm){
			alert("Please select a begin am / pm");
			dijit.byId("desiredampm").focus();
			standby.hide();
			return false;
		}
		
		var rawnotes = dijit.byId("notes").attr("value");
		window.console &amp;&amp; console.log("notes: "+rawnotes);
		
		var rawehour = dijit.byId("desiredehour").attr("value");
		window.console &amp;&amp; console.log("ehour: "+ rawehour);
		
		var raweminute = dijit.byId("desiredeminute").attr("value");
		window.console &amp;&amp; console.log("eminute: "+raweminute);
		
		var raweampm = dijit.byId("desiredeampm").attr("value");
		window.console &amp;&amp; console.log("eampm: "+raweampm);
		var deferred2 = dojo.xhrPost(
				{
					url: "myschedule/checkdatetimestaff",
					content: {
						staff: rawstaffid,
						hSelectDate: postdate,
						hour: rawhour,
						minute: rawminute,
						ampm: rawampm,
						ehour: rawehour,
						eminute: raweminute,
						eampm: raweampm
					  },
					handleAs: "json",
					load: function(data) {
						window.console &amp;&amp; console.log("SUCCESS FROM CHECKING APPOINTMENT");
						window.console &amp;&amp; console.log("IS THERE AN APPOINTMENT CONFLICT? "+data);
						standby.hide();
						if(data == "true"){
							window.console &amp;&amp; console.log("THERE IS AN APPOINTMENT CONFLICT. DO YOU WISH TO BOOK APPOINTMENT ANYWAY?");
						}
					},
					error: function(error) {
						window.console &amp;&amp; console.log("ERROR FROM CHECKING APPOINTMENT");
						window.console &amp;&amp; console.log(error);
						standby.hide();
						window.location.reload();
					}
				}	            		
		
		);		
		var nextdeferred = deferred2.then(function(res){
				var scheduleanyways = "true";
				var deferredyn = new dojo.Deferred();
				if(res == "true"){

					var x = confirm("Requested appointment overlaps an existing one.  Do you want to schedule appointment anyway?");
					if (x){
						return "true";
					}else{
						return "false";
					}
				}else{
					res = "true";
				}
				return res;
				
			},function(err){
				// This will be called when the deferred
				// is rejected
				window.console &amp;&amp; console.log("ERROR " + err);
		}
		);
		nextdeferred.then(function(res){
			if(res == "true"){
				scheduleanyways(postdate,rawstaffid, rawcid,rawsvcid,rawhour,rawminute,rawampm,rawnotes,rawehour,raweminute,raweampm);
			}else{
				window.console &amp;&amp; console.log("no scheduling");
			}
		},function(err){
			// This will be called when the deferred
			// is rejected
			window.console &amp;&amp; console.log("ERROR " + err);
		}
		);
		
		// clear inputs from form
		//dijit.byId("apptform").reset();
		// display todays agenda
		
	}
			function scheduleanyways(nextdeferredcheckout,postdate,rawstaffid, rawcid,rawsvcid,rawhour,rawminute,rawampm,rawnotes,rawehour,raweminute,raweampm){
				var isthisagendaviewflagval = "false";
				isthisagendaviewflagval = dijit.byId("isThisAgendaViewFlag").get("value");
				
				var er_wdg = dijit.byId("enable_recur");
				var enable_recur = er_wdg.attr("checked");
			 	window.console &amp;&amp; console.log("enable_recur : "+enable_recur);
				var  weekly = dijit.byId("weekly").attr("checked");
				window.console &amp;&amp; console.log("weekly : "+weekly);
		    	var weeklyevery = dijit.byId("weeklyevery").attr("checked");
		    	window.console &amp;&amp; console.log("weeklyevery : "+weeklyevery);
		    	var weeklyeverytext = dijit.byId("weeklyeverytext").attr("value");
		    	window.console &amp;&amp; console.log("weeklyeverytext : "+weeklyeverytext);
		    	var everyweekdaysu = dijit.byId("everyweekdaysu").attr("checked");
		    	window.console &amp;&amp; console.log("everyweekdaysu : "+everyweekdaysu);
		    	var everyweekdaymo = dijit.byId("everyweekdaymo").attr("checked");
		    	window.console &amp;&amp; console.log("everyweekdaymo : "+everyweekdaymo);
		    	var everyweekdaytu = dijit.byId("everyweekdaytu").attr("checked");
		    	window.console &amp;&amp; console.log("everyweekdaytu : "+everyweekdaytu);
		    	var everyweekdaywe = dijit.byId("everyweekdaywe").attr("checked");
		    	window.console &amp;&amp; console.log("everyweekdaywe : "+everyweekdaywe);
		    	var everyweekdaythu = dijit.byId("everyweekdaythu").attr("checked");
		    	window.console &amp;&amp; console.log("everyweekdaythu : "+everyweekdaythu);
		    	var everyweekdayfri = dijit.byId("everyweekdayfri").attr("checked");
		    	window.console &amp;&amp; console.log("everyweekdayfri : "+everyweekdayfri);
		    	var everyweekdaysat = dijit.byId("everyweekdaysat").attr("checked");
		    	window.console &amp;&amp; console.log("everyweekdaysat : "+everyweekdaysat);
		    	var daily = dijit.byId("daily").attr("checked");
		    	window.console &amp;&amp; console.log("daily : "+daily);
		    	var every = dijit.byId("every").attr("checked");
		    	window.console &amp;&amp; console.log("every : "+every);
		    	var everytext = dijit.byId("everytext").attr("value");
		    	window.console &amp;&amp; console.log("everytext : "+everytext);
		    	var everyweekday = dijit.byId("everyweekday").attr("checked");
		    	window.console &amp;&amp; console.log("everyweekday : "+everyweekday);
		    	var monthly = dijit.byId("monthly").attr("checked");
		    	window.console &amp;&amp; console.log("monthly : "+monthly);
		    	var everyday = dijit.byId("everyday").attr("checked");
		    	window.console &amp;&amp; console.log("everyday : "+everyday);
		    	var everymonthdaytext = dijit.byId("everymonthdaytext").attr("value");
		    	window.console &amp;&amp; console.log("everymonthdaytext : "+everymonthdaytext);
		    	var everymonthtext = dijit.byId("everymonthtext").attr("value");
		    	window.console &amp;&amp; console.log("everymonthtext : "+everymonthtext);
		    	var everyregex = dijit.byId("everyregex").attr("checked");
		    	window.console &amp;&amp; console.log("everyregex : "+everyregex);
		    	var everynthdaytext = dijit.byId("everynthdaytext").attr("value");
		    	window.console &amp;&amp; console.log("everynthdaytext : "+everynthdaytext);
		    	var everynthmonthtext = dijit.byId("everynthmonthtext").attr("value");
		    	window.console &amp;&amp; console.log("everynthmonthtext : "+everynthmonthtext);
		    	var everyhowmanymonthtext = dijit.byId("everyhowmanymonthtext").attr("value");
		    	window.console &amp;&amp; console.log("everyhowmanymonthtext : "+everyhowmanymonthtext);
		    	var endafter = dijit.byId("endafter").attr("checked");
		    	window.console &amp;&amp; console.log("endafter : "+endafter);
		    	var endafterxoccur = dijit.byId("endafterxoccur").attr("value");
		    	window.console &amp;&amp; console.log("endafterxoccur : "+endafterxoccur);
		    	var everydate = dijit.byId("everydate").attr("checked");
		    	window.console &amp;&amp; console.log("everydate : "+everydate);
		    	var rangerecurEndDate = dijit.byId("rangerecurEndDate").attr("value");
		    	var req_indicator = dijit.byId('progButton').attr('value');
		    	
		    	if(rangerecurEndDate != null){
			    	window.console &amp;&amp; console.log("rangerecurEndDate : "+rangerecurEndDate);
			    	var erdate = dojo.date.locale.format(rangerecurEndDate, {datePattern: "yyyy-MM-dd", selector: "date"})
			    	window.console &amp;&amp; console.log("erdate : "+erdate);
			    	rangerecurEndDate = erdate;
		    	}
				standby.show();
				//Call the asynchronous xhrPost
				var deferred = dojo.xhrPost(
						{
							url: "myschedule/createappt",
							content: {
								hSelectDate: postdate,
								staffid: rawstaffid,
								clientid: rawcid,
								svcid: rawsvcid,
								hour: rawhour,
								minute: rawminute,
								ampm: rawampm,
								notes: rawnotes,
								ehour: rawehour,
								eminute: raweminute,
								eampm: raweampm,
					    		enable_recur:enable_recur,
					    		weekly:weekly,
					    		weeklyevery:weeklyevery,
					    		weeklyeverytext:weeklyeverytext,
					    		everyweekdaysu:everyweekdaysu,
					    		everyweekdaymo:everyweekdaymo,
					    		everyweekdaytu:everyweekdaytu,
					    		everyweekdaywe:everyweekdaywe,
					    		everyweekdaythu:everyweekdaythu,
					    		everyweekdayfri:everyweekdayfri,
					    		everyweekdaysat:everyweekdaysat,
					    		daily:daily,
					    		every:every,
					    		everytext:everytext,
					    		everyweekday:everyweekday,
					    		monthly:monthly,
					    		everyday:everyday,
					    		everymonthdaytext:everymonthdaytext,
					    		everymonthtext:everymonthtext,
					    		everyregex:everyregex,
					    		everynthdaytext:everynthdaytext,
					    		everynthmonthtext:everynthmonthtext,
					    		everyhowmanymonthtext:everyhowmanymonthtext,
					    		endafter:endafter,
					    		endafterxoccur:endafterxoccur,
					    		everydate:everydate,
					    		rangerecurEndDate:rangerecurEndDate,
					    		ri:req_indicator
							  },
							handleAs: "text",
							load: function(data) {
								window.console &amp;&amp; console.log("SUCCESS FROM CREATE APPOINTMENT");
								window.console &amp;&amp; console.log(data);
								try{
									dijit.byId("fapptclient").reset();
								}catch(err){
									window.console &amp;&amp; console.log("could not reset inputs: "+err);
								}
								try{	
									dijit.byId("formapptservice").reset();
								}catch(err){
									window.console &amp;&amp; console.log("could not reset inputs: "+err);
								}
								try{
									dijit.byId("desiredhour").set("value","1");
								}catch(err){
									window.console &amp;&amp; console.log("could not reset inputs: "+err);
								}
								try{
									dijit.byId("desiredminute").set("value","00");
								}catch(err){
									window.console &amp;&amp; console.log("could not reset inputs: "+err);
								}
								try{
									dijit.byId("desiredampm").set("value","am");
								}catch(err){
									window.console &amp;&amp; console.log("could not reset inputs: "+err);
								}
								try{	
									dijit.byId("notes").set("value","insert notes here");
								}catch(err){
									window.console &amp;&amp; console.log("could not reset inputs: "+err);
								}
								try{
									window.console &amp;&amp; console.log("before entering displayEditTodaysAgenda postdate "+postdate);
									if(isthisagendaviewflagval=='false'){
										displayEditTodaysAgenda(postdate);	
									}else{
										loadAgenda1();
									}
									
								}catch(err){
									window.console &amp;&amp; console.log("save form appointment could not display todays agenda error message :\n "+err);
									standby.hide();
								}
								<c:if test="${fn:length(staffs) == 1}">
									setOneStaff();
								</c:if>
								<c:if test="${fn:length(staffs) &gt; 1}">
									if(global_selected_staff != ''){
										var staffselectwidget = dijit.byId("fapptstaff");		
										staffselectwidget.set("value", global_selected_staff);
									}
								</c:if>
								if(nextdeferredcheckout){
									nextdeferredcheckout.resolve(data);
								}
								standby.hide();
							},
							error: function(error) {
								window.console &amp;&amp; console.log("ERROR FROM CREATE APPOINTMENT");
								window.console &amp;&amp; console.log(error);
								window.location.reload();
							}
						}	            		
				
				);			
			}
			function validateSelect(value, constraints)
			{
			    var isValid = false;
			    alert(value);
				window.console &amp;&amp; console.log("value "+value);
			    return isValid;
			}			
			function savePersonal(dialogFields){
				standby.show();
				var isthisagendaviewflagval = "false";
				var personalstaffval = "";
				var personalhourval = "";
				var personalminval = "";
				var personalampmval = "";
				var personalendhourval = "";
				var personalendminval = "";
				var personalendampmval = "";
				
				var personalreason = "";
				var personalnotes = "";
				
				var c_personalselectdateval = "";
				if(dijit.byId('personalDialog').isValid()){
					isthisagendaviewflagval = dijit.byId("isThisAgendaViewFlag").get("value");
					
					personalstaffval = dijit.byId("fapptstaff_personal").get("value");
					personalhourval = dijit.byId("personalhour").get("value");
					personalminval = dijit.byId("personalminute").get("value");
					personalampmval = dijit.byId("personalampm").get("value");
					personalendhourval = dijit.byId("personalendhour").get("value");
					personalendminval = dijit.byId("personalendminute").get("value");
					personalendampmval = dijit.byId("personalendampm").get("value");
					
					personalreason = dijit.byId("personalreason").get("value");
					personalnotes = dijit.byId("personalnotes").get("value");
					
					c_personalselectdateval = dijit.byId("hPersonalSelectDate").attr("value");
					
					var rawdate = dijit.byId("c_personalselectdate").attr("value")
					window.console &amp;&amp; console.log("c_editselectdate: "+rawdate);
					var postdate = dojo.date.locale.format(rawdate, {datePattern: "yyyy-MM-dd", selector: "date"})
					window.console &amp;&amp; console.log("postdate: "+postdate);
					
		            //Call the asynchronous xhrPost
		            var deferred = dojo.xhrPost(
		            		{
				                url: "myschedule/createpersonal",
				                content: {
				                	hSelectDate: postdate,
				                	staff: personalstaffval,
				                	hour: personalhourval,
				                	minute: personalminval,
				                	ampm: personalampmval,
				                	notes: personalnotes,
									label: personalreason,
				                	ehour: personalendhourval,
				                	eminute: personalendminval,
				                	eampm: personalendampmval
				                  },
				                handleAs: "text",
				                load: function(data) {
				                	window.console &amp;&amp; console.log("SUCCESS FROM CREATE PERSONAL APPOINTMENT");
				                    window.console &amp;&amp; console.log(data);
									try{
										var postdate = dojo.date.locale.format(rawdate, {datePattern: "yyyy-MM-dd", selector: "date"})
										window.console &amp;&amp; console.log("about to enter displayEditTodaysAgenda from updateappointment date: "+postdate);
										if(isthisagendaviewflagval=='false'){
											displayEditTodaysAgenda(postdate);
										}else{
											window.console &amp;&amp; console.log("THIS IS SUPPOSED TO UPDATE AGENDA VIEW WITH NEW TIME BLOCK");
											loadAgenda1();
										}
									}catch(err){
										window.console &amp;&amp; console.log("updateappointment could not display todays agenda error message :\n "+err);
										try{
											window.console &amp;&amp; console.log("before entering displayEditTodaysAgenda rawdate "+rawdate);
											if(isthisagendaviewflagval=='false'){
												displayEditTodaysAgenda(rawdate);	
											}else{
												window.console &amp;&amp; console.log("THIS IS SUPPOSED TO UPDATE AGENDA VIEW WITH NEW TIME BLOCK");
												loadAgenda1();
											}
											
										}catch(err){
											window.console &amp;&amp; console.log("updateappointment again could not display todays agenda error message :\n "+err);
											standby.hide();
										}
										
										standby.hide();
									}
				                    
									standby.hide();
				                },
				                error: function(error) {
				                	window.console &amp;&amp; console.log("ERROR FROM CREATE PERSONAL APPOINTMENT");
				                    window.console &amp;&amp; console.log(error);
				                    window.location.reload();
				                }
				            }	            		
		            
		            );
				}else{
					alert("Fill out the form.");
				}
			}
			function updatePersonal(dialogFields){
				standby.show();
				var personalhourval = "";
				var personalminval = "";
				var personalampmval = "";
				var personalendhourval = "";
				var personalendminval = "";
				var personalendampmval = "";
				var editpersonalapptid = "";
				var personalreason = "";
				var personalnotes = "";
				var personalstaffval = "";
				var isthisagendaviewflagval = "false";
				
				var c_personalselectdateval = "";
				
				editpersonalapptid = dijit.byId("editpersonalapptid").get("value");
				if(editpersonalapptid != ""){
					isthisagendaviewflagval = dijit.byId("isThisAgendaViewFlag").get("value");
					window.console &amp;&amp; console.log("isthisagendaviewflagval: "+isthisagendaviewflagval);
					personalhourval = dijit.byId("personalhour").get("value");
					personalstaffval = dijit.byId("fapptstaff_personal").get("value");
					personalminval = dijit.byId("personalminute").get("value");
					personalampmval = dijit.byId("personalampm").get("value");
					personalendhourval = dijit.byId("personalendhour").get("value");
					personalendminval = dijit.byId("personalendminute").get("value");
					personalendampmval = dijit.byId("personalendampm").get("value");
					
					personalreason = dijit.byId("personalreason").get("value");
					personalnotes = dijit.byId("personalnotes").get("value");
					
					c_personalselectdateval = dijit.byId("hPersonalSelectDate").attr("value");
					var rawdate = dijit.byId("c_personalselectdate").attr("value");
					var agendadate = dijit.byId("c_editselectdate").attr("value");
					window.console &amp;&amp; console.log("c_personalselectdate: "+rawdate);
					var postdate = dojo.date.locale.format(rawdate, {datePattern: "yyyy-MM-dd", selector: "date"})
					window.console &amp;&amp; console.log("postdate: "+postdate);
					
		            //Call the asynchronous xhrPost
		            var deferred = dojo.xhrPost(
		            		{
				                url: "myschedule/updatepersonal",
				                content: {
				                	appointmentid:editpersonalapptid,
				                	staff: personalstaffval,
				                	hSelectDate: postdate,
				                	hour: personalhourval,
				                	minute: personalminval,
				                	ampm: personalampmval,
				                	notes: personalnotes,
									label: personalreason,
				                	ehour: personalendhourval,
				                	eminute: personalendminval,
				                	eampm: personalendampmval
				                  },
				                handleAs: "text",
				                load: function(data) {
				                	window.console &amp;&amp; console.log("SUCCESS FROM UPDATE PERSONAL APPOINTMENT");
				                    window.console &amp;&amp; console.log(data);
									try{
										var postdate = dojo.date.locale.format(agendadate, {datePattern: "yyyy-MM-dd", selector: "date"})
										window.console &amp;&amp; console.log("about to enter displayEditTodaysAgenda from updateappointment date: "+postdate);
										if(isthisagendaviewflagval == "false"){
											displayEditTodaysAgenda(postdate);
										}else{
											window.console &amp;&amp; console.log("UPDATE THE AGENDA VIEW EVENT");
											loadAgenda1();
										}
									}catch(err){
										window.console &amp;&amp; console.log("updateappointment could not display todays agenda error message :\n "+err);
										try{
											window.console &amp;&amp; console.log("before entering displayEditTodaysAgenda rawdate "+agendadate);
											if(isthisagendaviewflagval == "false"){
												displayEditTodaysAgenda(rawdate);
											}else{
												window.console &amp;&amp; console.log("UPDATE THE AGENDA VIEW EVENT");
												loadAgenda1();
											}
										}catch(err){
											window.console &amp;&amp; console.log("updateappointment again could not display todays agenda error message :\n "+err);
											standby.hide();
										}
										
										standby.hide();
									}
				                    
									standby.hide();
				                },
				                error: function(error) {
				                	window.console &amp;&amp; console.log("ERROR FROM UPDATE PERSONAL APPOINTMENT");
				                    window.console &amp;&amp; console.log(error);
				                    window.location.reload();
				                }
				            }	            		
		            
		            );	
				}else{
		        	alert("This is not a valid Personal Time.");    	
		        }
			}			
			function updateAppointment(nextdeferred,ischeckout){
				var addAppt = dijit.byId('isThisADDAgendaViewFlag').get("value");
				if(addAppt == "true"){
					
					if(dijit.byId("enable_recur").get("checked")){
						
				    	if(!dijit.byId("weekly").get("checked") &amp;&amp;
				    	!dijit.byId("weeklyevery").get("checked") &amp;&amp;
				    	!dijit.byId("daily").get("checked") &amp;&amp;
				    	!dijit.byId("every").get("checked") &amp;&amp;
				    	!dijit.byId("everyweekday").get("checked") &amp;&amp;
				    	!dijit.byId("monthly").get("checked") &amp;&amp;
				    	!dijit.byId("everyday").get("checked") &amp;&amp;
				    	!dijit.byId("everyregex").get("checked")){
				    		alert("You need to select at least one option from daily, weekly or monthly.  For Recurring.");
				    		return;
				    	}
				    	if(!dijit.byId("endafter").get("checked") &amp;&amp;
				    	!dijit.byId("everydate").get("checked")){
				    		alert("You need to select at least one ending type. Either by occurrence or date. For Recurring.");
				    		return;
				    	}
						
						if(dijit.byId("everydate").get("checked")){
							var rangerecurEndDate = dijit.byId("rangerecurEndDate").attr("value");
							if(rangerecurEndDate==null){
								alert("Please select a end date for recurring.");
								dijit.byId("rangerecurEndDate").focus();
								return;
							}
						}
						if(dijit.byId("weeklyevery").get("checked")){
					    	var su = dijit.byId("everyweekdaysu").get("checked");
					    	var mo = dijit.byId("everyweekdaymo").get("checked");
					    	var tu = dijit.byId("everyweekdaytu").get("checked");
					    	var we = dijit.byId("everyweekdaywe").get("checked");
					    	var th = dijit.byId("everyweekdaythu").get("checked");
					    	var fri = dijit.byId("everyweekdayfri").get("checked");
					    	var sat = dijit.byId("everyweekdaysat").get("checked");
					    	if(!su &amp;&amp; !mo &amp;&amp; !tu &amp;&amp; !we &amp;&amp; !th &amp;&amp; !fri &amp;&amp; !sat){
					    		alert("Please select at least one weekday for recurring.");
					    		return;
					    	}

						}
						if(dijit.byId("everyregex").get("checked")){
							var everynthdaytext = dijit.byId("everynthdaytext").attr("value");
							var everynthmonthtext = dijit.byId("everynthmonthtext").attr("value");
							if(everynthdaytext == 'sel' || everynthmonthtext=='sel'){
					    		alert("Please select from the monthly selection for recurring.");
					    		return;
							}
						}
					}
					
					
					window.console &amp;&amp; console.log("validate editApptDialog: "+dijit.byId('editApptDialog').validate());
					if(dijit.byId('editApptDialog').validate()){
						var isthistrueorfalse = addAppointmentForFC(nextdeferred);
						if(isthistrueorfalse != false){
							dijit.byId('editApptDialog').hide();	
						}
					}
					
				}else{
					var erp = dijit.byId("edit_recur_parent").attr("value");
					var updatefuture = "false";
					if(erp != ''){
						var x = confirm("Do you wish to update future appointments too?");
						if (x){
							updatefuture = "true";
						}else{
							updatefuture = "false";
						}
					}
					
					standby.show();
					
					var isThisEditAgendaViewFlag = "false";
					isThisEditAgendaViewFlag = dijit.byId("isThisEditAgendaViewFlag").attr("value");
					
					var id = dijit.byId("editdialogapptid").attr("value");
					
					var staff_edit_id = dijit.byId("fapptstaff_edit").attr("value");
					var edithourval = "";
					var editminval = "";
					var editampmval = "";
					var endedithourval = "";
					var endeditminval = "";
					var endeditampmval = "";
					var c_editselectdateval = "";
					var c_raw_editselectdateval = "";
					var svcid = "";
					var newsvcid = "";
					var svctype = "";
					var cancel = "false";
					var svcprice = "";
					var notes = "";
					var whichtable = "agenda";
					var whichtabledate = "agendadate";
					var whichselectdate = "hSelectDate";
					var whichdialog="editApptDialog";

					newsvcid = dijit.byId("editselect").attr("value");
					window.console &amp;&amp; console.log('the new service id : '+newsvcid);
					svcid = dijit.byId("editdialogsvcid").attr("value");
					if(newsvcid != svcid){
						svcid = newsvcid;
					}
					svctype = dijit.byId("editdialogservicetype").attr("value");
					svcprice = formatCurrency(dijit.byId("editdialogprice").attr("value"));
					notes = dijit.byId("editdialognotes").attr("value");
					edithourval = dijit.byId("fedithour").get("value");
					editminval = dijit.byId("editminute").get("value");
					editampmval = dijit.byId("editampm").get("value");
					endedithourval = dijit.byId("fendedithour").get("value");
					endeditminval = dijit.byId("endeditminute").get("value");
					endeditampmval = dijit.byId("endeditampm").get("value");
					c_editselectdateval = dijit.byId("c_editselectdate").attr("value");
					c_raw_editselectdateval = dijit.byId("c_editselectdate").attr("value");
					c_editselectdateval = dojo.date.locale.format(c_editselectdateval, {datePattern: "yyyy-MM-dd", selector: "date"});

					var req_indicator = dijit.byId('progButton').attr('value');
					
					notes = escape(notes);
					if(ischeckout==undefined){
						ischeckout = false;
					}
					var deferred = dojo.xhrGet( {
						url : "myschedule/updateedit?staffid="+staff_edit_id+"&amp;aid="+id+"&amp;c="+cancel+"&amp;sid="+svcid+"&amp;st="+svctype+"&amp;sp="+svcprice+"&amp;n="+notes+"&amp;hour="+edithourval+"&amp;min="+editminval+"&amp;ap="+editampmval+"&amp;d="+c_editselectdateval+"&amp;ehour="+endedithourval+"&amp;emin="+endeditminval+"&amp;eap="+endeditampmval+"&amp;uf="+updatefuture+"&amp;ri="+req_indicator+"&amp;ischeckout="+ischeckout,
						preventCache: true,
						handleAs: "text",
						load : function(response, newValue) {
							
							if(isThisEditAgendaViewFlag == "false"){
								window.console &amp;&amp; console.log("LOOK AT ME!!!");
								updateCustomPriceForService(svcid,id,svcprice);
							var isJSON;
							 //window.console &amp;&amp; console.log("the appointment object returned: "+response);
							var data;
							try {
								data = JSON.parse(response);
								isJSON = true;
							}
							catch (e) {
								isJSON = false;
							}
								if (isJSON) {
									if(data.constructor == Array){
										var mytable = document.getElementById(whichtable);
										var oldagendaheader = document.getElementById(whichtabledate);
										var rawdate = document.getElementById("hSelectDate").value;
										if(rawdate == ""){
											rawdate = dojo.date.locale.format(new Date(), {datePattern: "yyyy-MM-dd", selector: "date"});
										}
										oldagendaheader.innerHTML = "Agenda for "+rawdate;
										remove("appointment"+id);
										var mycurrent_row,mycurrent_cell;
										mytable = document.getElementById(whichtable);
									
										for(var key in data) {
											var sbeginetimex = data[key].s_beginDateTime;
											var sendetimex = data[key].s_endDateTime;

											var myTime = new Date(data[key].beginDateTime.timeInMillis);
											var myEndTime = new Date(data[key].endDateTime.timeInMillis);
											var endhh = myEndTime.getHours();
											var endmm = myEndTime.getMinutes();
											
											var hh = myTime.getHours();
											var mm = myTime.getMinutes();
											var ss = myTime.getSeconds();
											var ms = myTime.getMilliseconds();																
											var ap = "am";
											var endap = "am";
											
											if (hh   > 11) { ap = "pm";        }
											if (hh   > 12) { hh = hh - 12; }
											if (hh   == 0) { hh = 12;        }
											
											if (endhh   > 11) { endap = "pm";        }
											if (endhh   > 12) { endhh = endhh - 12; }
											if (endhh   == 0) { endhh = 12;        }
											
											var timetext = "Begin: " + hh + ":" + mm + " " + ap;
											var endtimetext = "End: " + endhh + ":" + endmm + " " + endap;
										
											mycurrent_row = document.createElement("tr");
											
											mycurrent_row.setAttribute("id","appointment"+data[key].id);
											mycurrent_row.setAttribute("onMouseOver","this.className='highlight'");
											mycurrent_row.setAttribute("onMouseOut","this.className='normal'");
											mycurrent_cell = document.createElement("td");
											var svc = data[key].servicename1 + " $" + formatCurrency(data[key].service1cost);
											if(data[key].client != null){
												mycurrent_row.setAttribute("status",data[key].status);
												mycurrent_row.setAttribute("onClick","doAjax("+data[key].id+",'"+whichdialog+"');");
												sometext = "STATUS: "+data[key].status +" "+data[key].client.firstName + " " + data[key].client.lastName + " "+sbeginetimex + " -- " + sendetimex + " " + svc;
											}else{
												mycurrent_row.setAttribute("status","PERSONAL");
												mycurrent_row.setAttribute("onClick","doAjax("+data[key].id+",'personalDialog');");
												sometext = "STATUS: "+data[key].status +" TIME BLOCK "+data[key].personallabel + " "+sbeginetimex + " -- " + sendetimex + " ";
											}
											var datatext = document.createTextNode(" " + sometext);																
											
											mycurrent_cell.appendChild(datatext);												
											mycurrent_row.appendChild(mycurrent_cell);
											mytable.appendChild(mycurrent_row);											
										}
									}else{
											sometext = data[0].description;
											window.console &amp;&amp; console.log(sometext);
									
									}
									try{
										window.console &amp;&amp; console.log("1 LOOKING FOR DATE ERROR: rawdate : "+rawdate);
										var postdate = "";
										postdate = dojo.date.locale.format(rawdate, {datePattern: "yyyy-MM-dd", selector: "date"})	
										window.console &amp;&amp; console.log("about to enter displayEditTodaysAgenda from updateappointment date: "+postdate);
										//displayEditTodaysAgenda(postdate);
										dijit.byId("c_editselectdate").set("value",rawdate);
									}catch(err){
										window.console &amp;&amp; console.log("updateappointment could not display todays agenda error message :\n "+err);
										try{
											window.console &amp;&amp; console.log("before entering displayEditTodaysAgenda c_editselectdateval "+c_editselectdateval);
											dijit.byId("c_editselectdate").set("value",c_raw_editselectdateval);
											//displayEditTodaysAgenda(c_raw_editselectdateval);
										}catch(err){
											window.console &amp;&amp; console.log("updateappointment again could not display todays agenda error message :\n "+err);
											standby.hide();
										}
										standby.hide();
									}
									dijit.byId('editApptDialog').hide();	
									
									dijit.byId(whichdialog).reset();
									dijit.byId("progButton").set("label","Select one");
									dijit.byId("progButton").set("value","");
								}
								else {
									// try treating it as XML
								}	
							}else{
								loadAgenda1();
								dijit.byId('editApptDialog').hide();	
								
							}
							if(nextdeferred){
								nextdeferred.resolve(id);
							}
							standby.hide();
							return response;
						},
						error: function(error) {
							window.console &amp;&amp; console.log("ERROR FROM UPDATE APPOINTMENT");
							window.console &amp;&amp; console.log(error);
							standby.hide();
							window.location.reload();
						}
					});						
					return deferred;					
				}

			}
			 </script> 
			 <!-- another tab... -->
			 <div id="weekTab">
				<div id='weekcalendar'>_</div>
			 </div>
	
			 <!-- add the content pane decoration (all tabs must live in content panes) -->
			 <script type="text/javascript">
				 Spring.addDecoration(new Spring.ElementDecoration(
				 {elementId : 'weekTab',
				 widgetType : 'dijit.layout.ContentPane',
				 widgetAttrs : {title: 'Week at a glance', selected: true}
				 }));
			 </script> 
	
			 <!-- another tab... -->
			 <div id="monthTab">
				<div id='monthcalendar'>_</div>
			 </div>

			 <!-- add the content pane decoration (all tabs must live in content panes) -->
			 <script type="text/javascript">
			 Spring.addDecoration(new Spring.ElementDecoration(
			 {elementId : 'monthTab',
			 widgetType : 'dijit.layout.ContentPane',
			 widgetAttrs : {title: 'Month at a glance', selected: true}
			 }));
			 </script> 
	
			<!-- decorate the tab container to create it -->
			 <script type="text/javascript">
			 Spring.addDecoration(new Spring.ElementDecoration(
			 {elementId : 'myTabContainer',
			 widgetType : 'dijit.layout.TabContainer'}
			 ));
			 </script>
			 <script type="text/javascript">
			 Spring.addDecoration(new Spring.ElementDecoration(
			 {elementId : 'myRecurTabContainer',
			 widgetType : 'dijit.layout.TabContainer'}
			 ));
			 </script>
	
			 <script type="text/javascript">
				 /*
				 creates a json object from the data input
				 */
				function convertToJsonObject(response){
					var isJSON;
					var data;
					try {
						//window.console &amp;&amp; console.log(response);
						data = JSON.parse(response);
						window.console &amp;&amp; console.log(data);
						isJSON = true;
					}
					catch (e) {
						isJSON = false;
					}

					if (isJSON) {
						// data is already parsed, so just use it
						// handle response codes
						// do something with returned data
						
						if(data instanceof Array){
							
							var cntr = 0;
							var myCars=new Array(); // regular array (add an optional integer
							for(var key in data) {
								bigdata = new Object();
								bigdata.id = data[key].id;
								bigdata.name = data[key].description + " (" + data[key].amounttime +")";
								bigdata.amounttime = data[key].amounttime;
							
								myCars[cntr]=bigdata;       						
								cntr = cntr + 1;
							}
							person = new Object();
							person.items = myCars;
							person.identifier = 'id';
							person.label = 'name';
							return person;
							
						}else{
							window.console &amp;&amp; console.log(data.id);
							window.console &amp;&amp; console.log(data.value);
							bigdata = new Object();
							bigdata.id = data.id;
							bigdata.name = data.description;
							
							
							var myCars=new Array(); // regular array (add an optional integer
							myCars[0]=bigdata;       						
							
							person = new Object();
							person.items = myCars;
							person.identifier = 'id';
							person.label = 'name';
							return person;
							
							
						}
					}
				 }				
				 /*
				 creates a json object from the clients data input
				 */
				function convertClientsToJsonObject(response){
					var isJSON;
					var data;
					try {
						data = JSON.parse(response);
						isJSON = true;
					}
					catch (e) {
						isJSON = false;
					}

					if (isJSON) {
						// data is already parsed, so just use it
						// handle response codes
						// do something with returned data
						
						if(data instanceof Array){
							
							var cntr = 0;
							var myCars=new Array(); // regular array (add an optional integer
							for(var key in data) {
								bigdata = new Object();
								bigdata.id = data[key].id;
								bigdata.name = data[key].firstName + " " + data[key].lastName;
								
								
								myCars[cntr]=bigdata;       						
								cntr = cntr + 1;
							}
							person = new Object();
							person.items = myCars;
							person.identifier = 'id';
							person.label = 'name';
							return person;
							
						}else{
							bigdata = new Object();
							bigdata.id = data.id;
							bigdata.name = data.firstName + " " + data.lastName;
							
							var myCars=new Array(); // regular array (add an optional integer
							myCars[0]=bigdata;       						
							
							person = new Object();
							person.items = myCars;
							person.identifier = 'id';
							person.label = 'name';
							return person;
							
							
						}
					}
				 }		
				 function loadClientsList(){
					 standby.hide();
					 standby.show();
					var deferred = dojo.xhrGet({
						  url: "myschedule/jsonclients",
						  handleAs: "json",
						  preventCache: true,
						  load: function(response) {
								var XstateStore = new Array();
								XstateStore = response;
								var convertedjsonobject = convertClientsToJsonObject(JSON.stringify(XstateStore));
								
								usethisstore = new dojo.data.ItemFileReadStore({
									data: convertedjsonobject
								});
								var isclientlistexists = dijit.byId("fapptclient");
								var iseditclientlistexists = dijit.byId("c_editclientname_id");

								if(iseditclientlistexists){
									iseditclientlistexists.store = usethisstore;
									
								}else{
									var testeditobject = new dijit.form.FilteringSelect({
										store: usethisstore,
										autoComplete: true,
										
										id: "c_editclientname_id"
									},
									"c_editclientname_id");									
									
								}
								
								if(isclientlistexists){
									isclientlistexists.store = usethisstore;
									
								}else{
									var testobject = new dijit.form.FilteringSelect({
										store: usethisstore,
										autoComplete: true,
										
										id: "fapptclient"
									},
									"fapptclient");
								}
								standby.hide();
							},
							error: function(error) {
								standby.hide();
								window.location.reload();
							}
					  });
					 
				 }
				 <c:if test="${fn:length(staffs) == 1}">
				 function setOneStaff(){
						
						var staffselectwidget = dijit.byId("fapptstaff");
						var personalstaffselectwidget = dijit.byId("fapptstaff_personal");
						<c:forEach var="staff" items="${staffs}">
							var staff = '${staff}';
							var staffcoln = staff.indexOf('=');
							var staffid = staff.substring(0,staffcoln);
							personalstaffselectwidget.set("value", staffid);
						</c:forEach>
					
					 
				 }
				 </c:if>
					function zeroFill( number, width )
					{
					  width -= number.toString().length;
					  if ( width > 0 )
					  {
						return new Array( width + (/\./.test( number ) ? 2 : 1) ).join( '0' ) + number;
					  }
					  return number;
					}														
				 
				 function toggleVis(btn,do_show){
						cells = document.getElementsByName('tcol'+btn);
						if(do_show){
							$("#agenda_view_table td:nth-child("+ btn +"),th:nth-child("+ btn +")").show();
							loadAgenda1();

						}else{
							$("#agenda_view_table td:nth-child("+ btn +"),th:nth-child("+ btn +")").hide();
							
								if(btn != 1){
									$('#agendaview${status.count}').fullCalendar('destroy');
									loadAgenda1();
								}
							
				 		}
												
					}				 
				dojo.addOnLoad(function(){
					dijit.byId("editApptDialog").onShow = function(){editservicecounter=0;};
				 	dojo.connect(dijit.byId("editcategories"), "onChange", function(selectedcatid){
				 		window.console &amp;&amp; console.log('selectedcatid: ' + selectedcatid);
				 		if(selectedcatid == '0'){
							var cntr = 0;
							var myCars=new Array(); // regular array (add an optional integer
							for(var key in servicesArray) {
								var service = servicesArray[key];
								window.console &amp;&amp; console.log('serviceid: '+service.serviceid);
								window.console &amp;&amp; console.log('description: '+service.description);
								window.console &amp;&amp; console.log('amountoftime: '+service.amountoftime);
								
								bigdata = new Object();
								bigdata.value = service.serviceid;
								bigdata.name = service.description + " ("+service.amountoftime+")";
							
								myCars[cntr]=bigdata;       						
								cntr = cntr + 1;
							}
							person = new Object();
							person.items = myCars;
							person.identifier = 'value';
							person.label = 'description';
							var pstore = new dojo.data.ItemFileReadStore({
								   'data':person
							  });
							var cwidget = dijit.byId("editselect");
							if(editservicecounter != 0 &amp;&amp; cwidget){
								cwidget.reset();
								cwidget.store = pstore;
							}else{
								editservicecounter = editservicecounter + 1;
							}				 			
				 		}else{
							if(categoryservicesArray.length > 0){
								var cntr = 0;
								var myCars=new Array(); // regular array (add an optional integer
								for(var key in categoryservicesArray) {
									var catservice = categoryservicesArray[key];
									if(selectedcatid == catservice.categoryid){
										window.console &amp;&amp; console.log('categoryid: '+catservice.categoryid);
										window.console &amp;&amp; console.log('serviceid: '+catservice.serviceid);
										window.console &amp;&amp; console.log('description: '+catservice.description);
										window.console &amp;&amp; console.log('amountoftime: '+catservice.amountoftime);
										
										bigdata = new Object();
										bigdata.value = catservice.serviceid;
										bigdata.name = catservice.description + " ("+catservice.amountoftime+")";
									
										myCars[cntr]=bigdata;       						
										cntr = cntr + 1;
									}
								}
								person = new Object();
								person.items = myCars;
								person.identifier = 'value';
								person.label = 'description';
								var pstore = new dojo.data.ItemFileReadStore({
									   'data':person
								  });
								var cwidget = dijit.byId("editselect");
								if(editservicecounter != 0 &amp;&amp; cwidget){
									cwidget.reset();
									cwidget.store = pstore;
								}else{
									editservicecounter = editservicecounter + 1;
								}
								
							}
						}
				 	});
					
						<c:if test="${fn:length(staffs) == 1}">
							setOneStaff();
						</c:if>
					 	var tabs = dijit.byId("myTabContainer");
					 	tabs.startup();
					 	tabs.resize();
						dojo.connect(dijit.byId("myTabContainer"), "selectChild", function(page){ 
							if(page.id=='weekTab'){
								//if(week_already_loaded == 'false'){
									loadWeek();
									//week_already_loaded = 'true';
								//}
							} 
							if(page.id=='monthTab'){
								//if(month_already_loaded == 'false'){
									loadMonth();
									//month_already_loaded = 'true';
								//}
							}
							if(page.id=='editTab'){
								
									loadAgenda1();
								
							}
							if(page.id=='createTab'){
									loadCreate();
							}
							
							
						});
						init();

						/* dojo.parser.parse(); */
						<c:if test="${fn:length(staffs) &gt; 1}">
							dojo.connect(dijit.byId("staffgeneral"), "onChange", function(staff){ 
								var staffselectwidget = dijit.byId("fapptstaff");		
								staffselectwidget.set("value", staff);
								global_selected_staff = staff;
								
								var rawdate = dijit.byId("c_editselectdate").attr("value")
								var postdate = dojo.date.locale.format(rawdate, {datePattern: "yyyy-MM-dd", selector: "date"})
								displayEditTodaysAgenda(postdate);
								if ( $('#monthcalendar').children().length > 0 ){
									loadMonth();
								}			
								
										if ( $('#agendaview1').children().length > 0 ){
											loadAgenda1();
										}								
								
								
								if ( $('#weekcalendar').children().length > 0 ){
									loadWeek();
								}								
							});
						</c:if>
						var widget = dijit.byId("formapptservice");
						dojo.connect(widget, "onChange", function(){
							setEndTime();
						});
						
						dojo.connect(dijit.byId('desiredhour'),'onChange',function(value) {
							 window.console &amp;&amp; console.log("ONCHANGE: desiredhour The begin hour change value is: "+value);
						    //the user has selected a new item
						    //update the end time, 
						    // get amount time from service add to begin time set end time
							setEndTime();
						});
						dojo.connect(dijit.byId('desiredminute'),'onChange',function(value) {
							 window.console &amp;&amp; console.log("ONCHANGE: desiredminute The begin minute change value is: "+value);
						    //the user has selected a new item
						    //update the end time, 
						    // get amount time from service add to begin time set end time
							setEndTime();
						});
						dojo.connect(dijit.byId('desiredampm'),'onChange',function(value) {
							 window.console &amp;&amp; console.log("ONCHANGE: desiredampm The begin ampm change value is: "+value);
						    //the user has selected a new item
						    //update the end time, 
						    // get amount time from service add to begin time set end time
						 	setEndTime();
						});
						//for editapptdialog
						
						dojo.connect(dijit.byId('editselect'),'onChange',function(value) {
							 window.console &amp;&amp; console.log("ONCHANGE: editselect: ");
						    //the user has selected a new item
						    //update the end time, 
						    // get amount time from service add to begin time set end time
							setEditEndTime();
						});
						dojo.connect(dijit.byId('fedithour'),'onChange',function(value) {
							 window.console &amp;&amp; console.log("ONCHANGE: fedithour The begin edit hour change value is: "+value);
						    //the user has selected a new item
						    //update the end time, 
						    // get amount time from service add to begin time set end time
						    var dothis = dijit.byId("isThisEditAgendaViewFlag").attr("value");
						    //if(dothis == 'false'){
						    	setEditEndTime();	
						    //}
							
						});
						dojo.connect(dijit.byId('editminute'),'onChange',function(value) {
							 window.console &amp;&amp; console.log("ONCHANGE: editminute The begin edit minute change value is: "+value);
						    //the user has selected a new item
						    //update the end time, 
						    // get amount time from service add to begin time set end time
							    var dothis = dijit.byId("isThisEditAgendaViewFlag").attr("value");
							    //if(dothis == 'false'){
							    	setEditEndTime();	
							    //}
						});
						dojo.connect(dijit.byId('editampm'),'onChange',function(value) {
							 window.console &amp;&amp; console.log("ONCHANGE: editampm The begin edit ampm change value is: "+value);
						    //the user has selected a new item
						    //update the end time, 
						    // get amount time from service add to begin time set end time
							    var dothis = dijit.byId("isThisEditAgendaViewFlag").attr("value");
							    //if(dothis == 'false'){
							    	setEditEndTime();	
							    //}
						});
						dojo.connect(dijit.byId("every"), "onChange", function(isChecked){
							if(isChecked){
								dijit.byId("everytext").set("disabled",false);	
							}else{
								dijit.byId("everytext").set("disabled",true);
							}
						});
						dojo.connect(dijit.byId("weeklyevery"), "onChange", function(isChecked){
							if(isChecked){
								dijit.byId("weeklyeverytext").set("disabled",false);	
						    	dijit.byId("everyweekdaysu").set("disabled",false);
						    	dijit.byId("everyweekdaymo").set("disabled",false);
						    	dijit.byId("everyweekdaytu").set("disabled",false);
						    	dijit.byId("everyweekdaywe").set("disabled",false);
						    	dijit.byId("everyweekdaythu").set("disabled",false);
						    	dijit.byId("everyweekdayfri").set("disabled",false);
						    	dijit.byId("everyweekdaysat").set("disabled",false);
							}else{
								dijit.byId("weeklyeverytext").set("disabled",true);
						    	dijit.byId("everyweekdaysu").set("disabled",true);
						    	dijit.byId("everyweekdaymo").set("disabled",true);
						    	dijit.byId("everyweekdaytu").set("disabled",true);
						    	dijit.byId("everyweekdaywe").set("disabled",true);
						    	dijit.byId("everyweekdaythu").set("disabled",true);
						    	dijit.byId("everyweekdayfri").set("disabled",true);
						    	dijit.byId("everyweekdaysat").set("disabled",true);
								
							}
						});
						dojo.connect(dijit.byId("everyday"), "onChange", function(isChecked){
							if(isChecked){
								dijit.byId("everymonthdaytext").set("disabled",false);	
								dijit.byId("everymonthtext").set("disabled",false);
							}else{
								dijit.byId("everymonthdaytext").set("disabled",true);
								dijit.byId("everymonthtext").set("disabled",true);
							}
						});
						dojo.connect(dijit.byId("everyregex"), "onChange", function(isChecked){
							if(isChecked){
								dijit.byId("everynthdaytext").set("disabled",false);	
								dijit.byId("everynthmonthtext").set("disabled",false);
								dijit.byId("everyhowmanymonthtext").set("disabled",false);
							}else{
								dijit.byId("everynthdaytext").set("disabled",true);
								dijit.byId("everynthmonthtext").set("disabled",true);
								dijit.byId("everyhowmanymonthtext").set("disabled",true);
							}
						});
						dojo.connect(dijit.byId("endafter"), "onChange", function(isChecked){
							if(isChecked){
								dijit.byId("endafterxoccur").set("disabled",false);	
							}else{
								dijit.byId("endafterxoccur").set("disabled",true);
							}
						});
						dojo.connect(dijit.byId("everydate"), "onChange", function(isChecked){
							if(isChecked){
								dijit.byId("rangerecurEndDate").set("disabled",false);	
							}else{
								dijit.byId("rangerecurEndDate").set("disabled",true);
							}
						});
						dojo.connect(dijit.byId("enable_recur"), "onChange", function(isChecked){
						    window.console &amp;&amp; console.log("entered onchange for enable_recur");
							var container = dojo.query('div','recur_div');
						    if(isChecked){
						    	window.console &amp;&amp; console.log("entered isChecked. so enable all inputs");
						    	dijit.byId("weekly").set("disabled",false);
						    	dijit.byId("weeklyevery").set("disabled",false);
						    	dijit.byId("daily").set("disabled",false);
						    	dijit.byId("every").set("disabled",false);
						    	dijit.byId("everyweekday").set("disabled",false);
						    	dijit.byId("monthly").set("disabled",false);
						    	dijit.byId("everyday").set("disabled",false);
						    	dijit.byId("everyregex").set("disabled",false);
						    	dijit.byId("endafter").set("disabled",false);
						    	dijit.byId("everydate").set("disabled",false);
						    }else{
						    	window.console &amp;&amp; console.log("entered isChecked false. so disable all inputs");
						    	dijit.byId("weekly").set("disabled",true);
						    	dijit.byId("weeklyevery").set("disabled",true);
						    	dijit.byId("daily").set("disabled",true);
						    	dijit.byId("every").set("disabled",true);
						    	dijit.byId("everyweekday").set("disabled",true);
						    	dijit.byId("monthly").set("disabled",true);
						    	dijit.byId("everyday").set("disabled",true);
						    	dijit.byId("everyregex").set("disabled",true);
						    	dijit.byId("endafter").set("disabled",true);
						    	dijit.byId("everydate").set("disabled",true);
						    }
						});
						
						loadAgenda1();
						
		                var menu = new dijit.Menu({
		                    style: "display: none;"
		                });
		              //images/circular icons/star_yellow.png
		                var menuItem1 = new dijit.MenuItem({
		                    label: "Yellow Star",
		                    onClick: function() {
		                    	dijit.byId("progButton").set("label","Yellow star");
		                    	dijit.byId("progButton").set("value","yellow");
		                    }
		                });
		                menuItem1.iconNode.style.cssText = "background: url('images/circular icons/star_yellow.png') no-repeat;";
		                menu.addChild(menuItem1);

		                var menuItem2 = new dijit.MenuItem({
		                    label: "Red star",
		                    onClick: function() {
		                    	dijit.byId("progButton").set("label","Red star");
		                    	dijit.byId("progButton").set("value","red");
		                    }
		                });
		                menuItem2.iconNode.style.cssText = "background: url('images/circular icons/star_red.png') no-repeat;";
		                
		                menu.addChild(menuItem2);

		                var button = new dijit.form.DropDownButton({
		                    label: "Select one",
		                    name: "programmatic2",
		                    dropDown: menu,
		                    id: "progButton"
		                });
		                dojo.byId("dropdownButtonContainer").appendChild(button.domNode);
		            	
		                var cal = $('#jCalTarget').jCal({
		            		day:new Date(),
		            		days:1,
		            		showMonths:2,
		            		monthSelect:true,
		            		callback:
		            		function (day, days) {
		            			window.console &amp;&amp; console.log('selected ' + days + ' days starting ' + day);
		            			jCalOnClick(day);
		            		}
		            	});
		                var clickthisdate = new Date();
		                var month = clickthisdate.getMonth();
		                month = month + 1;
		                var day = clickthisdate.getDate();
		                
		                var fyear = clickthisdate.getFullYear();
		                window.console &amp;&amp; console.log(''+month+'_'+day+'_'+fyear);
		                $('#c2d_'+month+'_'+day+'_'+fyear).click();
		                
				 });
				 function jCalOnClick(day){
					 jCalTargetValue = day;
					 loadAgenda1(day);
				 }
				function setEditEndTimeNoPost(svcvalue){
					var total = svcvalue;
					var hr = dijit.byId('fedithour').value;
					var min = dijit.byId('editminute').value;
					var ampm = dijit.byId('editampm').value;
					if(hr == 12 ){
						if(ampm == 'am'){
							hr = parseInt('0');
						}else{
							hr = parseInt('12');
						}
					}else if(ampm == 'pm'){
						hr = parseInt(hr) + 12;
					}

					window.console &amp;&amp; console.log("end hour: "+hr);
					window.console &amp;&amp; console.log("end min: "+min);
					window.console &amp;&amp; console.log("end ampm: "+ampm);
					var rawdate = dijit.byId("c_editselectdate").attr("value")
					var d = rawdate.getDate();
					var m = rawdate.getMonth();
					var y = rawdate.getFullYear();
					window.console &amp;&amp; console.log("raw day: "+d);
					window.console &amp;&amp; console.log("raw month: "+m);
					window.console &amp;&amp; console.log("raw year: "+y);
					
					var temp_hour_min = total *60;//gives seconds
					var tmphr = Math.floor(temp_hour_min/3600);
					var tmpmn = Math.floor((temp_hour_min%3600)/60);

					var d = new Date(y, m, d, hr, min, 0, 0);
					var newDateObj = new Date(d.getTime() + total*60000);
					
					var endhour = newDateObj.getHours();
					var endmin = newDateObj.getMinutes();
					window.console &amp;&amp; console.log("setEditEndTimeNoPost revised end hour: "+endhour);
					window.console &amp;&amp; console.log("setEditEndTimeNoPost revised end min: "+endmin);
					var eap = "am";
					if (endhour   > 11) { eap = "pm";        }
					if (endhour   > 12) { endhour = endhour - 12; }
					if (endhour   == 0) { endhour = 12;        }
					window.console &amp;&amp; console.log("2 revised end ampm: "+eap);
					var ehr = dijit.byId('fendedithour');
					ehr.setValue(endhour);
					var emin = dijit.byId('endeditminute');
					if(endmin == "0"){endmin="00";}
					emin.setValue(endmin);
					var eampm = dijit.byId('endeditampm');
					eampm.setValue(eap.toLowerCase());				
				}
				function setEditEndTime(){
					if(StillNeedsValidating==false){
						StillNeedsValidating=true;
						return;
					}
					if(dijit.byId('editselect')){
						var svcid = dijit.byId('editselect').attr("value");
						var srvtime = dijit.byId('editselect').attr("displayedValue");
						var dopost = false;
						
						if(svcid != ""){
							if(dopost){
								var deferred = dojo.xhrPost(
										{
											url: "myschedule/svctime",
											content: {
												id: svcid,
											  },
											handleAs: "json",
											load: function(response) {
												window.console &amp;&amp; console.log("SUCCESS FROM GET SERVICE TIME");
												var total = response.amounttime;
												var hr = dijit.byId('fedithour').value;
												var min = dijit.byId('editminute').value;
												var ampm = dijit.byId('editampm').value;
												if(hr == 12 ){
													if(ampm == 'am'){
														hr = parseInt('0');
													}else{
														hr = parseInt('12');
													}
												}else if(ampm == 'pm'){
													hr = parseInt(hr) + 12;
												}

												window.console &amp;&amp; console.log("end hour: "+hr);
												window.console &amp;&amp; console.log("end min: "+min);
												window.console &amp;&amp; console.log("end ampm: "+ampm);
												var rawdate = dijit.byId("c_editselectdate").attr("value")
												var d = rawdate.getDate();
												var m = rawdate.getMonth();
												var y = rawdate.getFullYear();
												window.console &amp;&amp; console.log("raw day: "+d);
												window.console &amp;&amp; console.log("raw month: "+m);
												window.console &amp;&amp; console.log("raw year: "+y);
												
												var temp_hour_min = total *60;//gives seconds
												var tmphr = Math.floor(temp_hour_min/3600);
												var tmpmn = Math.floor((temp_hour_min%3600)/60);

												var d = new Date(y, m, d, hr, min, 0, 0);
												var newDateObj = new Date(d.getTime() + total*60000);
												
												var endhour = newDateObj.getHours();
												var endmin = newDateObj.getMinutes();
												window.console &amp;&amp; console.log("setEditEndTime revised end hour: "+endhour);
												window.console &amp;&amp; console.log("setEditEndTime revised end min: "+endmin);
												var eap = "am";
												if (endhour   > 11) { eap = "pm";        }
												if (endhour   > 12) { endhour = endhour - 12; }
												if (endhour   == 0) { endhour = 12;        }
												window.console &amp;&amp; console.log("2 revised end ampm: "+eap);
												var ehr = dijit.byId('fendedithour');
												ehr.setValue(endhour);
												var emin = dijit.byId('endeditminute');
												if(endmin == "0"){endmin="00";}
												emin.setValue(endmin);
												var eampm = dijit.byId('endeditampm');
												eampm.setValue(eap.toLowerCase());
											},
											error: function(error) {
												svcstandbydlg.hide();
												window.console &amp;&amp; console.log("ERROR FROM GET SERVICE TIME");
												window.console &amp;&amp; console.log(error);
												window.location.reload();
											}
										}	            		
								);
							}else{
								var servicecoln2 = srvtime.indexOf('(');
								var servicecoln3 = srvtime.indexOf(')');
								var servicetime = srvtime.substring(servicecoln2+1,servicecoln3);
							
								setEditEndTimeNoPost(servicetime);
								
			                    var editdialogpricewdget = dijit.byId('editdialogprice');
			                    var editdialogapptidwdget = dijit.byId('editdialogapptid');
			                    var customprice;
			                    if(editdialogapptidwdget != null){
			                    	var apptid = editdialogapptidwdget.attr("value")
			                    	customprice = getCustomPriceForService(svcid,apptid);
			                    	window.console &amp;&amp; console.log("customprice: "+ customprice);
			                    }
			                    var price = getPriceForService(svcid);
			                    if(customprice != null){
			                    	price = customprice; 
			                    }
			                    window.console &amp;&amp; console.log("SETTING PRICE FOR SERVICE: "+price);
			                    editdialogpricewdget.set("value",formatCurrency(price));
								
							}
						}
					}
				}				
				
				function getCustomPriceForService(svcid,apptid){
					if(customServicesPricesArray.length > 0){
						for(var key in customServicesPricesArray) {
							var findservice = customServicesPricesArray[key];
							if(findservice.serviceid==svcid &amp;&amp; findservice.appointmentid == apptid){
								return findservice.cost;
							}
						}
					}
					
				}
				function updateCustomPriceForService(svcid,apptid,cost){
					if(customServicesPricesArray.length > 0){
						for(var key in customServicesPricesArray) {
							var findservice = customServicesPricesArray[key];
							if(findservice.serviceid==svcid &amp;&amp; findservice.appointmentid == apptid){
								findservice.cost = cost;;
							}
						}
					}
					
				}
				
				function getPriceForService(id){
					if(servicespricesArray.length > 0){
						for(var key in servicespricesArray) {
							var findservice = servicespricesArray[key];
							if(findservice.serviceid==id){
								return findservice.cost;
							}
						}
					}
					
				}
				function setEndTimeNoPost(svcid){
					if(servicesArray.length > 0){
						for(var key in servicesArray) {
							var findservice = servicesArray[key];
							if(findservice.serviceid==svcid){
			                    var total = findservice.amountoftime;
			                    var hr = dijit.byId('desiredhour').value;
			                    var min = dijit.byId('desiredminute').value;
			                    var ampm = dijit.byId('desiredampm').value;
			                    
								if(hr == 12 ){
									if(ampm == 'am'){
										hr = parseInt('0');
									}else{
										hr = parseInt('12');
									}
								}else if(ampm == 'pm'){
									hr = parseInt(hr) + 12;
								}
								window.console &amp;&amp; console.log("setEndTimeNoPost end hour: "+hr);
								window.console &amp;&amp; console.log("setEndTimeNoPost end min: "+min);
								window.console &amp;&amp; console.log("setEndTimeNoPost end ampm: "+ampm);
			                    var rawdate = dijit.byId("c_editselectdate").attr("value")
								var d = rawdate.getDate();
								var m = rawdate.getMonth();
								var y = rawdate.getFullYear();
								window.console &amp;&amp; console.log("setEndTimeNoPost raw day: "+d);
								window.console &amp;&amp; console.log("setEndTimeNoPost raw month: "+m);
								window.console &amp;&amp; console.log("setEndTimeNoPost raw year: "+y);
								
								var temp_hour_min = total *60;//gives seconds
								var tmphr = Math.floor(temp_hour_min/3600);
								var tmpmn = Math.floor((temp_hour_min%3600)/60);

			                    var d = new Date(y, m, d, hr, min, 0, 0);
			                    var newDateObj = new Date(d.getTime() + total*60000);
			                    
			                    var endhour = newDateObj.getHours();
								var endmin = newDateObj.getMinutes();
								var eap = "am";
								if (endhour   > 11) { eap = "pm";        }
								if (endhour   > 12) { endhour = endhour - 12; }
								if (endhour   == 0) { endhour = 12;        }
								window.console &amp;&amp; console.log("setEndTimeNoPost revised end hour: "+endhour);
								window.console &amp;&amp; console.log("setEndTimeNoPost revised end min: "+endmin);
								window.console &amp;&amp; console.log("1 revised end ampm: "+eap);
			                    var ehr = dijit.byId('desiredehour');
			                    ehr.setValue(endhour);
			                    var emin = dijit.byId('desiredeminute');
								if(endmin == "0"){endmin="00";}
			                    emin.setValue(endmin);
			                    var eampm = dijit.byId('desiredeampm');
			                    eampm.setValue(eap);									
							}
						}
					}
				}
				function setEndTime(){
					var donopost = true;
					var svcid = dijit.byId('formapptservice').attr("value");
					if(donopost){
						setEndTimeNoPost(svcid);
					}else{
						standby.show();
			            var deferred = dojo.xhrPost(
			            		{
					                url: "myschedule/svctime",
					                content: {
					                	id: svcid,
					                  },
					                handleAs: "json",
					                load: function(response) {
					                	window.console &amp;&amp; console.log("SUCCESS FROM GET SERVICE TIME");
					                    var total = response.amounttime;
					                    var hr = dijit.byId('desiredhour').value;
					                    var min = dijit.byId('desiredminute').value;
					                    var ampm = dijit.byId('desiredampm').value;
										if(hr == 12 ){
											if(ampm == 'am'){
												hr = parseInt('0');
											}else{
												hr = parseInt('12');
											}
										}else if(ampm == 'pm'){
											hr = parseInt(hr) + 12;
										}
										window.console &amp;&amp; console.log("end hour: "+hr);
										window.console &amp;&amp; console.log("end min: "+min);
										window.console &amp;&amp; console.log("end ampm: "+ampm);
					                    var rawdate = dijit.byId("c_editselectdate").attr("value")
										var d = rawdate.getDate();
										var m = rawdate.getMonth();
										var y = rawdate.getFullYear();
										window.console &amp;&amp; console.log("raw day: "+d);
										window.console &amp;&amp; console.log("raw month: "+m);
										window.console &amp;&amp; console.log("raw year: "+y);
										
										var temp_hour_min = total *60;//gives seconds
										var tmphr = Math.floor(temp_hour_min/3600);
										var tmpmn = Math.floor((temp_hour_min%3600)/60);
	
					                    var d = new Date(y, m, d, hr, min, 0, 0);
					                    var newDateObj = new Date(d.getTime() + total*60000);
					                    
					                    var endhour = newDateObj.getHours();
										var endmin = newDateObj.getMinutes();
										var eap = "am";
										if (endhour   > 11) { eap = "pm";        }
										if (endhour   > 12) { endhour = endhour - 12; }
										if (endhour   == 0) { endhour = 12;        }
										window.console &amp;&amp; console.log("setEndTime revised end hour: "+endhour);
										window.console &amp;&amp; console.log("setEndTime revised end min: "+endmin);
										window.console &amp;&amp; console.log("1 revised end ampm: "+eap);
					                    var ehr = dijit.byId('desiredehour');
					                    ehr.setValue(endhour);
					                    var emin = dijit.byId('desiredeminute');
										if(endmin == "0"){endmin="00";}
					                    emin.setValue(endmin);
					                    var eampm = dijit.byId('desiredeampm');
					                    eampm.setValue(eap);
										standby.hide();
					                },
					                error: function(error) {
					                	window.console &amp;&amp; console.log("ERROR FROM GET SERVICE TIME");
					                    window.console &amp;&amp; console.log(error);
					                    standby.hide();
					                    window.location.reload();
					                }
					            }	            		
			            );
					}
				}
				function displayPersonalDialog(id,edit){
					dijit.byId("isThisAgendaViewFlag").set("value","false");
					var newValue = dijit.byId("c_editselectdate").attr("value");
					var timeblockwidget = dijit.byId("c_personalselectdate");
					window.console &amp;&amp; console.log("newValue "+newValue);
					var dayte = "";
					try{
						window.console &amp;&amp; console.log("newValue: "+newValue);
						dayte = dojo.date.locale.format(newValue, {datePattern: "yyyy-MM-dd", selector: "date"});
					}catch(err){
						window.console &amp;&amp; console.log("could not format the newValue date: "+ err);
						dayte = newValue;
					}
					document.getElementById("hPersonalSelectDate").value=dayte;
					timeblockwidget.set("value",newValue);
					if(edit == true){
						standbydlg = new dojox.widget.Standby({
						  target: "personalDialog"
						});
						document.body.appendChild(standbydlg.domNode);
						standbydlg.show();
					
						$('#updatepersonalbutton').show();
						$('#savepersonalbutton').hide();
						// grab the personl appointment and fill via json and ajax
						
						var deferred = dojo.xhrGet( {
							url : "myschedule/appt?apptid="+id,
							handleAs: "text",
							preventCache: true,
							load : function(response, newValue) {
							
								// handle response codes
								// do something with returned data
								//window.console &amp;&amp; console.log("the appointment object returned: "+response);
								 var isJSON;
								 var data;
									try {
										data = JSON.parse(response);
										isJSON = true;
									}
									catch (e) {
										isJSON = false;
									}

									if (isJSON) {
										// data is already parsed, so just use it
										// handle response codes
										// do something with returned data
										
										if(data.constructor == Array){
										
											for(var key in data) {
												var status = data[key].status;
												var firstname =  "";
												var lastname = "";
												if(data[key].client != null){
													firstname = data[key].client.firstName;
													lastname = data[key].client.lastName;
												}
											
												var sbeginetimex = data[key].s_beginDateTime;

												var sendetimex = data[key].s_endDateTime;

												var iscancelled = false;
												if(data[key].cancelled == null || data[key].cancelled == 'false'){
													iscancelled = false;
												}else{
													iscancelled = data[key].cancelled;
												}
												var apptdate = new Date(data[key].appointmentDate);
												var yearapptdate = apptdate.getFullYear();
												var monthapptdate = apptdate.getMonth()+1;
												var dayapptdate = apptdate.getDate();

												var endtime = new Date(data[key].endDateTime.time);
												var endhour = endtime.getHours();
												var endmin = endtime.getMinutes();
												var eap = "am";
												if (endhour   > 11) { eap = "pm";        }
												if (endhour   > 12) { endhour = endhour - 12; }
												if (endhour   == 0) { endhour = 12;        }
												
												var begintime = new Date(data[key].beginDateTime.time);
												var beginhour = begintime.getHours();
												var beginmin = begintime.getMinutes();
												var ap = "am";
												if (beginhour   > 11) { ap = "pm";        }
												if (beginhour   > 12) { beginhour = beginhour - 12; }
												if (beginhour   == 0) { beginhour = 12;        }

												var staffforappt = data[key].staff.id;
												var staffwidget = dijit.byId("fapptstaff_personal");
												if(staffwidget){
													window.console &amp;&amp; console.log("STAFF FOR APPT IS: " +staffforappt);
													staffwidget.set("value",staffforappt);
												}
										
												var fwidget = dijit.byId("personalhour");
												var coln = sbeginetimex.indexOf(':');
												beginhour = sbeginetimex.substring(0,coln);
												if(fwidget){
													
													fwidget.setValue(beginhour);
												}
												
												var editmin = dijit.byId("personalminute");
												beginmin = sbeginetimex.substring(coln+1,coln+3);
												if(beginmin == 0){
													beginmin = '00';
												}
												if(editmin){
													editmin.setValue(new String(beginmin));
												}
												var editampm = dijit.byId("personalampm");
												ap = sbeginetimex.substring(sbeginetimex.length,sbeginetimex.length-2);
												if(editampm){
													editampm.setValue(ap.toLowerCase());
												}

												// end time
												var fewidget = dijit.byId("personalendhour");
												var coln = sendetimex.indexOf(':');
												endhour = sendetimex.substring(0,coln);
												if(fewidget){
													
													fewidget.setValue(endhour);
												}
												
												var endeditmin = dijit.byId("personalendminute");
												endmin = sendetimex.substring(coln+1,coln+3);
												if(endmin == 0){
													endmin = '00';
												}
												if(endeditmin){
													endeditmin.setValue(new String(endmin));
												}
												var endeditampm = dijit.byId("personalendampm");
												eap = sendetimex.substring(sendetimex.length,sendetimex.length-2);
												if(endeditampm){
													endeditampm.setValue(eap.toLowerCase());
												}
												
												
												var dsrvselect = '';
												dsrvselect = 'editselect';

												var id = "0";
												id = data[key].id;
												
												var notes = "";
												if(data[key].notes == null){
												}else{
													notes = unescape(data[key].notes);
												}

												var personallabel = "";
												if(data[key].personallabel == null){
												}else{
													personallabel = data[key].personallabel;
												}
												var personreason = '';
												personreason = 'personalreason';
												var prd = dijit.byId(personreason);
												prd.set("value",personallabel);
												
												var dapptid = '';
												dapptid = 'editpersonalapptid';

												var d = dijit.byId(dapptid);
												d.set("value",id);
												
												var dno = '';
												dno = 'personalnotes';

												var dnotes = dojo.byId(dno);
												dnotes.value =notes;
											}
										}else{
												sometext = data[0].description;
												window.console &amp;&amp; console.log(sometext);
										}
									}
									else {
										// try treating it as XML
									}		
								standbydlg.hide();													
								return response;
							},
							error: function(error) {
										window.console &amp;&amp; console.log("An unexpected error occurred: " + error);
										standbydlg.hide();
										window.location.reload();
									}													
						});								
						
					}else{
						$('#updatepersonalbutton').hide();
						$('#savepersonalbutton').show();
						dijit.byId('personalDialog').reset();
					}
					dijit.byId('personaledit').set("value",edit);
					dijit.byId('personalDialog').show();
					
				}
				function displayPersonalDialogForFCCalendar(event,edit){
					var id = event.staffid;
					var newValue = event.appointmentdate;
					var status = event.appointmentstatus;
					var timeblockwidget = dijit.byId("c_personalselectdate");
					dijit.byId("isThisAgendaViewFlag").set("value","true");
					var dayte = "";
					try{
						dayte = dojo.date.locale.format(newValue, {datePattern: "yyyy-MM-dd", selector: "date"});
					}catch(err){
						dayte = newValue;
					}
					document.getElementById("hPersonalSelectDate").value=dayte;
					timeblockwidget.set("value",newValue);
					if(edit == true){
						$('#updatepersonalbutton').show();
						$('#savepersonalbutton').hide();
						var status = event.appointmentstatus;
						var firstname =  "";
						var lastname = "";
						if(event.clientid != ''){
							firstname = event.clientfirstname;
							lastname = event.clientlastname;
						}
					
						var iscancelled = false;
						if(status != 'CANCELED'){
							iscancelled = false;
						}else{
							iscancelled = true;
						}

						var apptdate = event.appointmentdate;
						var yearapptdate = apptdate.getFullYear();
						var monthapptdate = apptdate.getMonth()+1;
						var dayapptdate = apptdate.getDate();

						var endhour = event.endhour;
						var endmin = event.endmin;
						var eap = "am";
						if (endhour   > 11) { eap = "pm";        }
						if (endhour   > 12) { endhour = endhour - 12; }
						if (endhour   == 0) { endhour = 12;        }
						
						var beginhour = event.beginhour;
						var beginmin = event.beginmin;
						var ap = event.beginampm

						var staffforappt = event.staffid;
						var staffwidget = dijit.byId("fapptstaff_personal");
						if(staffwidget){
							staffwidget.set("value",staffforappt);
						}
				
						var fwidget = dijit.byId("personalhour");
						beginhour = event.beginhour;
						if(fwidget){
							fwidget.setValue(beginhour);
						}
						
						var editmin = dijit.byId("personalminute");
						if(editmin){
							editmin.setValue(new String(beginmin));
						}
						var editampm = dijit.byId("personalampm");
						ap = event.beginampm;
						if(editampm){
							editampm.setValue(ap.toLowerCase());
						}

						// end time
						var fewidget = dijit.byId("personalendhour");
						endhour = event.endhour;
						if(fewidget){
							fewidget.setValue(endhour);
						}
						
						var endeditmin = dijit.byId("personalendminute");
						endmin = event.endmin;
						if(endeditmin){
							endeditmin.setValue(new String(endmin));
						}
						var endeditampm = dijit.byId("personalendampm");
						eap = event.endampm;
						if(endeditampm){
							endeditampm.setValue(eap.toLowerCase());
						}
						
						
						var dsrvselect = '';
						dsrvselect = 'editselect';

						var id = "0";
						id = event.appointmentid;
						
						var notes = "";
						if(event.appointmentnotes == null){
						}else{
							notes = event.appointmentnotes;
						}

						var personallabel = "";
						if(event.personallabel == null){
						}else{
							personallabel = event.personallabel;
						}
						var personreason = '';
						personreason = 'personalreason';
						var prd = dijit.byId(personreason);
						prd.set("value",personallabel);
						
						var dapptid = '';
						dapptid = 'editpersonalapptid';

						var d = dijit.byId(dapptid);
						d.set("value",id);
						
						var dno = '';
						dno = 'personalnotes';

						var dnotes = dojo.byId(dno);
						dnotes.value =notes;
					}else{
						$('#updatepersonalbutton').hide();
						$('#savepersonalbutton').show();
						dijit.byId('personalDialog').reset();
					}
					dijit.byId('personaledit').set("value",edit);
					dijit.byId('personalDialog').show();
					
				}				
				function init() {
				      standby = new dojox.widget.Standby({
				          target: "myTabContainer"
				      });
				      document.body.appendChild(standby.domNode);
				      //standby.show();
						setInterval(function() {
							isAlive();
						}, 660000); //11 minutes 660000				      
				  }				
							  
				
								
			 </script>		 
			 
		 </div>
	 
	<div id="id_dialog" dojoType="dijit.Dialog" title="Confirmation" style="display: none">
		<div style="width:200px; height:50px">
			<div id="id_dialog_text"/>
		</div>
	 
		<div class="dijitDialogPaneActionBar">
			<button 
				dojoType="dijit.form.Button" 
				type="submit" 
				id="id_dialog_button_1"
			>Yes</button>
			<button 
				dojoType="dijit.form.Button" 
				type="button" 
				onClick="dijit.byId('id_dialog').onCancel();" 
				id="id_dialog_button_2"
			>No</button>
		</div>
	</div>
				<div dojoType="dijit.Dialog" id="addClientDialog" title="Add client" execute="addClient(arguments[0]);" style="height: 166px; width:250px;display: none">
					<div>
						<label for="firstname_dlg">First name:</label>
					</div>
					<br/>
					<div>
						<div dojoType="dijit.form.ValidationTextBox" id="firstname_dlg" required="true" >
							<script type="dojo/connect" event="onKeyPress" args="event">
								var firstname = dijit.byId('firstname_dlg').attr("value");
								dijit.byId('firstname_dlg').set("value", toTitleCase(firstname)); 
							</script>
						</div>					
					</div>
					
					<div>
						<label for="lastname_dlg">Last name:</label>
					</div>
					<br/>
					<div>
						<div dojoType="dijit.form.ValidationTextBox" id="lastname_dlg" required="true" >
							<script type="dojo/connect" event="onKeyPress" args="event">
								var lastname = dijit.byId('lastname_dlg').attr("value");
								dijit.byId('lastname_dlg').set("value", toTitleCase(lastname)); 
							</script>
						</div>					
					</div>
					<div>
						<label for="home_phonenumber_dlg">H. Ph.:</label>
					</div>
					<div>
						<div dojoType="dijit.form.ValidationTextBox" id="home_phonenumber_dlg" required="false" />
					</div>
					<button dojoType="dijit.form.Button" type="button" onClick="if(dijit.byId('addClientDialog').validate()){saveAddDialog();dijit.byId('addClientDialog').hide();}">
						Save
					</button>
				</div>
		</div>
	</div>				 
</div>