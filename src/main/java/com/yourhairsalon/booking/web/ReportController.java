package com.yourhairsalon.booking.web;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.TimeZone;

import javax.persistence.TypedQuery;
import javax.servlet.http.HttpServletRequest;

import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;

import org.apache.commons.logging.LogFactory;
//import org.jfree.util.Log;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.ldap.userdetails.InetOrgPerson;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.view.RedirectView;

import com.yourhairsalon.booking.domain.Appointment;
import com.yourhairsalon.booking.domain.AppointmentDeep;
import com.yourhairsalon.booking.domain.BaseService;
import com.yourhairsalon.booking.domain.Clients;
import com.yourhairsalon.booking.domain.Payments;
import com.yourhairsalon.booking.domain.Shop;
import com.yourhairsalon.booking.domain.ShopSettings;
import com.yourhairsalon.booking.domain.Staff;
import com.yourhairsalon.booking.form.ClientPlusNote;
import com.yourhairsalon.booking.form.DateRangeForm;
import com.yourhairsalon.booking.form.UserPreference;
import com.yourhairsalon.booking.reference.ScheduleStatus;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
/**
 * This class is generated by <b>jasperoo setup</b>.
 * Request mapping methods are added by <b>jasperoo add</b> or <b>jasperoo all</b>.
 * 
 * <b>ANYTHING ADDED AFTER THE CLOSING BRACE WILL BE DELETED BY <u>jasperoo add</u>!</b>
 */
@RequestMapping("/reports")
@Controller
public class ReportController {
	
	private static final Log log = LogFactory.getLog(ReportController.class);
    
	@Autowired
    private UserPreference preferences;
	
	protected ExcelReportService excelReportService = new ExcelReportService();

	private Shop shop;
	
    private void setShop(Shop shop){
    	getPreferences().setShop(shop);
    	this.shop = shop;
    }
	private Shop getShop(){
		log.debug("ENTERED getShop IndexController");
		Object obj = SecurityContextHolder.getContext().getAuthentication().getPrincipal();
    	if(obj instanceof InetOrgPerson) {
			log.debug("The principal object is InetOrgPerson");
			String parentshop = ((InetOrgPerson) obj).getO();
			String username = ((UserDetails) obj).getUsername();
			log.info("parentshop of LOGGED IN USER: " + parentshop);
			log.info("username of LOGGED IN USER: " + username);
			if(getPreferences().getShop() == null){
				TypedQuery<Shop> shop = null;
				if(parentshop == null){
					parentshop = username;
				}
				shop = Shop.findShopsByShopuuid(parentshop);
				log.debug("the returned results for looking for "+ parentshop + " is a size of: " + shop.getResultList().size());
				if(shop.getResultList().size() > 0){
					getPreferences().setShop(shop.getResultList().get(0));
					
				}
			}			
		}else if (obj instanceof UserDetails) {
			log.debug("The principal object is UserDetails");
			String username = ((UserDetails) obj).getUsername();
			log.debug("username: "+username);
			log.debug("preferences: "+getPreferences());
			if (getPreferences().getShop()==null) {
				log.info("LOGGED IN USER: " + username);
				TypedQuery<Shop> shop = Shop.findShopsByShopuuid(username);
				log.debug("the returned results for looking for "+ username + " is a size of: " + shop.getResultList().size());
				if(shop.getResultList().size() > 0){
					getPreferences().setShop(shop.getResultList().get(0));
					
				}else{
					// see if you can find the username in staff and then get shop from that
					log.debug("TRYING TO ASSOCIATE A SHOP WITH THE LOGGED IN PERSON");
					TypedQuery<Staff> staf = Staff.findStaffsByUsername(username);
					if(staf.getResultList().size() > 0){
						Staff staff = staf.getResultList().get(0);
						Shop sh = staff.getShop();
						shop = Shop.findShopsByShopuuid(sh.getShopuuid());
						log.debug("shopuuid: "+ sh.getShopuuid());
						if(shop.getResultList().size() > 0){
							getPreferences().setShop(sh);
							
						}
						
					}
				}
			}
		}			
    	log.debug("EXITING getShop IndexController");
		return getPreferences().getShop();
	}	
	// ********************************************************************************************
	// begin : Exporting reports to excel

	@RequestMapping(value = "/exportclients", method = RequestMethod.GET)
	public ModelAndView getExportClients() {
		
		List<ClientPlusNote> reportList = excelReportService.getClientListPlusNotes(getShop());
		
		return new ModelAndView("ReportListExcel", "clientReportList", reportList);
	}

	@RequestMapping(value = "/exportappointments", method = RequestMethod.GET)
	public ModelAndView getExportAppointments() {
		ArrayList<Clients> reportList = excelReportService.getRecordsList();
		return new ModelAndView("ReportListExcel", "reportList", reportList);
	}

	@RequestMapping(value = "/exporttodayspayments", method = RequestMethod.GET)
	public ModelAndView getExportTodaysPayments(@RequestParam(value="staff",required=false) String staffid) {
		log.debug("ENTERED getExportTodaysPayments");
		
		
		List<Payments> reportList = excelReportService.getTodaysPayments(staffid,getShop());
		
		log.debug("EXITING getExportTodaysPayments");
		
		return new ModelAndView("ReportListExcel", "reportTodaysPaymentsList", reportList);
	}

	@RequestMapping(value = "/exportthisweekpayments", method = RequestMethod.GET)
	public ModelAndView getExportThisWeekPayments() {
		ArrayList<Clients> reportList = excelReportService.getRecordsList();
		return new ModelAndView("ReportListExcel", "reportList", reportList);
	}

	@RequestMapping(value = "/exportlastweekpayments", method = RequestMethod.GET)
	public ModelAndView getExportLastWeekPayments() {
		ArrayList<Clients> reportList = excelReportService.getRecordsList();
		return new ModelAndView("ReportListExcel", "reportList", reportList);
	}
	
	@RequestMapping(value = "/exportthismonthpayments", method = RequestMethod.GET)
	public ModelAndView getExportThisMonthPayments() {
		ArrayList<Clients> reportList = excelReportService.getRecordsList();
		return new ModelAndView("ReportListExcel", "reportList", reportList);
	}

	@RequestMapping(value = "/exportlastmonthpayments", method = RequestMethod.GET)
	public ModelAndView getExportLastMonthPayments() {
		ArrayList<Clients> reportList = excelReportService.getRecordsList();
		return new ModelAndView("ReportListExcel", "reportList", reportList);
	}

	@RequestMapping(value = "/exportthisyearpayments", method = RequestMethod.GET)
	public ModelAndView getExportThisYearPayments() {
		ArrayList<Clients> reportList = excelReportService.getRecordsList();
		return new ModelAndView("ReportListExcel", "reportList", reportList);
	}

	@RequestMapping(value = "/exportlastyearpayments", method = RequestMethod.GET)
	public ModelAndView getExportLastYearPayments() {
		ArrayList<Clients> reportList = excelReportService.getRecordsList();
		return new ModelAndView("ReportListExcel", "reportList", reportList);
	}

	@RequestMapping(value = "/exporttodaysnonchecked", method = RequestMethod.GET)
	public ModelAndView getExportTodaysNonChecked() {
		ArrayList<Clients> reportList = excelReportService.getRecordsList();
		return new ModelAndView("ReportListExcel", "reportList", reportList);
	}

	@RequestMapping(value = "/exportthisweeknonchecked", method = RequestMethod.GET)
	public ModelAndView getExportThisWeekNonChecked() {
		ArrayList<Clients> reportList = excelReportService.getRecordsList();
		return new ModelAndView("ReportListExcel", "reportList", reportList);
	}

	@RequestMapping(value = "/exportlastweeknonchecked", method = RequestMethod.GET)
	public ModelAndView getExportLastWeekNonChecked() {
		ArrayList<Clients> reportList = excelReportService.getRecordsList();
		return new ModelAndView("ReportListExcel", "reportList", reportList);
	}
	
	@RequestMapping(value = "/exportthismonthnonchecked", method = RequestMethod.GET)
	public ModelAndView getExportThisMonthNonChecked() {
		ArrayList<Clients> reportList = excelReportService.getRecordsList();
		return new ModelAndView("ReportListExcel", "reportList", reportList);
	}

	@RequestMapping(value = "/exportlastmonthnonchecked", method = RequestMethod.GET)
	public ModelAndView getExportLastMonthNonChecked() {
		ArrayList<Clients> reportList = excelReportService.getRecordsList();
		return new ModelAndView("ReportListExcel", "reportList", reportList);
	}

	@RequestMapping(value = "/exportthisyearnonchecked", method = RequestMethod.GET)
	public ModelAndView getExportThisYearNonChecked() {
		ArrayList<Clients> reportList = excelReportService.getRecordsList();
		return new ModelAndView("ReportListExcel", "reportList", reportList);
	}

	@RequestMapping(value = "/exportlastyearnonchecked", method = RequestMethod.GET)
	public ModelAndView getExportLastYearNonChecked() {
		ArrayList<Clients> reportList = excelReportService.getRecordsList();
		return new ModelAndView("ReportListExcel", "reportList", reportList);
	}	
	// end : Exporting reports to excel
	// ********************************************************************************************
	@RequestMapping(method = RequestMethod.GET)
	public ModelAndView init(Model uiModel) {
		log.debug("ENTERED init() of reports");
		ModelAndView mav = new ModelAndView();
		mav.setViewName("reports");
		log.debug("EXITING init() of reports");
		return mav;
	}
	
	@RequestMapping(value ="/payhistory", method = RequestMethod.POST)
	public ModelAndView newView(Model uiModel) {
		log.debug("ENTERED newView of reports");
		ModelAndView mav = new ModelAndView();
		mav.setViewName("payhistory");
		log.debug("EXITING newView of reports");
		return mav;
	}
	
	/*
 * The template for the "List" Request mapping methods is: 
 *
 *	@RequestMapping(value ="/**ENTITY_NAME_LOWER**List/{format}", method = RequestMethod.GET)
 *	public String report**ENTITY_NAME**List(ModelMap modelMap, @PathVariable("format") String format) {
 *		JRBeanCollectionDataSource jrDataSource = new JRBeanCollectionDataSource(**ENTITY_NAME**.findAll**REPORT_TITLE**(),false);
 *		modelMap.put("reportData", jrDataSource);
 *		modelMap.put("format", format);
 *		return "**ENTITY_NAME_LOWER**ReportList";
 *	}
 */

	@RequestMapping(value ="/staffList/{format}", method = RequestMethod.GET)
	public String reportStaffList(ModelMap modelMap, @PathVariable("format") String format) {
		JRBeanCollectionDataSource jrDataSource = new JRBeanCollectionDataSource(com.yourhairsalon.booking.domain.Staff.findAllStaffs(),false);
		modelMap.put("reportData", jrDataSource);
		modelMap.put("format", format);
		return "staffReportList";
	}

	@RequestMapping(value ="/staffDetail/{id}/{format}", method = RequestMethod.GET)
	public String reportStaffDetail(ModelMap modelMap, @PathVariable("id") Long id, @PathVariable("format") String format) {
		JRBeanCollectionDataSource jrDataSource = new JRBeanCollectionDataSource(com.yourhairsalon.booking.domain.Staff.findStaffsById(id).getResultList(),false);
		modelMap.put("reportData", jrDataSource);
		modelMap.put("format", format);
		return "staffReportDetail";
	}

	@RequestMapping(value ="/shopList/{format}", method = RequestMethod.GET)
	public String reportShopList(ModelMap modelMap, @PathVariable("format") String format) {
		JRBeanCollectionDataSource jrDataSource = new JRBeanCollectionDataSource(com.yourhairsalon.booking.domain.Shop.findAllShops(),false);
		modelMap.put("reportData", jrDataSource);
		modelMap.put("format", format);
		return "shopReportList";
	}

	@RequestMapping(value ="/shopDetail/{id}/{format}", method = RequestMethod.GET)
	public String reportShopDetail(ModelMap modelMap, @PathVariable("id") Long id, @PathVariable("format") String format) {
		JRBeanCollectionDataSource jrDataSource = new JRBeanCollectionDataSource(com.yourhairsalon.booking.domain.Shop.findShopsById(id).getResultList(),false);
		modelMap.put("reportData", jrDataSource);
		modelMap.put("format", format);
		return "shopReportDetail";
	}

	@RequestMapping(value ="/clientsList/{format}", method = RequestMethod.GET)
	public String reportClientsList(ModelMap modelMap, @PathVariable("format") String format) {
		JRBeanCollectionDataSource jrDataSource = new JRBeanCollectionDataSource(com.yourhairsalon.booking.domain.Clients.findAllClientses(),false);
		modelMap.put("reportData", jrDataSource);
		modelMap.put("format", format);
		return "clientsReportList";
	}

	@RequestMapping(value ="/clientsDetail/{id}/{format}", method = RequestMethod.GET)
	public String reportClientsDetail(ModelMap modelMap, @PathVariable("id") Long id, @PathVariable("format") String format) {
		JRBeanCollectionDataSource jrDataSource = new JRBeanCollectionDataSource(com.yourhairsalon.booking.domain.Clients.findClientsesById(id).getResultList(),false);
		modelMap.put("reportData", jrDataSource);
		modelMap.put("format", format);
		return "clientsReportDetail";
	}

	@RequestMapping(value ="/paymentsList/{format}", method = RequestMethod.GET)
	public String reportPaymentsList(ModelMap modelMap, @PathVariable("format") String format) {
		JRBeanCollectionDataSource jrDataSource = new JRBeanCollectionDataSource(com.yourhairsalon.booking.domain.Payments.findAllPaymentses(),false);
		modelMap.put("reportData", jrDataSource);
		modelMap.put("format", format);
		return "paymentsReportList";
	}

	private Date convertStringToDate(String stringdate) {
		Date newdate = new Date();
		try {
			String str_date = stringdate;
			DateFormat formatter;
			Date date;
			formatter = new SimpleDateFormat("yyyy-MM-dd");
			newdate = (Date) formatter.parse(str_date);
		} catch (ParseException e) {
		}
		return newdate;
	}
	
	@RequestMapping(value ="/paymentsShop/{id}/{begindate}/{enddate}/{format}", method = RequestMethod.GET)
	public ModelAndView reportPaymentsShopList(ModelMap modelMap,@PathVariable("id") Long id,@PathVariable("begindate") String sbegindate,@PathVariable("enddate") String senddate, @PathVariable("format") String format) {
		log.debug("ENTERED reportPaymentsShopList");
		ModelAndView mav = new ModelAndView();
		Shop shop = Shop.findShop(id);
		Date begindate = convertStringToDate(sbegindate);
		Date enddate = convertStringToDate(senddate);
		TypedQuery<Payments> datas = com.yourhairsalon.booking.domain.Payments.findPaymentsesByShopAndDatecreatedBetween(shop,begindate,enddate);
		
		JRBeanCollectionDataSource jrDataSource = new JRBeanCollectionDataSource(datas.getResultList(),false);
		modelMap.put("reportData", jrDataSource);
		modelMap.put("format", format);
		mav.addObject("payments",datas.getResultList());
		log.debug("the number of payments returned: "+datas.getResultList().size());
		modelMap.put("payments", datas.getResultList());
		mav.setView(new RedirectView("../reports/payhistory"));
		log.debug("EXITING reportPaymentsShopList");
		return mav;
	}

	@RequestMapping(value ="/paymentsShop/daterangereport", method = RequestMethod.POST)
	public ModelAndView dateRangeReport(
			@ModelAttribute("range") DateRangeForm rangeform,
			@RequestParam(value="staff",required=false) String staffid,
			ModelMap modelMap, HttpServletRequest request
			) {
		log.debug("ENTERED dateRangeReport");
		log.debug("begin date: "+rangeform.getBegindate());
		log.debug("end date"+rangeform.getEnddate());
		
		Staff comparestaff = null;
		if(staffid != null && !staffid.equalsIgnoreCase("")){
			Long staff_id = Long.parseLong(staffid);
			comparestaff = Staff.findStaff(staff_id);
			
		}
		
		ModelAndView mav = new ModelAndView();
		TypedQuery<Payments> datas = null;
		
		if(comparestaff == null){
			datas = com.yourhairsalon.booking.domain.Payments.findPaymentsesByShopAndDatecreatedBetween(getShop(),rangeform.getBegindate(),rangeform.getEnddate());
		}else{
			datas = com.yourhairsalon.booking.domain.Payments.findPaymentsesByShopAndDatecreatedBetweenAndStaffEquals(getShop(),rangeform.getBegindate(),rangeform.getEnddate(),comparestaff);
		}
		mav.addObject("payments",datas.getResultList());
		
		List<Payments> list = datas.getResultList();
		
		Float totalamount = 0.00F;
		Float totalgratuity = 0.00F;
		Float totalamountgratuity = 0.00F;
		for (Iterator i = list.iterator(); i.hasNext();) {
			Payments base = (Payments) i.next();
			float amount = base.getAmount();
			totalamount += amount;
			float grat = base.getGratuity();
			totalgratuity += grat;
		}		
		totalamountgratuity = totalgratuity + totalamount; 
		modelMap.put("totalamount", totalamount);
		modelMap.put("totalgratuity", totalgratuity);
		modelMap.put("totalamountgratuity", totalamountgratuity);		
		
		modelMap.put("firstday", rangeform.getBegindate());
		modelMap.put("lastday", rangeform.getEnddate());
		
		
		log.debug("the number of payments returned: "+datas.getResultList().size());
		modelMap.put("payments", datas.getResultList());
		modelMap.addAttribute("range", new DateRangeForm());
		modelMap.addAttribute("action_url","../../reports/paymentsShop/daterangereport");
		mav.setViewName("reports/payhistory");
		log.debug("EXITING dateRangeReport");
		return mav;
	}
	// BEGIN OF NOT CHECKED OR ACTIVE REPORTS
	
	/**
	 * this is the not checked out list of appointments
	 * otherwise known as ACTIVE
	 * 
	 * @param modelMap
	 * @param request
	 * @return
	 */
	@RequestMapping(value ="/paymentsShop/todaysactivereport", method = RequestMethod.GET)
	public ModelAndView activeTodaysReport(
			ModelMap modelMap, 
			@RequestParam(value="staff",required=false) String staffid,
			HttpServletRequest request
			) {
		log.debug("ENTERED activeTodaysReport");
		
		Staff comparestaff = null;
		if(staffid != null && !staffid.equalsIgnoreCase("")){
			Long staff_id = Long.parseLong(staffid);
			comparestaff = Staff.findStaff(staff_id);
			
		}
		
		String shoptimezone = "";
		try{
			TypedQuery<ShopSettings> shopsettings = ShopSettings.findShopSettingsesByShop(getShop());
			ShopSettings shopsetting = shopsettings.getResultList().get(0);
			shoptimezone = shopsetting.getTimezone();
			if(shoptimezone == null){
				shoptimezone = "MST";
				shopsetting.setTimezone(shoptimezone);
				shopsetting.merge();
			}
		}catch(Exception e){
			log.error(e);
		}
		
		TimeZone tz = TimeZone.getTimeZone(shoptimezone);
		Date dateValue = new Date();
		Calendar calValue = Calendar.getInstance(tz);
		String selecteddate = "";
		DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
		Date beginofday = null;
		Date endofday = null;
		
		try {
			String dateString = df.format(calValue.getTime());
			endofday = df.parse(dateString);
			beginofday = df.parse(dateString);
		} catch (ParseException e) {
			e.printStackTrace();
		}
		beginofday.setHours(0);
		beginofday.setMinutes(0);

		
		ModelAndView mav = new ModelAndView();
		TypedQuery<Appointment> appointments = null;
		if(comparestaff == null){
			appointments = Appointment.findAppointmentsByShopAndStatusAndClientIsNotNullAndAppointmentDateBetween(getShop(), ScheduleStatus.ACTIVE, beginofday,endofday);
		}else{
			appointments = Appointment.findAppointmentsByShopAndStatusAndClientIsNotNullAndAppointmentDateBetweenAndStaffEquals(getShop(), ScheduleStatus.ACTIVE, beginofday,endofday,comparestaff);
		}
		List<AppointmentDeep> apptdeep = new ArrayList<AppointmentDeep>();
		if(appointments.getResultList().size()>0){
			for(int x=0;x<appointments.getResultList().size();x++){
				Appointment appt = appointments.getResultList().get(x);
				log.debug("The toString of appt: "+ appt.toString());
				AppointmentDeep deep = new AppointmentDeep(appt);
				log.debug("The toString of DEEP appt: "+ deep.toString());
				apptdeep.add(deep);
			}
			
		}
		
		
		modelMap.put("firstday", beginofday);
		modelMap.put("lastday", endofday);
		
		log.debug("the number of appointments returned: "+apptdeep.size());
		modelMap.put("appointments", apptdeep);
		log.debug("displaying normal site");
		mav.setViewName("reports/active");

		log.debug("EXITING activeTodaysReport");
		return mav;
	}
	/**
	 * For appointments with status ACTIVE
	 * 
	 * @param modelMap
	 * @param request
	 * @return
	 */
	@RequestMapping(value ="/paymentsShop/thisweeksactivereport", method = RequestMethod.GET)
	public ModelAndView activeThisWeekReport(
			ModelMap modelMap,
			@RequestParam(value="staff",required=false) String staffid,
			HttpServletRequest request
			) {
		log.debug("ENTERED activeThisWeekReport");

		Staff comparestaff = null;
		if(staffid != null && !staffid.equalsIgnoreCase("")){
			Long staff_id = Long.parseLong(staffid);
			comparestaff = Staff.findStaff(staff_id);
			
		}
		
		String shoptimezone = "";
		try{
			TypedQuery<ShopSettings> shopsettings = ShopSettings.findShopSettingsesByShop(getShop());
			ShopSettings shopsetting = shopsettings.getResultList().get(0);
			shoptimezone = shopsetting.getTimezone();
			if(shoptimezone == null){
				shoptimezone = "MST";
				shopsetting.setTimezone(shoptimezone);
				shopsetting.merge();
			}
		}catch(Exception e){
			log.error(e);
		}
		///////////////////////////////////////////////////////////
		TimeZone tz = TimeZone.getTimeZone(shoptimezone);
		Date dateValue = new Date();
		Calendar calValue = Calendar.getInstance(tz);
		calValue.setTime(dateValue);
		
		// Set the calendar to monday of the current week
		calValue.set(Calendar.DAY_OF_WEEK, calValue.getFirstDayOfWeek());
		
		Date beginofweek = null;
		Date endofweek = null;

		// Print dates of the current week starting on Monday
		DateFormat df = new SimpleDateFormat("EEE dd/MM/yyyy");
		for (int i = 0; i < 7; i++) {
			if(i == 0){
				beginofweek = calValue.getTime();
				beginofweek.setHours(0);
				beginofweek.setMinutes(0);
			}
			
			if(i == 6){
				endofweek = calValue.getTime();
				endofweek.setHours(23);
				endofweek.setMinutes(59);
			}
		    calValue.add(Calendar.DATE, 1);
		}
		///////////////////////////////////////////////////////////////
		
		ModelAndView mav = new ModelAndView();
		
		TypedQuery<Appointment> appointments = null;
		if(comparestaff==null){
			appointments = Appointment.findAppointmentsByShopAndStatusAndClientIsNotNullAndAppointmentDateBetween(getShop(), ScheduleStatus.ACTIVE, beginofweek,endofweek);
		}else{
			appointments = Appointment.findAppointmentsByShopAndStatusAndClientIsNotNullAndAppointmentDateBetweenAndStaffEquals(getShop(), ScheduleStatus.ACTIVE, beginofweek,endofweek,comparestaff);
		}
		List<AppointmentDeep> apptdeep = new ArrayList<AppointmentDeep>();
		if(appointments.getResultList().size()>0){
			for(int x=0;x<appointments.getResultList().size();x++){
				Appointment appt = appointments.getResultList().get(x);
				log.debug("The toString of appt: "+ appt.toString());
				AppointmentDeep deep = new AppointmentDeep(appt);
				log.debug("The toString of DEEP appt: "+ deep.toString());
				apptdeep.add(deep);
			}
			
		}
		
		
		modelMap.put("firstday", beginofweek);
		modelMap.put("lastday", endofweek);
		
		log.debug("the number of appointments returned: "+apptdeep.size());
		modelMap.put("appointments", apptdeep);
		log.debug("displaying normal site");
		mav.setViewName("reports/active");

		log.debug("EXITING activeThisWeekReport");
		return mav;
	}	
	/**
	 * For appointments with status ACTIVE
	 * 
	 * @param modelMap
	 * @param request
	 * @return
	 */
	@RequestMapping(value ="/paymentsShop/lastweeksactivereport", method = RequestMethod.GET)
	public ModelAndView activeLastWeekReport(
			ModelMap modelMap,
			@RequestParam(value="staff",required=false) String staffid,
			HttpServletRequest request
			) {
		log.debug("ENTERED activeLastWeekReport");

		Staff comparestaff = null;
		if(staffid != null && !staffid.equalsIgnoreCase("")){
			Long staff_id = Long.parseLong(staffid);
			comparestaff = Staff.findStaff(staff_id);
			
		}

		String shoptimezone = "";
		try{
			TypedQuery<ShopSettings> shopsettings = ShopSettings.findShopSettingsesByShop(getShop());
			ShopSettings shopsetting = shopsettings.getResultList().get(0);
			shoptimezone = shopsetting.getTimezone();
			if(shoptimezone == null){
				shoptimezone = "MST";
				shopsetting.setTimezone(shoptimezone);
				shopsetting.merge();
			}
		}catch(Exception e){
			log.error(e);
		}
		///////////////////////////////////////////////////////////
		TimeZone tz = TimeZone.getTimeZone(shoptimezone);
		Date dateValue = new Date();
		Calendar calValue = Calendar.getInstance(tz);
		calValue.setTime(dateValue);
		
		// Set the calendar to monday of the current week
		calValue.set(Calendar.DAY_OF_WEEK, calValue.getFirstDayOfWeek());
		calValue.add(Calendar.DATE, -7);
		
		Date beginofweek = null;
		Date endofweek = null;

		// Print dates of the current week starting on Monday
		DateFormat df = new SimpleDateFormat("EEE dd/MM/yyyy");
		for (int i = 0; i < 7; i++) {
			if(i == 0){
				beginofweek = calValue.getTime();
				beginofweek.setHours(0);
				beginofweek.setMinutes(0);
			}
			
			if(i == 6){
				endofweek = calValue.getTime();
				endofweek.setHours(23);
				endofweek.setMinutes(59);
			}
		    calValue.add(Calendar.DATE, 1);
		}
		///////////////////////////////////////////////////////////////
		
		ModelAndView mav = new ModelAndView();
		//TypedQuery<Appointment> appointments = Appointment.findAppointmentsByShopAndStatusAndClientIsNotNullAndAppointmentDateBetween(getShop(), ScheduleStatus.ACTIVE, beginofweek,endofweek);
		TypedQuery<Appointment> appointments = null;
		if(comparestaff==null){
			appointments = Appointment.findAppointmentsByShopAndStatusAndClientIsNotNullAndAppointmentDateBetween(getShop(), ScheduleStatus.ACTIVE, beginofweek,endofweek);
		}else{
			appointments = Appointment.findAppointmentsByShopAndStatusAndClientIsNotNullAndAppointmentDateBetweenAndStaffEquals(getShop(), ScheduleStatus.ACTIVE, beginofweek,endofweek,comparestaff);
		}
		
		
		List<AppointmentDeep> apptdeep = new ArrayList<AppointmentDeep>();
		if(appointments.getResultList().size()>0){
			for(int x=0;x<appointments.getResultList().size();x++){
				Appointment appt = appointments.getResultList().get(x);
				log.debug("The toString of appt: "+ appt.toString());
				AppointmentDeep deep = new AppointmentDeep(appt);
				log.debug("The toString of DEEP appt: "+ deep.toString());
				apptdeep.add(deep);
			}
			
		}
		
		
		modelMap.put("firstday", beginofweek);
		modelMap.put("lastday", endofweek);
		
		log.debug("the number of appointments returned: "+apptdeep.size());
		modelMap.put("appointments", apptdeep);
		log.debug("displaying normal site");
		mav.setViewName("reports/active");
		log.debug("EXITING activeLastWeekReport");
		return mav;
	}		
	/**
	 * For appointments with status ACTIVE
	 * 
	 * @param modelMap
	 * @param request
	 * @return
	 */
	@RequestMapping(value ="/paymentsShop/thismonthsactivereport", method = RequestMethod.GET)
	public ModelAndView activeThisMonthReport(
			ModelMap modelMap, 
			@RequestParam(value="staff",required=false) String staffid,
			HttpServletRequest request) {
		log.debug("ENTERED activeThisMonthReport");

		Staff comparestaff = null;
		if(staffid != null && !staffid.equalsIgnoreCase("")){
			Long staff_id = Long.parseLong(staffid);
			comparestaff = Staff.findStaff(staff_id);
			
		}

		String shoptimezone = "";
		try{
			TypedQuery<ShopSettings> shopsettings = ShopSettings.findShopSettingsesByShop(getShop());
			ShopSettings shopsetting = shopsettings.getResultList().get(0);
			shoptimezone = shopsetting.getTimezone();
			if(shoptimezone == null){
				shoptimezone = "MST";
				shopsetting.setTimezone(shoptimezone);
				shopsetting.merge();
			}
		}catch(Exception e){
			log.error(e);
		}
		///////////////////////////////////////////////////////////
		TimeZone tz = TimeZone.getTimeZone(shoptimezone);
		Date dateValue = new Date();
		Calendar firstDayofMonth = Calendar.getInstance(tz);
		firstDayofMonth.setTime(dateValue);
		firstDayofMonth.set(Calendar.DAY_OF_MONTH, 1);
		firstDayofMonth.getTime().setHours(0);
		firstDayofMonth.getTime().setMinutes(0);
		Date firstDay = firstDayofMonth.getTime();
		
		Calendar calValue = Calendar.getInstance(tz);
		calValue.setTime(dateValue);
		
		calValue.add(Calendar.MONTH, 1);  
		calValue.set(Calendar.DAY_OF_MONTH, 1);  
		calValue.add(Calendar.DATE, -1);  
  
        Date lastDayOfMonth = calValue.getTime();  
        lastDayOfMonth.setHours(23);
        lastDayOfMonth.setMinutes(59);
		///////////////////////////////////////////////////////////////
		
		ModelAndView mav = new ModelAndView();
		//TypedQuery<Appointment> appointments = Appointment.findAppointmentsByShopAndStatusAndClientIsNotNullAndAppointmentDateBetween(getShop(), ScheduleStatus.ACTIVE, firstDay,lastDayOfMonth);
		TypedQuery<Appointment> appointments = null;
		if(comparestaff==null){
			appointments = Appointment.findAppointmentsByShopAndStatusAndClientIsNotNullAndAppointmentDateBetween(getShop(), ScheduleStatus.ACTIVE, firstDay,lastDayOfMonth);
		}else{
			appointments = Appointment.findAppointmentsByShopAndStatusAndClientIsNotNullAndAppointmentDateBetweenAndStaffEquals(getShop(), ScheduleStatus.ACTIVE, firstDay,lastDayOfMonth,comparestaff);
		}
		
		List<AppointmentDeep> apptdeep = new ArrayList<AppointmentDeep>();
		if(appointments.getResultList().size()>0){
			for(int x=0;x<appointments.getResultList().size();x++){
				Appointment appt = appointments.getResultList().get(x);
				log.debug("The toString of appt: "+ appt.toString());
				AppointmentDeep deep = new AppointmentDeep(appt);
				log.debug("The toString of DEEP appt: "+ deep.toString());
				apptdeep.add(deep);
			}
			
		}
		
		
		modelMap.put("firstday", firstDay);
		modelMap.put("lastday", lastDayOfMonth);
		
		log.debug("the number of appointments returned: "+apptdeep.size());
		modelMap.put("appointments", apptdeep);
		log.debug("displaying normal site");
		mav.setViewName("reports/active");
		log.debug("EXITING activeThisMonthReport");
		return mav;
	}	
	/**
	 * For appointments with status ACTIVE
	 * 
	 * @param modelMap
	 * @param request
	 * @return
	 */
	@RequestMapping(value ="/paymentsShop/lastmonthsactivereport", method = RequestMethod.GET)
	public ModelAndView activeLastMonthReport(
			ModelMap modelMap, 
			@RequestParam(value="staff",required=false) String staffid,
			HttpServletRequest request
			) {
		log.debug("ENTERED activeLastMonthReport");
		Staff comparestaff = null;
		if(staffid != null && !staffid.equalsIgnoreCase("")){
			Long staff_id = Long.parseLong(staffid);
			comparestaff = Staff.findStaff(staff_id);
			
		}
		
		String shoptimezone = "";
		try{
			TypedQuery<ShopSettings> shopsettings = ShopSettings.findShopSettingsesByShop(getShop());
			ShopSettings shopsetting = shopsettings.getResultList().get(0);
			shoptimezone = shopsetting.getTimezone();
			if(shoptimezone == null){
				shoptimezone = "MST";
				shopsetting.setTimezone(shoptimezone);
				shopsetting.merge();
			}
		}catch(Exception e){
			log.error(e);
		}
		///////////////////////////////////////////////////////////
		TimeZone tz = TimeZone.getTimeZone(shoptimezone);
		Date dateValue = new Date();

		Calendar firstDayofMonth = Calendar.getInstance(tz);
		firstDayofMonth.setTime(dateValue);
		
		firstDayofMonth.add(Calendar.MONTH, -1);  
		firstDayofMonth.set(Calendar.DAY_OF_MONTH, 1);  
		
		firstDayofMonth.getTime().setHours(0);
		firstDayofMonth.getTime().setMinutes(0);
		Date firstDay = firstDayofMonth.getTime();
		
		Calendar calValue = Calendar.getInstance(tz);
		calValue.setTime(dateValue);
		
		calValue.add(Calendar.MONTH, -1);
		int numdaylastmonth = calValue.getActualMaximum(Calendar.DAY_OF_MONTH);
		calValue.set(Calendar.DAY_OF_MONTH, numdaylastmonth);  
  
        Date lastDayOfMonth = calValue.getTime();  
        lastDayOfMonth.setHours(23);
        lastDayOfMonth.setMinutes(59);
  
        DateFormat sdf = new SimpleDateFormat("yyyy-MM-dd"); 
		///////////////////////////////////////////////////////////////
		
		ModelAndView mav = new ModelAndView();
//		TypedQuery<Appointment> appointments = Appointment.findAppointmentsByShopAndStatusAndClientIsNotNullAndAppointmentDateBetween(getShop(), ScheduleStatus.ACTIVE, firstDay,lastDayOfMonth);
		TypedQuery<Appointment> appointments = null;
		if(comparestaff==null){
			appointments = Appointment.findAppointmentsByShopAndStatusAndClientIsNotNullAndAppointmentDateBetween(getShop(), ScheduleStatus.ACTIVE, firstDay,lastDayOfMonth);
		}else{
			appointments = Appointment.findAppointmentsByShopAndStatusAndClientIsNotNullAndAppointmentDateBetweenAndStaffEquals(getShop(), ScheduleStatus.ACTIVE, firstDay,lastDayOfMonth,comparestaff);
		}
		
		List<AppointmentDeep> apptdeep = new ArrayList<AppointmentDeep>();
		if(appointments.getResultList().size()>0){
			for(int x=0;x<appointments.getResultList().size();x++){
				Appointment appt = appointments.getResultList().get(x);
				log.debug("The toString of appt: "+ appt.toString());
				AppointmentDeep deep = new AppointmentDeep(appt);
				log.debug("The toString of DEEP appt: "+ deep.toString());
				apptdeep.add(deep);
			}
			
		}
		
		
		modelMap.put("firstday", firstDay);
		modelMap.put("lastday", lastDayOfMonth);
		
		log.debug("the number of appointments returned: "+apptdeep.size());
		modelMap.put("appointments", apptdeep);
		log.debug("displaying normal site");
		mav.setViewName("reports/active");
		log.debug("EXITING activeLastMonthReport");
		return mav;
	}	
	/**
	 * For appointments with status ACTIVE
	 * 
	 * @param modelMap
	 * @param request
	 * @return
	 */
	@RequestMapping(value ="/paymentsShop/thisyearactivereport", method = RequestMethod.GET)
	public ModelAndView activeThisYearReport(
			ModelMap modelMap,
			@RequestParam(value="staff",required=false) String staffid,
			HttpServletRequest request
			) {
		log.debug("ENTERED activeThisYearReport");
		Staff comparestaff = null;
		if(staffid != null && !staffid.equalsIgnoreCase("")){
			Long staff_id = Long.parseLong(staffid);
			comparestaff = Staff.findStaff(staff_id);
			
		}
		
		String shoptimezone = "";
		try{
			TypedQuery<ShopSettings> shopsettings = ShopSettings.findShopSettingsesByShop(getShop());
			ShopSettings shopsetting = shopsettings.getResultList().get(0);
			shoptimezone = shopsetting.getTimezone();
			if(shoptimezone == null){
				shoptimezone = "MST";
				shopsetting.setTimezone(shoptimezone);
				shopsetting.merge();
			}
		}catch(Exception e){
			log.error(e);
		}
		///////////////////////////////////////////////////////////
		TimeZone tz = TimeZone.getTimeZone(shoptimezone);
		Date dateValue = new Date();

		Calendar firstDayofMonth = Calendar.getInstance(tz);
		firstDayofMonth.setTime(dateValue);
		
		firstDayofMonth.set(Calendar.DAY_OF_YEAR, 1);
		
		firstDayofMonth.getTime().setHours(0);
		firstDayofMonth.getTime().setMinutes(0);
		Date firstDay = firstDayofMonth.getTime();
		
		Calendar calValue = Calendar.getInstance(tz);
		calValue.setTime(dateValue);
		
		int numdaylastyear = calValue.getActualMaximum(Calendar.DAY_OF_YEAR);
		calValue.set(Calendar.DAY_OF_YEAR, numdaylastyear);  
  
        Date lastDayOfMonth = calValue.getTime();  
        lastDayOfMonth.setHours(23);
        lastDayOfMonth.setMinutes(59);
		///////////////////////////////////////////////////////////////
		
		ModelAndView mav = new ModelAndView();
//		TypedQuery<Appointment> appointments = Appointment.findAppointmentsByShopAndStatusAndClientIsNotNullAndAppointmentDateBetween(getShop(), ScheduleStatus.ACTIVE, firstDay,lastDayOfMonth);
		TypedQuery<Appointment> appointments = null;
		if(comparestaff==null){
			appointments = Appointment.findAppointmentsByShopAndStatusAndClientIsNotNullAndAppointmentDateBetween(getShop(), ScheduleStatus.ACTIVE, firstDay,lastDayOfMonth);
		}else{
			appointments = Appointment.findAppointmentsByShopAndStatusAndClientIsNotNullAndAppointmentDateBetweenAndStaffEquals(getShop(), ScheduleStatus.ACTIVE, firstDay,lastDayOfMonth,comparestaff);
		}
		
		List<AppointmentDeep> apptdeep = new ArrayList<AppointmentDeep>();
		if(appointments.getResultList().size()>0){
			for(int x=0;x<appointments.getResultList().size();x++){
				Appointment appt = appointments.getResultList().get(x);
				log.debug("The toString of appt: "+ appt.toString());
				AppointmentDeep deep = new AppointmentDeep(appt);
				log.debug("The toString of DEEP appt: "+ deep.toString());
				apptdeep.add(deep);
			}
			
		}
		
		
		modelMap.put("firstday", firstDay);
		modelMap.put("lastday", lastDayOfMonth);
		
		log.debug("the number of appointments returned: "+apptdeep.size());
		modelMap.put("appointments", apptdeep);
		log.debug("displaying normal site");
		mav.setViewName("reports/active");
		log.debug("EXITING activeThisYearReport");
		return mav;
	}	
	
	/**
	 * For appointments with status ACTIVE
	 * 
	 * @param modelMap
	 * @param request
	 * @return
	 */
	@RequestMapping(value ="/paymentsShop/lastyearactivereport", method = RequestMethod.GET)
	public ModelAndView activeLastYearReport(
			ModelMap modelMap,
			@RequestParam(value="staff",required=false) String staffid,
			HttpServletRequest request
			) {
		log.debug("ENTERED activeLastYearReport");
		Staff comparestaff = null;
		if(staffid != null && !staffid.equalsIgnoreCase("")){
			Long staff_id = Long.parseLong(staffid);
			comparestaff = Staff.findStaff(staff_id);
			
		}
		
		String shoptimezone = "";
		try{
			TypedQuery<ShopSettings> shopsettings = ShopSettings.findShopSettingsesByShop(getShop());
			ShopSettings shopsetting = shopsettings.getResultList().get(0);
			shoptimezone = shopsetting.getTimezone();
			if(shoptimezone == null){
				shoptimezone = "MST";
				shopsetting.setTimezone(shoptimezone);
				shopsetting.merge();
			}
		}catch(Exception e){
			log.error(e);
		}
		///////////////////////////////////////////////////////////
		TimeZone tz = TimeZone.getTimeZone(shoptimezone);
		Date dateValue = new Date();

		Calendar firstDayofMonth = Calendar.getInstance(tz);
		firstDayofMonth.setTime(dateValue);
		
		firstDayofMonth.add(Calendar.YEAR, -1);
		firstDayofMonth.set(Calendar.DAY_OF_YEAR, 1);
		
		firstDayofMonth.getTime().setHours(0);
		firstDayofMonth.getTime().setMinutes(0);
		Date firstDay = firstDayofMonth.getTime();
		
		Calendar calValue = Calendar.getInstance(tz);
		calValue.setTime(dateValue);
		
		calValue.add(Calendar.YEAR, -1);
		int numdaylastyear = calValue.getActualMaximum(Calendar.DAY_OF_YEAR);
		calValue.set(Calendar.DAY_OF_YEAR, numdaylastyear);  
  
        Date lastDayOfMonth = calValue.getTime();  
        lastDayOfMonth.setHours(23);
        lastDayOfMonth.setMinutes(59);
		///////////////////////////////////////////////////////////////
		
		ModelAndView mav = new ModelAndView();
//		TypedQuery<Appointment> appointments = Appointment.findAppointmentsByShopAndStatusAndClientIsNotNullAndAppointmentDateBetween(getShop(), ScheduleStatus.ACTIVE, firstDay,lastDayOfMonth);
		TypedQuery<Appointment> appointments = null;
		if(comparestaff==null){
			appointments = Appointment.findAppointmentsByShopAndStatusAndClientIsNotNullAndAppointmentDateBetween(getShop(), ScheduleStatus.ACTIVE, firstDay,lastDayOfMonth);
		}else{
			appointments = Appointment.findAppointmentsByShopAndStatusAndClientIsNotNullAndAppointmentDateBetweenAndStaffEquals(getShop(), ScheduleStatus.ACTIVE, firstDay,lastDayOfMonth,comparestaff);
		}
		
		List<AppointmentDeep> apptdeep = new ArrayList<AppointmentDeep>();
		if(appointments.getResultList().size()>0){
			for(int x=0;x<appointments.getResultList().size();x++){
				Appointment appt = appointments.getResultList().get(x);
				log.debug("The toString of appt: "+ appt.toString());
				AppointmentDeep deep = new AppointmentDeep(appt);
				log.debug("The toString of DEEP appt: "+ deep.toString());
				apptdeep.add(deep);
			}
			
		}
		
		modelMap.put("firstday", firstDay);
		modelMap.put("lastday", lastDayOfMonth);
		
		log.debug("the number of appointments returned: "+apptdeep.size());
		modelMap.put("appointments", apptdeep);
		log.debug("displaying normal site");
		mav.setViewName("reports/active");
    	
		TypedQuery<Payments> datas = null;
		if(comparestaff == null){
			datas = com.yourhairsalon.booking.domain.Payments.findPaymentsesByShopAndDatecreatedBetween(getShop(),firstDay,lastDayOfMonth);
		}else{
			datas = com.yourhairsalon.booking.domain.Payments.findPaymentsesByShopAndDatecreatedBetweenAndStaffEquals(getShop(),firstDay,lastDayOfMonth,comparestaff);
		}
		List<Payments> list = datas.getResultList();
		
		Float totalamount = 0.00F;
		Float totalgratuity = 0.00F;
		Float totalamountgratuity = 0.00F;
		for (Iterator i = list.iterator(); i.hasNext();) {
			Payments base = (Payments) i.next();
			float amount = base.getAmount();
			totalamount += amount;
			float grat = base.getGratuity();
			totalgratuity += grat;
		}		
		totalamountgratuity = totalgratuity + totalamount; 
		modelMap.put("totalamount", totalamount);
		modelMap.put("totalgratuity", totalgratuity);
		modelMap.put("totalamountgratuity", totalamountgratuity);
    	
		log.debug("EXITING activeLastYearReport");
		return mav;
	}		
	// END OF NOT CHECKED OUT OR ACTIVE REPORTS
	
	@RequestMapping(value ="/paymentsShop/thisweekreport", method = RequestMethod.GET)
	public ModelAndView thisWeekReport(
			ModelMap modelMap,
			@RequestParam(value="staff",required=false) String staffid,
			HttpServletRequest request) {
		log.debug("ENTERED thisWeekReport");
		
		Staff comparestaff = null;
		log.debug("staffid: "+staffid);
		if(staffid != null && !staffid.equalsIgnoreCase("")){
			Long staff_id = Long.parseLong(staffid);
			comparestaff = Staff.findStaff(staff_id);
			if(comparestaff != null){
				log.debug("!!!!!  found staff: "+staffid);
			}
		}
		
		String shoptimezone = "";
		try{
			TypedQuery<ShopSettings> shopsettings = ShopSettings.findShopSettingsesByShop(getShop());
			ShopSettings shopsetting = shopsettings.getResultList().get(0);
			shoptimezone = shopsetting.getTimezone();
			if(shoptimezone == null){
				shoptimezone = "MST";
				shopsetting.setTimezone(shoptimezone);
				shopsetting.merge();
			}
		}catch(Exception e){
			log.error(e);
		}
		TimeZone tz = TimeZone.getTimeZone(shoptimezone);
		Date dateValue = new Date();
		Calendar calValue = Calendar.getInstance(tz);
		calValue.setTime(dateValue);
		
		// Set the calendar to monday of the current week
		calValue.set(Calendar.DAY_OF_WEEK, calValue.getFirstDayOfWeek());
		
		Date beginofweek = null;
		Date endofweek = null;

		// Print dates of the current week starting on Monday
		DateFormat df = new SimpleDateFormat("EEE dd/MM/yyyy");
		for (int i = 0; i < 7; i++) {
			if(i == 0){
				beginofweek = calValue.getTime();
				beginofweek.setHours(0);
				beginofweek.setMinutes(0);
			}
			
			if(i == 6){
				endofweek = calValue.getTime();
				endofweek.setHours(23);
				endofweek.setMinutes(59);
			}
		    calValue.add(Calendar.DATE, 1);
		}
		
		ModelAndView mav = new ModelAndView();
//		TypedQuery<Payments> datas = com.yourhairsalon.booking.domain.Payments.findPaymentsesByShopAndDatecreatedBetween(getShop(),beginofweek,endofweek);
		TypedQuery<Payments> datas = null;
		if(comparestaff == null){
			datas = com.yourhairsalon.booking.domain.Payments.findPaymentsesByShopAndDatecreatedBetween(getShop(),beginofweek,endofweek);
		}else{
			datas = com.yourhairsalon.booking.domain.Payments.findPaymentsesByShopAndDatecreatedBetweenAndStaffEquals(getShop(),beginofweek,endofweek,comparestaff);
		}
		List<Payments> list = datas.getResultList();
		
		Float totalamount = 0.00F;
		Float totalgratuity = 0.00F;
		Float totalamountgratuity = 0.00F;
		for (Iterator i = list.iterator(); i.hasNext();) {
			Payments base = (Payments) i.next();
			float amount = base.getAmount();
			totalamount += amount;
			float grat = base.getGratuity();
			totalgratuity += grat;
		}		
		totalamountgratuity = totalgratuity + totalamount; 
		modelMap.put("totalamount", totalamount);
		modelMap.put("totalgratuity", totalgratuity);
		modelMap.put("totalamountgratuity", totalamountgratuity);
		
		mav.addObject("payments",datas.getResultList());
		log.debug("the number of payments returned: "+datas.getResultList().size());
		modelMap.put("firstday", beginofweek);
		modelMap.put("lastday", endofweek);
		
		
		modelMap.put("payments", datas.getResultList());
		mav.setViewName("reports/thisweek");
		log.debug("EXITING thisWeekReport");
		return mav;
	}
	
	@RequestMapping(value ="/paymentsShop/todaysreport", method = RequestMethod.GET)
	public ModelAndView todaysReport(
			ModelMap modelMap,
			@RequestParam(value="staff",required=false) String staffid,
			HttpServletRequest request) {
		log.debug("ENTERED todaysReport");
		
		Staff comparestaff = null;
		log.debug("staffid: "+staffid);
		if(staffid != null && !staffid.equalsIgnoreCase("")){
			Long staff_id = Long.parseLong(staffid);
			comparestaff = Staff.findStaff(staff_id);
			if(comparestaff != null){
				log.debug("!!!!!  found staff: "+staffid);
			}
		}
		
		String shoptimezone = "";
		try{
			TypedQuery<ShopSettings> shopsettings = ShopSettings.findShopSettingsesByShop(getShop());
			ShopSettings shopsetting = shopsettings.getResultList().get(0);
			shoptimezone = shopsetting.getTimezone();
			if(shoptimezone == null){
				shoptimezone = "MST";
				shopsetting.setTimezone(shoptimezone);
				shopsetting.merge();
			}
		}catch(Exception e){
			log.error(e);
		}
		TimeZone tz = TimeZone.getTimeZone(shoptimezone);
		Date dateValue = new Date();
		Calendar calValue = Calendar.getInstance(tz);
		calValue.setTime(dateValue);
		String selecteddate = "";
		DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
		Date beginofday = null;
		Date endofday = null;
		
		try {
			String dateString = df.format(calValue.getTime());
			endofday = df.parse(dateString);
			beginofday = df.parse(dateString);
		} catch (ParseException e) {
			e.printStackTrace();
		}
		endofday.setHours(23);
		endofday.setMinutes(59);

		beginofday.setHours(0);
		beginofday.setMinutes(0);
		
		ModelAndView mav = new ModelAndView();

		TypedQuery<Payments> datas = null;
		if(comparestaff == null){
			log.debug("entered no staff");
			datas = com.yourhairsalon.booking.domain.Payments.findPaymentsesByShopAndDatecreatedBetween(getShop(),beginofday,endofday);
		}else{
			log.debug("entered staff");
			datas = com.yourhairsalon.booking.domain.Payments.findPaymentsesByShopAndDatecreatedBetweenAndStaffEquals(getShop(),beginofday,endofday,comparestaff);
		}
		List<Payments> list = datas.getResultList();
		log.debug("size of returned payments is: "+list.size());
		Float totalamount = 0.00F;
		Float totalgratuity = 0.00F;
		Float totalamountgratuity = 0.00F;
		for (Iterator i = list.iterator(); i.hasNext();) {
			Payments base = (Payments) i.next();
			float amount = base.getAmount();
			totalamount += amount;
			float grat = base.getGratuity();
			totalgratuity += grat;
		}		
		totalamountgratuity = totalgratuity + totalamount; 
		modelMap.put("totalamount", totalamount);
		modelMap.put("totalgratuity", totalgratuity);
		modelMap.put("totalamountgratuity", totalamountgratuity);
		
		mav.addObject("payments",datas.getResultList());
		log.debug("the number of payments returned: "+datas.getResultList().size());
		modelMap.put("firstday", beginofday);
		modelMap.put("lastday", endofday);
		
		
		modelMap.put("payments", datas.getResultList());
		mav.setViewName("reports/thistoday");
		log.debug("EXITING todaysReport");
		return mav;
	}
		
	@RequestMapping(value ="/paymentsShop/lastweekreport", method = RequestMethod.GET)
	public ModelAndView lastWeekReport(
			ModelMap modelMap,
			@RequestParam(value="staff",required=false) String staffid,
			HttpServletRequest request) {
		log.debug("ENTERED lastWeekReport");
		Staff comparestaff = null;
		if(staffid != null && !staffid.equalsIgnoreCase("")){
			Long staff_id = Long.parseLong(staffid);
			comparestaff = Staff.findStaff(staff_id);
			
		}
		
		String shoptimezone = "";
		try{
			TypedQuery<ShopSettings> shopsettings = ShopSettings.findShopSettingsesByShop(getShop());
			ShopSettings shopsetting = shopsettings.getResultList().get(0);
			shoptimezone = shopsetting.getTimezone();
			if(shoptimezone == null){
				shoptimezone = "MST";
				shopsetting.setTimezone(shoptimezone);
				shopsetting.merge();
			}

			
		}catch(Exception e){
			log.error(e);
		}
		TimeZone tz = TimeZone.getTimeZone(shoptimezone);
		Date dateValue = new Date();
		Calendar calValue = Calendar.getInstance(tz);
		calValue.setTime(dateValue);
		
		// Set the calendar to monday of the current week
		calValue.set(Calendar.DAY_OF_WEEK, calValue.getFirstDayOfWeek());
		calValue.add(Calendar.DATE, -7);
		
		Date beginofweek = null;
		Date endofweek = null;

		// Print dates of the current week starting on Monday
		DateFormat df = new SimpleDateFormat("EEE dd/MM/yyyy");
		for (int i = 0; i < 7; i++) {
			if(i == 0){
				beginofweek = calValue.getTime();
				beginofweek.setHours(0);
				beginofweek.setMinutes(0);
			}
			
			if(i == 6){
				endofweek = calValue.getTime();
				endofweek.setHours(23);
				endofweek.setMinutes(59);
			}
		    calValue.add(Calendar.DATE, 1);
		}
		ModelAndView mav = new ModelAndView();
//		TypedQuery<Payments> datas = com.yourhairsalon.booking.domain.Payments.findPaymentsesByShopAndDatecreatedBetween(getShop(),beginofweek,endofweek);
		TypedQuery<Payments> datas = null;
		if(comparestaff == null){
			datas = com.yourhairsalon.booking.domain.Payments.findPaymentsesByShopAndDatecreatedBetween(getShop(),beginofweek,endofweek);
		}else{
			datas = com.yourhairsalon.booking.domain.Payments.findPaymentsesByShopAndDatecreatedBetweenAndStaffEquals(getShop(),beginofweek,endofweek,comparestaff);
		}
		
		List<Payments> list = datas.getResultList();
		
		Float totalamount = 0.00F;
		Float totalgratuity = 0.00F;
		Float totalamountgratuity = 0.00F;
		for (Iterator i = list.iterator(); i.hasNext();) {
			Payments base = (Payments) i.next();
			float amount = base.getAmount();
			totalamount += amount;
			float grat = base.getGratuity();
			totalgratuity += grat;
		}		
		totalamountgratuity = totalgratuity + totalamount; 
		modelMap.put("totalamount", totalamount);
		modelMap.put("totalgratuity", totalgratuity);
		modelMap.put("totalamountgratuity", totalamountgratuity);
		
		mav.addObject("payments",datas.getResultList());
		log.debug("the number of payments returned: "+datas.getResultList().size());
		modelMap.put("firstday", beginofweek);
		modelMap.put("lastday", endofweek);
		modelMap.put("payments", datas.getResultList());
		mav.setViewName("reports/lastweek");
		log.debug("EXITING lastWeekReport");
		return mav;
	}

	@RequestMapping(value ="/paymentsShop/thismonthreport", method = RequestMethod.GET)
	public ModelAndView thisMonthReport(
			ModelMap modelMap,
			@RequestParam(value="staff",required=false) String staffid,
			HttpServletRequest request) {
		log.debug("ENTERED thisMonthReport");
		Staff comparestaff = null;
		if(staffid != null && !staffid.equalsIgnoreCase("")){
			Long staff_id = Long.parseLong(staffid);
			comparestaff = Staff.findStaff(staff_id);
			
		}
		
		String shoptimezone = "";
		try{
			TypedQuery<ShopSettings> shopsettings = ShopSettings.findShopSettingsesByShop(getShop());
			ShopSettings shopsetting = shopsettings.getResultList().get(0);
			shoptimezone = shopsetting.getTimezone();
			if(shoptimezone == null){
				shoptimezone = "MST";
				shopsetting.setTimezone(shoptimezone);
				shopsetting.merge();
			}

			
		}catch(Exception e){
			log.error(e);
		}
		TimeZone tz = TimeZone.getTimeZone(shoptimezone);
		Date dateValue = new Date();
		Calendar firstDayofMonth = Calendar.getInstance(tz);
		firstDayofMonth.setTime(dateValue);
		firstDayofMonth.set(Calendar.DAY_OF_MONTH, 1);
		firstDayofMonth.getTime().setHours(0);
		firstDayofMonth.getTime().setMinutes(0);
		Date firstDay = firstDayofMonth.getTime();
		
		Calendar calValue = Calendar.getInstance(tz);
		calValue.setTime(dateValue);
		
		calValue.add(Calendar.MONTH, 1);  
		calValue.set(Calendar.DAY_OF_MONTH, 1);  
		calValue.add(Calendar.DATE, -1);  
  
        Date lastDayOfMonth = calValue.getTime();  
        lastDayOfMonth.setHours(23);
        lastDayOfMonth.setMinutes(59);
  
        DateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");  
    		
		ModelAndView mav = new ModelAndView();
//		TypedQuery<Payments> datas = com.yourhairsalon.booking.domain.Payments.findPaymentsesByShopAndDatecreatedBetween(getShop(),firstDay,lastDayOfMonth);
		TypedQuery<Payments> datas = null;
		if(comparestaff == null){
			datas = com.yourhairsalon.booking.domain.Payments.findPaymentsesByShopAndDatecreatedBetween(getShop(),firstDay,lastDayOfMonth);
		}else{
			datas = com.yourhairsalon.booking.domain.Payments.findPaymentsesByShopAndDatecreatedBetweenAndStaffEquals(getShop(),firstDay,lastDayOfMonth,comparestaff);
		}
		
		List<Payments> list = datas.getResultList();
		
		Float totalamount = 0.00F;
		Float totalgratuity = 0.00F;
		Float totalamountgratuity = 0.00F;
		for (Iterator i = list.iterator(); i.hasNext();) {
			Payments base = (Payments) i.next();
			float amount = base.getAmount();
			totalamount += amount;
			float grat = base.getGratuity();
			totalgratuity += grat;
		}		
		totalamountgratuity = totalgratuity + totalamount; 
		modelMap.put("totalamount", totalamount);
		modelMap.put("totalgratuity", totalgratuity);
		modelMap.put("totalamountgratuity", totalamountgratuity);
		
		mav.addObject("payments",datas.getResultList());
		log.debug("the number of payments returned: "+datas.getResultList().size());
		modelMap.put("firstday", firstDay);
		modelMap.put("lastday", lastDayOfMonth);
		modelMap.put("payments", datas.getResultList());
		mav.setViewName("reports/thismonth");
		log.debug("EXITING thisMonthReport");
		return mav;
	}

	@RequestMapping(value ="/paymentsShop/lastmonthreport", method = RequestMethod.GET)
	public ModelAndView lastMonthReport(
			ModelMap modelMap,
			@RequestParam(value="staff",required=false) String staffid,
			HttpServletRequest request) {
		log.debug("ENTERED lastMonthReport");
		Staff comparestaff = null;
		if(staffid != null && !staffid.equalsIgnoreCase("")){
			Long staff_id = Long.parseLong(staffid);
			comparestaff = Staff.findStaff(staff_id);
			
		}
		
		String shoptimezone = "";
		try{
			TypedQuery<ShopSettings> shopsettings = ShopSettings.findShopSettingsesByShop(getShop());
			ShopSettings shopsetting = shopsettings.getResultList().get(0);
			shoptimezone = shopsetting.getTimezone();
			if(shoptimezone == null){
				shoptimezone = "MST";
				shopsetting.setTimezone(shoptimezone);
				shopsetting.merge();
			}

			
		}catch(Exception e){
			log.error(e);
		}
		TimeZone tz = TimeZone.getTimeZone(shoptimezone);
		Date dateValue = new Date();

		Calendar firstDayofMonth = Calendar.getInstance(tz);
		firstDayofMonth.setTime(dateValue);
		
		firstDayofMonth.add(Calendar.MONTH, -1);  
		firstDayofMonth.set(Calendar.DAY_OF_MONTH, 1);  
		
		firstDayofMonth.getTime().setHours(0);
		firstDayofMonth.getTime().setMinutes(0);
		Date firstDay = firstDayofMonth.getTime();
		
		Calendar calValue = Calendar.getInstance(tz);
		calValue.setTime(dateValue);
		
		calValue.add(Calendar.MONTH, -1);
		int numdaylastmonth = calValue.getActualMaximum(Calendar.DAY_OF_MONTH);
		calValue.set(Calendar.DAY_OF_MONTH, numdaylastmonth);  
  
        Date lastDayOfMonth = calValue.getTime();  
        lastDayOfMonth.setHours(23);
        lastDayOfMonth.setMinutes(59);
  
        DateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");  
    		
		ModelAndView mav = new ModelAndView();
//		TypedQuery<Payments> datas = com.yourhairsalon.booking.domain.Payments.findPaymentsesByShopAndDatecreatedBetween(getShop(),firstDay,lastDayOfMonth);
		TypedQuery<Payments> datas = null;
		if(comparestaff == null){
			datas = com.yourhairsalon.booking.domain.Payments.findPaymentsesByShopAndDatecreatedBetween(getShop(),firstDay,lastDayOfMonth);
		}else{
			datas = com.yourhairsalon.booking.domain.Payments.findPaymentsesByShopAndDatecreatedBetweenAndStaffEquals(getShop(),firstDay,lastDayOfMonth,comparestaff);
		}
		
		List<Payments> list = datas.getResultList();
		
		Float totalamount = 0.00F;
		Float totalgratuity = 0.00F;
		Float totalamountgratuity = 0.00F;
		for (Iterator i = list.iterator(); i.hasNext();) {
			Payments base = (Payments) i.next();
			float amount = base.getAmount();
			totalamount += amount;
			float grat = base.getGratuity();
			totalgratuity += grat;
		}		
		totalamountgratuity = totalgratuity + totalamount; 
		modelMap.put("totalamount", totalamount);
		modelMap.put("totalgratuity", totalgratuity);
		modelMap.put("totalamountgratuity", totalamountgratuity);
		
		mav.addObject("payments",datas.getResultList());
		log.debug("the number of payments returned: "+datas.getResultList().size());
		modelMap.put("firstday", firstDay);
		modelMap.put("lastday", lastDayOfMonth);
		modelMap.put("payments", datas.getResultList());
		mav.setViewName("reports/lastmonth");
		log.debug("EXITING lastMonthReport");
		return mav;
	}

	@RequestMapping(value ="/paymentsShop/thisyearreport", method = RequestMethod.GET)
	public ModelAndView thisYearReport(
			ModelMap modelMap,
			@RequestParam(value="staff",required=false) String staffid,
			HttpServletRequest request) {
		log.debug("ENTERED thisYearReport");
		Staff comparestaff = null;
		if(staffid != null && !staffid.equalsIgnoreCase("")){
			Long staff_id = Long.parseLong(staffid);
			comparestaff = Staff.findStaff(staff_id);
			
		}
		
		String shoptimezone = "";
		try{
			TypedQuery<ShopSettings> shopsettings = ShopSettings.findShopSettingsesByShop(getShop());
			ShopSettings shopsetting = shopsettings.getResultList().get(0);
			shoptimezone = shopsetting.getTimezone();
			if(shoptimezone == null){
				shoptimezone = "MST";
				shopsetting.setTimezone(shoptimezone);
				shopsetting.merge();
			}

		}catch(Exception e){
			log.error(e);
		}
		TimeZone tz = TimeZone.getTimeZone(shoptimezone);
		Date dateValue = new Date();

		Calendar firstDayofMonth = Calendar.getInstance(tz);
		firstDayofMonth.setTime(dateValue);
		
		firstDayofMonth.set(Calendar.DAY_OF_YEAR, 1);
		
		firstDayofMonth.getTime().setHours(0);
		firstDayofMonth.getTime().setMinutes(0);
		Date firstDay = firstDayofMonth.getTime();
		
		Calendar calValue = Calendar.getInstance(tz);
		calValue.setTime(dateValue);
		
		int numdaylastyear = calValue.getActualMaximum(Calendar.DAY_OF_YEAR);
		calValue.set(Calendar.DAY_OF_YEAR, numdaylastyear);  
  
        Date lastDayOfMonth = calValue.getTime();  
        lastDayOfMonth.setHours(23);
        lastDayOfMonth.setMinutes(59);
  
		ModelAndView mav = new ModelAndView();
//		TypedQuery<Payments> datas = com.yourhairsalon.booking.domain.Payments.findPaymentsesByShopAndDatecreatedBetween(getShop(),firstDay,lastDayOfMonth);
		TypedQuery<Payments> datas = null;
		if(comparestaff == null){
			datas = com.yourhairsalon.booking.domain.Payments.findPaymentsesByShopAndDatecreatedBetween(getShop(),firstDay,lastDayOfMonth);
		}else{
			datas = com.yourhairsalon.booking.domain.Payments.findPaymentsesByShopAndDatecreatedBetweenAndStaffEquals(getShop(),firstDay,lastDayOfMonth,comparestaff);
		}
		
		List<Payments> list = datas.getResultList();
		
		Float totalamount = 0.00F;
		Float totalgratuity = 0.00F;
		Float totalamountgratuity = 0.00F;
		for (Iterator i = list.iterator(); i.hasNext();) {
			Payments base = (Payments) i.next();
			float amount = base.getAmount();
			totalamount += amount;
			float grat = base.getGratuity();
			totalgratuity += grat;
		}		
		totalamountgratuity = totalgratuity + totalamount; 
		modelMap.put("totalamount", totalamount);
		modelMap.put("totalgratuity", totalgratuity);
		modelMap.put("totalamountgratuity", totalamountgratuity);
		
		mav.addObject("payments",datas.getResultList());
		log.debug("the number of payments returned: "+datas.getResultList().size());
		modelMap.put("firstday", firstDay);
		modelMap.put("lastday", lastDayOfMonth);
		modelMap.put("payments", datas.getResultList());
		mav.setViewName("reports/thisyear");
		log.debug("EXITING thisYearReport");
		return mav;
	}

	@RequestMapping(value ="/paymentsShop/lastyearreport", method = RequestMethod.GET)
	public ModelAndView lastYearReport(
			ModelMap modelMap,
			@RequestParam(value="staff",required=false) String staffid,
			HttpServletRequest request) {
		log.debug("ENTERED lastYearReport");
		Staff comparestaff = null;
		if(staffid != null && !staffid.equalsIgnoreCase("")){
			Long staff_id = Long.parseLong(staffid);
			comparestaff = Staff.findStaff(staff_id);
			
		}
		
		String shoptimezone = "";
		try{
			TypedQuery<ShopSettings> shopsettings = ShopSettings.findShopSettingsesByShop(getShop());
			ShopSettings shopsetting = shopsettings.getResultList().get(0);
			shoptimezone = shopsetting.getTimezone();
			if(shoptimezone == null){
				shoptimezone = "MST";
				shopsetting.setTimezone(shoptimezone);
				shopsetting.merge();
			}

		}catch(Exception e){
			log.error(e);
		}
		TimeZone tz = TimeZone.getTimeZone(shoptimezone);
		Date dateValue = new Date();

		Calendar firstDayofMonth = Calendar.getInstance(tz);
		firstDayofMonth.setTime(dateValue);
		
		firstDayofMonth.add(Calendar.YEAR, -1);
		firstDayofMonth.set(Calendar.DAY_OF_YEAR, 1);
		
		firstDayofMonth.getTime().setHours(0);
		firstDayofMonth.getTime().setMinutes(0);
		Date firstDay = firstDayofMonth.getTime();
		
		Calendar calValue = Calendar.getInstance(tz);
		calValue.setTime(dateValue);
		
		calValue.add(Calendar.YEAR, -1);
		int numdaylastyear = calValue.getActualMaximum(Calendar.DAY_OF_YEAR);
		calValue.set(Calendar.DAY_OF_YEAR, numdaylastyear);  
  
        Date lastDayOfMonth = calValue.getTime();  
        lastDayOfMonth.setHours(23);
        lastDayOfMonth.setMinutes(59);
  
		ModelAndView mav = new ModelAndView();
//		TypedQuery<Payments> datas = com.yourhairsalon.booking.domain.Payments.findPaymentsesByShopAndDatecreatedBetween(getShop(),firstDay,lastDayOfMonth);
		TypedQuery<Payments> datas = null;
		if(comparestaff == null){
			datas = com.yourhairsalon.booking.domain.Payments.findPaymentsesByShopAndDatecreatedBetween(getShop(),firstDay,lastDayOfMonth);
		}else{
			datas = com.yourhairsalon.booking.domain.Payments.findPaymentsesByShopAndDatecreatedBetweenAndStaffEquals(getShop(),firstDay,lastDayOfMonth,comparestaff);
		}
		
		List<Payments> list = datas.getResultList();
		
		Float totalamount = 0.00F;
		Float totalgratuity = 0.00F;
		Float totalamountgratuity = 0.00F;
		for (Iterator i = list.iterator(); i.hasNext();) {
			Payments base = (Payments) i.next();
			float amount = base.getAmount();
			totalamount += amount;
			float grat = base.getGratuity();
			totalgratuity += grat;
		}		
		totalamountgratuity = totalgratuity + totalamount; 
		modelMap.put("totalamount", totalamount);
		modelMap.put("totalgratuity", totalgratuity);
		modelMap.put("totalamountgratuity", totalamountgratuity);
		
		mav.addObject("payments",datas.getResultList());
		log.debug("the number of payments returned: "+datas.getResultList().size());
		modelMap.put("firstday", firstDay);
		modelMap.put("lastday", lastDayOfMonth);
		modelMap.put("payments", datas.getResultList());
		mav.setViewName("reports/lastyear");
		log.debug("EXITING lastYearReport");
		return mav;
	}

	@RequestMapping(value ="/paymentsShop/clientlistreport", method = RequestMethod.GET)
	public ModelAndView clientListReport(
			ModelMap modelMap,
			@RequestParam(value="staff",required=false) String staffid,
			HttpServletRequest request) {
		log.debug("ENTERED clientListReport");
		ModelAndView mav = new ModelAndView();
		TypedQuery<Clients> clients = Clients.findClientsesByShop(getShop());
		modelMap.put("clientses", clients.getResultList());
		mav.setViewName("reports/clientlist");
		log.debug("EXITING clientListReport");
		return mav;
	}
	
	@RequestMapping(value ="/paymentsShop/daterange", method = RequestMethod.GET)
	public ModelAndView reportPaymentsDateRange(
			ModelMap modelMap,
			@RequestParam(value="staff",required=false) String staffid
			) {
		log.debug("ENTERED reportPaymentsDateRange");
		
		Staff comparestaff = null;
		if(staffid != null && !staffid.equalsIgnoreCase("")){
			Long staff_id = Long.parseLong(staffid);
			comparestaff = Staff.findStaff(staff_id);
			// TODO: set this staff to an attribute to be used on the page to filter the pay range based on staff
			
			
		}
		
		ModelAndView mav = new ModelAndView();
		
		modelMap.addAttribute("range", new DateRangeForm());
		modelMap.addAttribute("action_url","../../../reports/paymentsShop/daterangereport");
		mav.setViewName("reports/payhistory");
		//mav.setView(new RedirectView("../../../reports/payhistory"));
		
		log.debug("EXITING reportPaymentsDateRange");
		return mav;
	}

	@RequestMapping(value ="/paymentsDetail/{id}/{format}", method = RequestMethod.GET)
	public String reportPaymentsDetail(ModelMap modelMap, @PathVariable("id") Long id, @PathVariable("format") String format) {
		JRBeanCollectionDataSource jrDataSource = new JRBeanCollectionDataSource(com.yourhairsalon.booking.domain.Payments.findPaymentsesById(id).getResultList(),false);
		modelMap.put("reportData", jrDataSource);
		modelMap.put("format", format);
		return "paymentsReportDetail";
	}
	
	@ModelAttribute("numberofclients")
    public Long numberOfClients() {
		log.debug("Entering numberOfClients");
		List<Clients> listofclients = Clients.findClientsesByShop(getShop()).getResultList();
		long sz = (long)listofclients.size();
        return sz;
    }
	
	@ModelAttribute("noshowstoday")
    public Long avgNumberOfNoShows() {
		log.debug("Entering avgNumberOfNoShows");
		String shoptimezone = "";
		try{
			TypedQuery<ShopSettings> shopsettings = ShopSettings.findShopSettingsesByShop(getShop());
			ShopSettings shopsetting = shopsettings.getResultList().get(0);
			shoptimezone = shopsetting.getTimezone();
			if(shoptimezone == null){
				shoptimezone = "MST";
				shopsetting.setTimezone(shoptimezone);
				shopsetting.merge();
			}

		}catch(Exception e){
			log.error(e);
		}
		
		TimeZone tz = TimeZone.getTimeZone(shoptimezone);
		Date dateValue = new Date();
		Calendar calValue = Calendar.getInstance(tz);
		calValue.setTime(dateValue);
		
		String selecteddate = "";
		DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
		Date beginofday = null;
		Date endofday = null;
		
		try {
			String dateString = df.format(calValue.getTime());
			endofday = df.parse(dateString);
			beginofday = df.parse(dateString);
		} catch (ParseException e) {
			e.printStackTrace();
		}
		beginofday.setHours(0);
		beginofday.setMinutes(0);

		TypedQuery<Appointment> appointments = Appointment.findAppointmentsByShopAndStatusAndClientIsNotNullAndAppointmentDateBetween(getShop(), ScheduleStatus.NO_SHOW, beginofday, endofday);
		Long szoflilst = (long)appointments.getResultList().size();
        return szoflilst;
    }
	@ModelAttribute("notcheckedouttoday")
    public Long notCheckedOutToday() {
		log.debug("Entering notCheckedOutToday");
		String shoptimezone = "";
		try{
			TypedQuery<ShopSettings> shopsettings = ShopSettings.findShopSettingsesByShop(getShop());
			ShopSettings shopsetting = shopsettings.getResultList().get(0);
			shoptimezone = shopsetting.getTimezone();
			if(shoptimezone == null){
				shoptimezone = "MST";
				shopsetting.setTimezone(shoptimezone);
				shopsetting.merge();
			}

		}catch(Exception e){
			log.error(e);
		}
		
		TimeZone tz = TimeZone.getTimeZone(shoptimezone);
		Date dateValue = new Date();
		Calendar calValue = Calendar.getInstance(tz);
		calValue.setTime(dateValue);
		
		String selecteddate = "";
		DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
		Date beginofday = null;
		Date endofday = null;
		
		try {
			String dateString = df.format(calValue.getTime());
			endofday = df.parse(dateString);
			beginofday = df.parse(dateString);
		} catch (ParseException e) {
			e.printStackTrace();
		}
		beginofday.setHours(0);
		beginofday.setMinutes(0);

		TypedQuery<Appointment> appointments = Appointment.findAppointmentsByShopAndStatusAndClientIsNotNullAndAppointmentDateBetween(getShop(), ScheduleStatus.ACTIVE, beginofday, endofday);
		Long szoflilst = (long)appointments.getResultList().size();
		log.debug("Exiting notCheckedOutToday");
        return szoflilst;
    }	
	@ModelAttribute("activeappointments")
    public Long numberOfActiveAppts() {
		log.debug("Entering avgNumberOfNoShows");
		BaseService.findBaseServicesByShop(getShop()).getResultList();
		String shoptimezone = "";
		try{
			TypedQuery<ShopSettings> shopsettings = ShopSettings.findShopSettingsesByShop(getShop());
			ShopSettings shopsetting = shopsettings.getResultList().get(0);
			shoptimezone = shopsetting.getTimezone();
			if(shoptimezone == null){
				shoptimezone = "MST";
				shopsetting.setTimezone(shoptimezone);
				shopsetting.merge();
			}

		}catch(Exception e){
			log.error(e);
		}
		
		TimeZone tz = TimeZone.getTimeZone(shoptimezone);
		Date dateValue = new Date();
		Calendar calValue = Calendar.getInstance(tz);
		calValue.setTime(dateValue);
		
		String selecteddate = "";
		DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
		Date beginofday = null;
		Date endofday = null;
		
		try {
			String dateString = df.format(calValue.getTime());
			endofday = df.parse(dateString);
			beginofday = df.parse(dateString);
		} catch (ParseException e) {
			e.printStackTrace();
		}
		beginofday.setHours(0);
		beginofday.setMinutes(0);
		TypedQuery<Appointment> appointments = Appointment.findAppointmentsByShopAndStatusAndClientIsNotNullAndAppointmentDateBetween(getShop(), ScheduleStatus.ACTIVE, beginofday, endofday);
		Long szoflilst = (long)appointments.getResultList().size();
        return szoflilst;
    }
	@ModelAttribute("chedkedoutappointments")
    public Long numberOfCheckedoutAppts() {
		log.debug("Entering avgNumberOfNoShows");
		BaseService.findBaseServicesByShop(getShop()).getResultList();
		String shoptimezone = "";
		try{
			TypedQuery<ShopSettings> shopsettings = ShopSettings.findShopSettingsesByShop(getShop());
			ShopSettings shopsetting = shopsettings.getResultList().get(0);
			shoptimezone = shopsetting.getTimezone();
			if(shoptimezone == null){
				shoptimezone = "MST";
				shopsetting.setTimezone(shoptimezone);
				shopsetting.merge();
			}

		}catch(Exception e){
			log.error(e);
		}
		
		TimeZone tz = TimeZone.getTimeZone(shoptimezone);
		Date dateValue = new Date();
		Calendar calValue = Calendar.getInstance(tz);
		calValue.setTime(dateValue);
		
		String selecteddate = "";
		DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
		Date beginofday = null;
		Date endofday = null;
		
		try {
			String dateString = df.format(calValue.getTime());
			endofday = df.parse(dateString);
			beginofday = df.parse(dateString);
		} catch (ParseException e) {
			e.printStackTrace();
		}
		beginofday.setHours(0);
		beginofday.setMinutes(0);
		TypedQuery<Appointment> appointments = Appointment.findAppointmentsByShopAndStatusAndClientIsNotNullAndAppointmentDateBetween(getShop(), ScheduleStatus.CHECKED_OUT, beginofday, endofday);
		Long szoflilst = (long)appointments.getResultList().size();
        return szoflilst;
    }
	@ModelAttribute("todaysdate")
    public String todaysdate() {
		log.debug("Entering todaysdate");
		String today = "";
		String shoptimezone = "";
		try{
			TypedQuery<ShopSettings> shopsettings = ShopSettings.findShopSettingsesByShop(getShop());
			ShopSettings shopsetting = shopsettings.getResultList().get(0);
			shoptimezone = shopsetting.getTimezone();
			if(shoptimezone == null){
				shoptimezone = "MST";
				shopsetting.setTimezone(shoptimezone);
				shopsetting.merge();
			}

		}catch(Exception e){
			log.error(e);
		}
		TimeZone tz = TimeZone.getTimeZone(shoptimezone);
		Date dateValue = new Date();
		Calendar calValue = Calendar.getInstance(tz);
		calValue.setTime(dateValue);
		
		DateFormat df = new SimpleDateFormat("MM-dd-yyyy");
		String dateString = df.format(calValue.getTime());
		today = dateString;
		log.debug("EXITING todaysdate");
        return today;
    }
	@ModelAttribute("todayspayments")
    public long todayspayments() {
		log.debug("Entering todayspayments");

		String shoptimezone = "";
		try{
			TypedQuery<ShopSettings> shopsettings = ShopSettings.findShopSettingsesByShop(getShop());
			ShopSettings shopsetting = shopsettings.getResultList().get(0);
			shoptimezone = shopsetting.getTimezone();
			if(shoptimezone == null){
				shoptimezone = "MST";
				shopsetting.setTimezone(shoptimezone);
				shopsetting.merge();
			}

		}catch(Exception e){
			log.error(e);
		}
		TimeZone tz = TimeZone.getTimeZone(shoptimezone);
		Date dateValue = new Date();
		Calendar calValue = Calendar.getInstance(tz);
		calValue.setTime(dateValue);
		
		String selecteddate = "";
		DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
		Date beginofday = null;
		Date endofday = null;
		
		try {
			String dateString = df.format(calValue.getTime());
			endofday = df.parse(dateString);
			beginofday = df.parse(dateString);
			
		} catch (ParseException e) {
			e.printStackTrace();
		}
		beginofday.setHours(0);
		beginofday.setMinutes(0);
		endofday.setHours(23);
		endofday.setMinutes(59);
		
		TypedQuery<Payments> datas = com.yourhairsalon.booking.domain.Payments.findPaymentsesByShopAndDatecreatedBetween(getShop(),beginofday,endofday);
		
		long todayssz = (long)datas.getResultList().size();
		log.debug("EXITING todayspayments");
        return todayssz;
    }
	@ModelAttribute("todaysdollars")
    public Float todaysdollars() {
		log.debug("Entering todaysdollars");

		String shoptimezone = "";
		try{
			TypedQuery<ShopSettings> shopsettings = ShopSettings.findShopSettingsesByShop(getShop());
			ShopSettings shopsetting = shopsettings.getResultList().get(0);
			shoptimezone = shopsetting.getTimezone();
			if(shoptimezone == null){
				shoptimezone = "MST";
				shopsetting.setTimezone(shoptimezone);
				shopsetting.merge();
			}

		}catch(Exception e){
			log.error(e);
		}
		TimeZone tz = TimeZone.getTimeZone(shoptimezone);
		Date dateValue = new Date();
		Calendar calValue = Calendar.getInstance(tz);
		calValue.setTime(dateValue);
		
		String selecteddate = "";
		DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
		Date beginofday = null;
		Date endofday = null;
		
		try {
			String dateString = df.format(calValue.getTime());
			endofday = df.parse(dateString);
			beginofday = df.parse(dateString);
			
		} catch (ParseException e) {
			e.printStackTrace();
		}
		beginofday.setHours(0);
		beginofday.setMinutes(0);
		endofday.setHours(23);
		endofday.setMinutes(59);
		
		TypedQuery<Payments> datas = com.yourhairsalon.booking.domain.Payments.findPaymentsesByShopAndDatecreatedBetween(getShop(),beginofday,endofday);		
		List<Payments> pays = datas.getResultList();
		Float sum = 0.00F;
		Iterator<Payments> iterator = pays.iterator();
		while (iterator.hasNext()) {
			Payments pay = iterator.next();
			sum += pay.getAmount();
		}		
		
		log.debug("EXITING todaysdollars");
        return sum;
    }
	@ModelAttribute("todaysgratuity")
    public Float todaysgratuity() {
		log.debug("Entering todaysgratuity");

		String shoptimezone = "";
		try{
			TypedQuery<ShopSettings> shopsettings = ShopSettings.findShopSettingsesByShop(getShop());
			ShopSettings shopsetting = shopsettings.getResultList().get(0);
			shoptimezone = shopsetting.getTimezone();
			if(shoptimezone == null){
				shoptimezone = "MST";
				shopsetting.setTimezone(shoptimezone);
				shopsetting.merge();
			}

		}catch(Exception e){
			log.error(e);
		}
		TimeZone tz = TimeZone.getTimeZone(shoptimezone);
		Date dateValue = new Date();
		Calendar calValue = Calendar.getInstance(tz);
		calValue.setTime(dateValue);
		
		String selecteddate = "";
		DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
		Date beginofday = null;
		Date endofday = null;
		
		try {
			String dateString = df.format(calValue.getTime());
			endofday = df.parse(dateString);
			beginofday = df.parse(dateString);
			
		} catch (ParseException e) {
			e.printStackTrace();
		}
		beginofday.setHours(0);
		beginofday.setMinutes(0);
		endofday.setHours(23);
		endofday.setMinutes(59);
		
		TypedQuery<Payments> datas = com.yourhairsalon.booking.domain.Payments.findPaymentsesByShopAndDatecreatedBetween(getShop(),beginofday,endofday);		
		List<Payments> pays = datas.getResultList();
		Float sum = 0.00F;
		Iterator<Payments> iterator = pays.iterator();
		while (iterator.hasNext()) {
			Payments pay = iterator.next();
			sum += pay.getGratuity();
		}		
		
		log.debug("EXITING todaysgratuity");
        return sum;
    }
	

	public UserPreference getPreferences() {
		return preferences;
	}

	public void setPreferences(UserPreference preferences) {
		this.preferences = preferences;
	}

	@ModelAttribute("staffs")
    public Map<String,String> populateStaffs() {
    	log.debug("ENTERED populateStaffs");
    	log.debug("STEP 1");
		Collection<Staff> staff = Staff.findStaffsByShop(getShop()).getResultList();
		Map map = new HashMap();
		Iterator itr = staff.iterator();
		while (itr.hasNext()) {
			Staff staffs = (Staff) itr.next();
			String name = staffs.getFirstName();
			staffs.setFirstName(name.substring(0, 1).toUpperCase() + name.substring(1).toLowerCase());
			String lname = staffs.getLastName();
			staffs.setLastName(lname.substring(0, 1).toUpperCase() + lname.substring(1).toLowerCase());
			String sid = ""+staffs.getId();
			String desc = name + " " + lname;
			map.put(new String(sid), new String(desc));
		}
		
		log.debug("EXITING populateStaffs");
        return map;
    }
	
}